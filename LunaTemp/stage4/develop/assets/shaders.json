["\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\n#define SV_Target0 gl_FragData[0]\nvoid main()\n{\n    SV_Target0 = vec4(1.0, 0.0, 1.0, 1.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvoid main()\n{\n    SV_Target0 = vec4(1.0, 0.0, 1.0, 1.0);\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec4 in_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 = u_xlat10_0 * vs_COLOR0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nin highp vec4 in_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_COLOR0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    vs_COLOR0 = in_COLOR0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_COLOR0;\nlayout(location = 0) out highp vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec4 vs_COLOR1;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    SV_Target0 = vec4(u_xlat16_1) * vs_COLOR0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout mediump vec4 vs_COLOR1;\nout highp vec4 vs_TEXCOORD0;\nout mediump vec4 vs_TEXCOORD1;\nout mediump vec4 vs_TEXCOORD2;\nvec2 u_xlat0;\nbool u_xlatb0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nmediump vec4 u_xlat16_3;\nvec4 u_xlat4;\nfloat u_xlat5;\nfloat u_xlat7;\nfloat u_xlat10;\nfloat u_xlat12;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    u_xlat16_3 = in_COLOR0 * _FaceColor;\n    u_xlat16_3.xyz = u_xlat16_3.www * u_xlat16_3.xyz;\n    vs_COLOR0 = u_xlat16_3;\n    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat1.xyz = vec3(u_xlat10) * u_xlat1.xyz;\n    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10 = inversesqrt(u_xlat10);\n    u_xlat2.xyz = vec3(u_xlat10) * u_xlat2.xyz;\n    u_xlat10 = dot(u_xlat2.xyz, u_xlat1.xyz);\n    u_xlat1.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat1.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat1.xy;\n    u_xlat1.xy = abs(u_xlat1.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat1.xy = u_xlat2.ww / u_xlat1.xy;\n    u_xlat15 = dot(u_xlat1.xy, u_xlat1.xy);\n    u_xlat1.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat1.xy;\n    u_xlat1.zw = vec2(0.25, 0.25) / u_xlat1.xy;\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.x = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat7 = _Sharpness + 1.0;\n    u_xlat2.x = u_xlat7 * u_xlat2.x;\n    u_xlat7 = u_xlat15 * u_xlat2.x;\n    u_xlat12 = (-_PerspectiveFilter) + 1.0;\n    u_xlat12 = u_xlat12 * abs(u_xlat7);\n    u_xlat15 = u_xlat15 * u_xlat2.x + (-u_xlat12);\n    u_xlat10 = abs(u_xlat10) * u_xlat15 + u_xlat12;\n    u_xlatb15 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat10 = (u_xlatb15) ? u_xlat10 : u_xlat7;\n    u_xlat15 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat15 = u_xlat15 * u_xlat10 + 1.0;\n    u_xlat2.x = u_xlat10 / u_xlat15;\n    u_xlat10 = _OutlineWidth * _ScaleRatioA;\n    u_xlat10 = u_xlat2.x * u_xlat10;\n    u_xlat15 = min(u_xlat10, 1.0);\n    u_xlat15 = sqrt(u_xlat15);\n    u_xlat4.x = in_COLOR0.w * _OutlineColor.w;\n    u_xlat4.xyz = _OutlineColor.xyz * u_xlat4.xxx + (-u_xlat16_3.xyz);\n    u_xlat4.w = _OutlineColor.w * in_COLOR0.w + (-u_xlat16_3.w);\n    u_xlat3 = vec4(u_xlat15) * u_xlat4 + u_xlat16_3;\n    vs_COLOR1 = u_xlat3;\n    u_xlat3 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat3 = min(u_xlat3, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat4.xy = u_xlat0.xy + (-u_xlat3.xy);\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat3.xy);\n    u_xlat1.xy = (-u_xlat3.zw) + u_xlat0.xy;\n    u_xlat0.xy = (-u_xlat3.xy) + u_xlat3.zw;\n    vs_TEXCOORD0.zw = u_xlat4.xy / u_xlat0.xy;\n    vs_TEXCOORD2 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlatb0 = 0.0>=in_TEXCOORD1.y;\n    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);\n    u_xlat5 = (-_WeightNormal) + _WeightBold;\n    u_xlat0.x = u_xlat0.x * u_xlat5 + _WeightNormal;\n    u_xlat0.x = u_xlat0.x * 0.25 + _FaceDilate;\n    u_xlat0.x = u_xlat0.x * _ScaleRatioA;\n    u_xlat0.x = (-u_xlat0.x) * 0.5 + 0.5;\n    u_xlat2.w = u_xlat0.x * u_xlat2.x + -0.5;\n    u_xlat2.y = (-u_xlat10) * 0.5 + u_xlat2.w;\n    u_xlat2.z = u_xlat10 * 0.5 + u_xlat2.w;\n    vs_TEXCOORD1 = u_xlat2;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump float u_xlat16_0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat16_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    SV_Target0 = vec4(u_xlat16_1) * vs_COLOR0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_4 = vs_COLOR0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * vs_COLOR0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_1 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_4 = vs_COLOR0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * vs_COLOR0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_3) * vs_COLOR0;\n    SV_Target0 = vec4(u_xlat16_1) * u_xlat16_0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nmediump float u_xlat16_3;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_3 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_3) * vs_COLOR0;\n    SV_Target0 = vec4(u_xlat16_1) * u_xlat16_0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec4 vs_TEXCOORD0;\nvarying mediump vec4 vs_TEXCOORD1;\nvarying mediump vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp float u_xlat10_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_4 = u_xlat10_0 * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_4) * vs_COLOR0;\n    u_xlat16_4 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec4 vs_TEXCOORD0;\nin mediump vec4 vs_TEXCOORD1;\nin mediump vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec2 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nbool u_xlatb2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat16_4 = u_xlat16_0.x * vs_TEXCOORD1.x + (-vs_TEXCOORD1.w);\n    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);\n    u_xlat16_0 = vec4(u_xlat16_4) * vs_COLOR0;\n    u_xlat16_4 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_0;\n    SV_Target0 = u_xlat16_0;\n    u_xlatb2 = u_xlat16_4<0.0;\n    if(u_xlatb2){discard;}\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat16_0 + _TextureSampleAdd;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump float u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat16_0 + _TextureSampleAdd;\n    u_xlat16_1 = u_xlat0.w * vs_COLOR0.w + -0.00100000005;\n    u_xlat0 = u_xlat0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    u_xlatb0 = u_xlat16_1<0.0;\n    if(u_xlatb0){discard;}\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat1.w * u_xlat0.x + -0.00100000005;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    u_xlatb0.x = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbvec4 u_xlatb0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nvoid main()\n{\n    u_xlatb0.xy = greaterThanEqual(vs_TEXCOORD1.xyxx, _ClipRect.xyxx).xy;\n    u_xlatb0.zw = greaterThanEqual(_ClipRect.zzzw, vs_TEXCOORD1.xxxy).zw;\n    u_xlat0.x = u_xlatb0.x ? float(1.0) : 0.0;\n    u_xlat0.y = u_xlatb0.y ? float(1.0) : 0.0;\n    u_xlat0.z = u_xlatb0.z ? float(1.0) : 0.0;\n    u_xlat0.w = u_xlatb0.w ? float(1.0) : 0.0;\n;\n    u_xlat0.xy = u_xlat0.zw * u_xlat0.xy;\n    u_xlat0.x = u_xlat0.y * u_xlat0.x;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat1 = u_xlat1 * vs_COLOR0;\n    u_xlat16_2 = u_xlat1.w * u_xlat0.x + -0.00100000005;\n    u_xlat1.w = u_xlat0.x * u_xlat1.w;\n    SV_Target0 = u_xlat1;\n    u_xlatb0.x = u_xlat16_2<0.0;\n    if(u_xlatb0.x){discard;}\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat10_0 * vs_COLOR0;\n    u_xlat0 = u_xlat0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat16_0 * vs_COLOR0;\n    u_xlat0 = u_xlat0 * vs_COLOR0.wwww;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * _Color.xyz;\n    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout highp vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD1;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD1.xy).xyz;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * _Color.xyz;\n    u_xlat0.xyz = u_xlat16_1.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nvarying highp vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD1;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat10_0 * _Color;\n    u_xlat0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin highp vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD1;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD1.xy);\n    u_xlat16_0 = u_xlat16_0 * _Color;\n    u_xlat0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nattribute highp vec2 in_TEXCOORD1;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nlowp vec4 u_xlat10_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tfloat _FaceDilate;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineWidth;\nuniform \tvec4 hlslcc_mtx4x4_EnvMatrix[4];\nuniform \tfloat _WeightNormal;\nuniform \tfloat _WeightBold;\nuniform \tfloat _ScaleRatioA;\nuniform \tfloat _VertexOffsetX;\nuniform \tfloat _VertexOffsetY;\nuniform \tvec4 _ClipRect;\nuniform \tfloat _MaskSoftnessX;\nuniform \tfloat _MaskSoftnessY;\nuniform \tfloat _GradientScale;\nuniform \tfloat _ScaleX;\nuniform \tfloat _ScaleY;\nuniform \tfloat _PerspectiveFilter;\nuniform \tfloat _Sharpness;\nuniform \tvec4 _FaceTex_ST;\nuniform \tvec4 _OutlineTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin mediump vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nin highp vec2 in_TEXCOORD1;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD3;\nout highp vec4 vs_TEXCOORD5;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nvec4 u_xlat3;\nvec3 u_xlat6;\nvec2 u_xlat8;\nbool u_xlatb8;\nfloat u_xlat12;\nbool u_xlatb12;\nfloat u_xlat13;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy + vec2(_VertexOffsetX, _VertexOffsetY);\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;\n    u_xlat2 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;\n    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat3;\n    u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat3;\n    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat3;\n    gl_Position = u_xlat2;\n    vs_COLOR0 = in_COLOR0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    u_xlat8.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat8.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat8.xy;\n    u_xlat8.xy = abs(u_xlat8.xy) * vec2(_ScaleX, _ScaleY);\n    u_xlat8.xy = u_xlat2.ww / u_xlat8.xy;\n    u_xlat13 = dot(u_xlat8.xy, u_xlat8.xy);\n    u_xlat8.xy = vec2(_MaskSoftnessX, _MaskSoftnessY) * vec2(0.25, 0.25) + u_xlat8.xy;\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat8.xy;\n    u_xlat8.x = inversesqrt(u_xlat13);\n    u_xlat12 = abs(in_TEXCOORD1.y) * _GradientScale;\n    u_xlat13 = _Sharpness + 1.0;\n    u_xlat12 = u_xlat12 * u_xlat13;\n    u_xlat13 = u_xlat12 * u_xlat8.x;\n    u_xlat2.x = (-_PerspectiveFilter) + 1.0;\n    u_xlat2.x = abs(u_xlat13) * u_xlat2.x;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + (-u_xlat2.x);\n    u_xlat3.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat3.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat3.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat12 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat6.xyz = vec3(u_xlat12) * u_xlat3.xyz;\n    u_xlat12 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat12 = inversesqrt(u_xlat12);\n    u_xlat3.xyz = vec3(u_xlat12) * u_xlat1.xyz;\n    u_xlat12 = dot(u_xlat6.xyz, u_xlat3.xyz);\n    u_xlat8.x = abs(u_xlat12) * u_xlat8.x + u_xlat2.x;\n    u_xlatb12 = hlslcc_mtx4x4glstate_matrix_projection[3].w==0.0;\n    u_xlat6.x = (u_xlatb12) ? u_xlat8.x : u_xlat13;\n    u_xlatb8 = 0.0>=in_TEXCOORD1.y;\n    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);\n    u_xlat12 = (-_WeightNormal) + _WeightBold;\n    u_xlat8.x = u_xlat8.x * u_xlat12 + _WeightNormal;\n    u_xlat8.x = u_xlat8.x * 0.25 + _FaceDilate;\n    u_xlat8.x = u_xlat8.x * _ScaleRatioA;\n    u_xlat6.z = u_xlat8.x * 0.5;\n    vs_TEXCOORD1.yw = u_xlat6.xz;\n    u_xlat12 = 0.5 / u_xlat6.x;\n    u_xlat13 = (-_OutlineWidth) * _ScaleRatioA + 1.0;\n    u_xlat13 = (-_OutlineSoftness) * _ScaleRatioA + u_xlat13;\n    u_xlat13 = u_xlat13 * 0.5 + (-u_xlat12);\n    vs_TEXCOORD1.x = (-u_xlat8.x) * 0.5 + u_xlat13;\n    u_xlat8.x = (-u_xlat8.x) * 0.5 + 0.5;\n    vs_TEXCOORD1.z = u_xlat12 + u_xlat8.x;\n    u_xlat2 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat2 = min(u_xlat2, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = u_xlat0.xy * vec2(2.0, 2.0) + (-u_xlat2.xy);\n    vs_TEXCOORD2.xy = (-u_xlat2.zw) + u_xlat0.xy;\n    u_xlat0.xyz = u_xlat1.yyy * hlslcc_mtx4x4_EnvMatrix[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4_EnvMatrix[0].xyz * u_xlat1.xxx + u_xlat0.xyz;\n    vs_TEXCOORD3.xyz = hlslcc_mtx4x4_EnvMatrix[2].xyz * u_xlat1.zzz + u_xlat0.xyz;\n    u_xlat0.x = in_TEXCOORD1.x * 0.000244140625;\n    u_xlat8.x = floor(u_xlat0.x);\n    u_xlat8.y = (-u_xlat8.x) * 4096.0 + in_TEXCOORD1.x;\n    u_xlat0.xy = u_xlat8.xy * vec2(0.001953125, 0.001953125);\n    vs_TEXCOORD5.xy = u_xlat0.xy * _FaceTex_ST.xy + _FaceTex_ST.zw;\n    vs_TEXCOORD5.zw = u_xlat0.xy * _OutlineTex_ST.xy + _OutlineTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nfloat u_xlat4;\nmediump vec4 u_xlat16_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4 = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4 = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4 * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4 * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat4 = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_3.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4 = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4);\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_3.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * vec3(u_xlat4) + u_xlat16_2.xyz;\n    u_xlat0.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat5 = u_xlat0.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat0.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat5 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_6 = u_xlat16_3.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = vec4(u_xlat16_1) * u_xlat16_3;\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nlowp vec4 u_xlat10_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat4.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nuniform lowp sampler2D _FaceTex;\nuniform lowp sampler2D _OutlineTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD5;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nlowp vec4 u_xlat10_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat10_0.x = texture2D(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat10_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat10_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat10_0 = texture2D(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat10_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat10_4 = texture2D(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat10_4.xyz;\n    u_xlat4.x = u_xlat10_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat10_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat10_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Time;\nuniform \tfloat _FaceUVSpeedX;\nuniform \tfloat _FaceUVSpeedY;\nuniform \tmediump vec4 _FaceColor;\nuniform \tfloat _OutlineSoftness;\nuniform \tfloat _OutlineUVSpeedX;\nuniform \tfloat _OutlineUVSpeedY;\nuniform \tmediump vec4 _OutlineColor;\nuniform \tfloat _OutlineWidth;\nuniform \tfloat _ScaleRatioA;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D _FaceTex;\nUNITY_LOCATION(2) uniform mediump sampler2D _OutlineTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD1;\nin highp vec4 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD5;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec2 u_xlat4;\nmediump vec4 u_xlat16_4;\nbool u_xlatb4;\nfloat u_xlat5;\nbool u_xlatb5;\nmediump float u_xlat16_6;\nfloat u_xlat9;\nmediump float u_xlat16_11;\nvoid main()\n{\n    u_xlat16_0.x = texture(_MainTex, vs_TEXCOORD0.xy).w;\n    u_xlat5 = u_xlat16_0.x + (-vs_TEXCOORD1.x);\n    u_xlat0.x = (-u_xlat16_0.x) + vs_TEXCOORD1.z;\n    u_xlatb5 = u_xlat5<0.0;\n    if(u_xlatb5){discard;}\n    u_xlat5 = _OutlineWidth * _ScaleRatioA;\n    u_xlat5 = u_xlat5 * vs_TEXCOORD1.y;\n    u_xlat16_1 = min(u_xlat5, 1.0);\n    u_xlat16_6 = u_xlat5 * 0.5;\n    u_xlat16_1 = sqrt(u_xlat16_1);\n    u_xlat16_11 = u_xlat0.x * vs_TEXCOORD1.y + u_xlat16_6;\n    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);\n    u_xlat16_6 = u_xlat0.x * vs_TEXCOORD1.y + (-u_xlat16_6);\n    u_xlat16_1 = u_xlat16_1 * u_xlat16_11;\n    u_xlat0.xy = vec2(_OutlineUVSpeedX, _OutlineUVSpeedY) * _Time.yy + vs_TEXCOORD5.zw;\n    u_xlat16_0 = texture(_OutlineTex, u_xlat0.xy);\n    u_xlat2 = u_xlat16_0 * _OutlineColor;\n    u_xlat16_3.xyz = vs_COLOR0.xyz * _FaceColor.xyz;\n    u_xlat0.xy = vec2(_FaceUVSpeedX, _FaceUVSpeedY) * _Time.yy + vs_TEXCOORD5.xy;\n    u_xlat16_4 = texture(_FaceTex, u_xlat0.xy);\n    u_xlat0.xyz = u_xlat16_3.xyz * u_xlat16_4.xyz;\n    u_xlat4.x = u_xlat16_4.w * _FaceColor.w;\n    u_xlat16_3.xyz = u_xlat0.xyz * u_xlat4.xxx;\n    u_xlat16_2.xyz = u_xlat2.xyz * u_xlat2.www + (-u_xlat16_3.xyz);\n    u_xlat16_2.w = _OutlineColor.w * u_xlat16_0.w + (-u_xlat4.x);\n    u_xlat16_2 = vec4(u_xlat16_1) * u_xlat16_2;\n    u_xlat16_0.xyz = u_xlat0.xyz * u_xlat4.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.w = _FaceColor.w * u_xlat16_4.w + u_xlat16_2.w;\n    u_xlat4.x = _OutlineSoftness * _ScaleRatioA;\n    u_xlat9 = u_xlat4.x * vs_TEXCOORD1.y;\n    u_xlat16_1 = u_xlat4.x * vs_TEXCOORD1.y + 1.0;\n    u_xlat16_6 = u_xlat9 * 0.5 + u_xlat16_6;\n    u_xlat16_1 = u_xlat16_6 / u_xlat16_1;\n    u_xlat16_1 = clamp(u_xlat16_1, 0.0, 1.0);\n    u_xlat16_1 = (-u_xlat16_1) + 1.0;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    u_xlat4.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat4.xy = u_xlat4.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat4.xy = u_xlat4.xy * vs_TEXCOORD2.zw;\n    u_xlat4.xy = clamp(u_xlat4.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat4.y * u_xlat4.x;\n    u_xlat16_6 = u_xlat16_0.w * u_xlat16_1 + -0.00100000005;\n    u_xlat16_0 = u_xlat16_0 * vec4(u_xlat16_1);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0.wwww;\n    u_xlatb4 = u_xlat16_6<0.0;\n    if(u_xlatb4){discard;}\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat10_0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_0.xyz;\n    SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat16_0 = u_xlat16_0 * vs_COLOR0;\n    SV_Target0.xyz = u_xlat16_0.www * u_xlat16_0.xyz;\n    SV_Target0.w = u_xlat16_0.w;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat0.xy = u_xlat0.xy * u_xlat1.xy;\n    u_xlat0.xy = unity_roundEven(u_xlat0.xy);\n    u_xlat0.xy = u_xlat0.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat0.ww * u_xlat0.xy;\n    gl_Position.zw = u_xlat0.zw;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _RendererColor;\nuniform \tmediump vec2 _Flip;\nuniform \tmediump vec4 _Color;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0.xy = in_POSITION0.xy * _Flip.xy;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    u_xlat0.xy = u_xlat0.xy / u_xlat0.ww;\n    u_xlat1.xy = _ScreenParams.xy * vec2(0.5, 0.5);\n    u_xlat0.xy = u_xlat0.xy * u_xlat1.xy;\n    u_xlat0.xy = roundEven(u_xlat0.xy);\n    u_xlat0.xy = u_xlat0.xy / u_xlat1.xy;\n    gl_Position.xy = u_xlat0.ww * u_xlat0.xy;\n    gl_Position.zw = u_xlat0.zw;\n    u_xlat0 = in_COLOR0 * _Color;\n    u_xlat0 = u_xlat0 * _RendererColor;\n    vs_COLOR0 = u_xlat0;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec3 in_POSITION0;\nattribute mediump vec4 in_COLOR0;\nattribute highp vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_COLOR0 = in_COLOR0;\n    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nlowp vec4 u_xlat10_0;\nvoid main()\n{\n    u_xlat10_0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 = u_xlat10_0 * vs_COLOR0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin mediump vec4 in_COLOR0;\nin highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_COLOR0 = in_COLOR0;\n    vs_COLOR0 = clamp(vs_COLOR0, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nvoid main()\n{\n    u_xlat16_0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    SV_Target0 = u_xlat16_0 * vs_COLOR0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _Color;\nuniform highp sampler2D _MainTex;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _MainTex_ST;\nin highp vec4 in_POSITION0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _Color;\nUNITY_LOCATION(0) uniform highp sampler2D _MainTex;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nvoid main()\n{\n    u_xlat0 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat0 = u_xlat0 * _Color;\n    SV_Target0 = u_xlat0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nattribute highp vec4 in_POSITION0;\nattribute highp vec4 in_COLOR0;\nattribute highp vec2 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD1;\nvarying highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _ScreenParams;\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4glstate_matrix_projection[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tvec4 _ClipRect;\nuniform \tvec4 _MainTex_ST;\nuniform \tfloat _UIMaskSoftnessX;\nuniform \tfloat _UIMaskSoftnessY;\nin highp vec4 in_POSITION0;\nin highp vec4 in_COLOR0;\nin highp vec2 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec4 vs_TEXCOORD1;\nout highp vec4 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    gl_Position = u_xlat0;\n    u_xlat1 = in_COLOR0 * _Color;\n    vs_COLOR0 = u_xlat1;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    vs_TEXCOORD1 = in_POSITION0;\n    u_xlat0.xy = _ScreenParams.yy * hlslcc_mtx4x4glstate_matrix_projection[1].xy;\n    u_xlat0.xy = hlslcc_mtx4x4glstate_matrix_projection[0].xy * _ScreenParams.xx + u_xlat0.xy;\n    u_xlat0.xy = u_xlat0.ww / abs(u_xlat0.xy);\n    u_xlat0.xy = vec2(_UIMaskSoftnessX, _UIMaskSoftnessY) * vec2(0.25, 0.25) + abs(u_xlat0.xy);\n    vs_TEXCOORD2.zw = vec2(0.25, 0.25) / u_xlat0.xy;\n    u_xlat0 = max(_ClipRect, vec4(-2e+10, -2e+10, -2e+10, -2e+10));\n    u_xlat0 = min(u_xlat0, vec4(2e+10, 2e+10, 2e+10, 2e+10));\n    u_xlat0.xy = in_POSITION0.xy * vec2(2.0, 2.0) + (-u_xlat0.xy);\n    vs_TEXCOORD2.xy = (-u_xlat0.zw) + u_xlat0.xy;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3 = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nmediump float u_xlat16_2;\nbool u_xlatb3;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_2 = u_xlat16_0.w * u_xlat1.w + -0.00100000005;\n    u_xlatb3 = u_xlat16_2<0.0;\n    if(u_xlatb3){discard;}\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    SV_Target0.xyz = u_xlat0.www * u_xlat0.xyz;\n    SV_Target0.w = u_xlat0.w;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump float u_xlat16_4;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 = vs_COLOR0.w * 255.0;\n    u_xlat16_4 = unity_roundEven(u_xlat16_4);\n    u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat10_2 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat10_2 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n    u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nmediump float u_xlat16_1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump float u_xlat16_4;\nvoid main()\n{\n    u_xlat0.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat0.xy = u_xlat0.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat0.xy = u_xlat0.xy * vs_TEXCOORD2.zw;\n    u_xlat0.xy = clamp(u_xlat0.xy, 0.0, 1.0);\n    u_xlat16_1 = u_xlat0.y * u_xlat0.x;\n    u_xlat16_4 = vs_COLOR0.w * 255.0;\n    u_xlat16_4 = roundEven(u_xlat16_4);\n    u_xlat16_0.w = u_xlat16_4 * 0.00392156886;\n    u_xlat16_2 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat2 = u_xlat16_2 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat2;\n    u_xlat16_1 = u_xlat16_1 * u_xlat0.w;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_1);\n    SV_Target0.w = u_xlat16_1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec4 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nlowp vec4 u_xlat10_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nfloat unity_roundEven(float x) { float y = floor(x + 0.5); return (y - x == 0.5) ? floor(0.5*y) * 2.0 : y; }\nvec2 unity_roundEven(vec2 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); return a; }\nvec3 unity_roundEven(vec3 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); return a; }\nvec4 unity_roundEven(vec4 a) { a.x = unity_roundEven(a.x); a.y = unity_roundEven(a.y); a.z = unity_roundEven(a.z); a.w = unity_roundEven(a.w); return a; }\n\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = unity_roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat10_1 = texture2D(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat10_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 _TextureSampleAdd;\nuniform \tvec4 _ClipRect;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin highp vec2 vs_TEXCOORD0;\nin highp vec4 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nbool u_xlatb1;\nmediump float u_xlat16_2;\nmediump float u_xlat16_5;\nvoid main()\n{\n    u_xlat16_0.x = vs_COLOR0.w * 255.0;\n    u_xlat16_0.x = roundEven(u_xlat16_0.x);\n    u_xlat16_0.w = u_xlat16_0.x * 0.00392156886;\n    u_xlat16_1 = texture(_MainTex, vs_TEXCOORD0.xy);\n    u_xlat1 = u_xlat16_1 + _TextureSampleAdd;\n    u_xlat16_0.xyz = vs_COLOR0.xyz;\n    u_xlat0 = u_xlat16_0 * u_xlat1;\n    u_xlat1.xy = (-_ClipRect.xy) + _ClipRect.zw;\n    u_xlat1.xy = u_xlat1.xy + -abs(vs_TEXCOORD2.xy);\n    u_xlat1.xy = u_xlat1.xy * vs_TEXCOORD2.zw;\n    u_xlat1.xy = clamp(u_xlat1.xy, 0.0, 1.0);\n    u_xlat16_2 = u_xlat1.y * u_xlat1.x;\n    u_xlat16_5 = u_xlat0.w * u_xlat16_2 + -0.00100000005;\n    u_xlat16_2 = u_xlat0.w * u_xlat16_2;\n    SV_Target0.xyz = u_xlat0.xyz * vec3(u_xlat16_2);\n    SV_Target0.w = u_xlat16_2;\n    u_xlatb1 = u_xlat16_5<0.0;\n    if(u_xlatb1){discard;}\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec3 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec3 in_TEXCOORD0;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat36;\nint u_xlati37;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n    u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlat16_44 = dot(u_xlat1.xyz, unity_LightPosition[u_xlati_loop_1].xyz);\n        u_xlat16_44 = max(u_xlat16_44, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_44) * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n        u_xlatb2 = 0.0<u_xlat16_44;\n        if(u_xlatb2){\n            u_xlat16_11.xyz = (-u_xlat0.xyz) * vec3(u_xlat36) + unity_LightPosition[u_xlati_loop_1].xyz;\n            u_xlat16_44 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat16_11.xyz = vec3(u_xlat16_44) * u_xlat16_11.xyz;\n            u_xlat16_44 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = max(u_xlat16_44, 0.0);\n            u_xlat16_44 = log2(u_xlat16_44);\n            u_xlat16_44 = u_xlat16_43 * u_xlat16_44;\n            u_xlat16_44 = exp2(u_xlat16_44);\n            u_xlat16_44 = min(u_xlat16_44, 1.0);\n            u_xlat16_44 = u_xlat16_44 * 0.5;\n            u_xlat16_9.xyz = vec3(u_xlat16_44) * unity_LightColor[u_xlati_loop_1].xyz + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(0.5, 0.5, 0.5);\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n    }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform lowp sampler2D _MainTex;\nvarying mediump vec4 vs_COLOR0;\nvarying mediump vec3 vs_COLOR1;\nvarying highp vec2 vs_TEXCOORD0;\n#define SV_Target0 gl_FragData[0]\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat10_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_LightColor[8];\nuniform \tvec4 unity_LightPosition[8];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 glstate_lightmodel_ambient;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixInvV[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tmediump vec4 _Color;\nuniform \tmediump vec4 _SpecColor;\nuniform \tmediump vec4 _Emission;\nuniform \tmediump float _Shininess;\nuniform \tivec4 unity_VertexLightParams;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec3 in_TEXCOORD0;\nout mediump vec4 vs_COLOR0;\nout mediump vec3 vs_COLOR1;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvec3 u_xlat2;\nbool u_xlatb2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nvec3 u_xlat5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nfloat u_xlat36;\nint u_xlati37;\nmediump float u_xlat16_43;\nmediump float u_xlat16_44;\nvoid main()\n{\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat0.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat1.xyz;\n    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat1.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat2.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat3.xyz;\n    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat3.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].yyy;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].zzz + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[0].www + u_xlat4.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].yyy;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].zzz + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[1].www + u_xlat5.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[1].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].yyy;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].zzz + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4unity_WorldToObject[3].xyz * hlslcc_mtx4x4unity_MatrixInvV[2].www + u_xlat6.xyz;\n    u_xlat1.xyz = u_xlat1.xyz * in_POSITION0.yyy;\n    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.xxx + u_xlat1.xyz;\n    u_xlat0.xyz = u_xlat2.xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat3.xyz + u_xlat0.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, in_NORMAL0.xyz);\n    u_xlat1.y = dot(u_xlat5.xyz, in_NORMAL0.xyz);\n    u_xlat1.z = dot(u_xlat6.xyz, in_NORMAL0.xyz);\n    u_xlat36 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat1.xyz = vec3(u_xlat36) * u_xlat1.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat16_7.xyz = _Color.xyz * glstate_lightmodel_ambient.xyz + _Emission.xyz;\n    u_xlat16_43 = _Shininess * 128.0;\n    u_xlat16_8.xyz = u_xlat16_7.xyz;\n    u_xlat16_9.x = float(0.0);\n    u_xlat16_9.y = float(0.0);\n    u_xlat16_9.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<unity_VertexLightParams.x ; u_xlati_loop_1++)\n    {\n        u_xlat16_44 = dot(u_xlat1.xyz, unity_LightPosition[u_xlati_loop_1].xyz);\n        u_xlat16_44 = max(u_xlat16_44, 0.0);\n        u_xlat16_10.xyz = vec3(u_xlat16_44) * _Color.xyz;\n        u_xlat16_10.xyz = u_xlat16_10.xyz * unity_LightColor[u_xlati_loop_1].xyz;\n        u_xlatb2 = 0.0<u_xlat16_44;\n        if(u_xlatb2){\n            u_xlat16_11.xyz = (-u_xlat0.xyz) * vec3(u_xlat36) + unity_LightPosition[u_xlati_loop_1].xyz;\n            u_xlat16_44 = dot(u_xlat16_11.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = inversesqrt(u_xlat16_44);\n            u_xlat16_11.xyz = vec3(u_xlat16_44) * u_xlat16_11.xyz;\n            u_xlat16_44 = dot(u_xlat1.xyz, u_xlat16_11.xyz);\n            u_xlat16_44 = max(u_xlat16_44, 0.0);\n            u_xlat16_44 = log2(u_xlat16_44);\n            u_xlat16_44 = u_xlat16_43 * u_xlat16_44;\n            u_xlat16_44 = exp2(u_xlat16_44);\n            u_xlat16_44 = min(u_xlat16_44, 1.0);\n            u_xlat16_44 = u_xlat16_44 * 0.5;\n            u_xlat16_9.xyz = vec3(u_xlat16_44) * unity_LightColor[u_xlati_loop_1].xyz + u_xlat16_9.xyz;\n        }\n        u_xlat16_10.xyz = u_xlat16_10.xyz * vec3(0.5, 0.5, 0.5);\n        u_xlat16_10.xyz = min(u_xlat16_10.xyz, vec3(1.0, 1.0, 1.0));\n        u_xlat16_8.xyz = u_xlat16_8.xyz + u_xlat16_10.xyz;\n    }\n    vs_COLOR1.xyz = u_xlat16_9.xyz * _SpecColor.xyz;\n    vs_COLOR1.xyz = clamp(vs_COLOR1.xyz, 0.0, 1.0);\n    vs_COLOR0.xyz = u_xlat16_8.xyz;\n    vs_COLOR0.xyz = clamp(vs_COLOR0.xyz, 0.0, 1.0);\n    vs_COLOR0.w = _Color.w;\n    vs_COLOR0.w = clamp(vs_COLOR0.w, 0.0, 1.0);\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nin mediump vec4 vs_COLOR0;\nin mediump vec3 vs_COLOR1;\nin highp vec2 vs_TEXCOORD0;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * vs_COLOR0.xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * vec3(2.0, 2.0, 2.0) + vs_COLOR1.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_LightmapST;\nuniform \tvec4 unity_Lightmap_ST;\nuniform \tvec4 _MainTex_ST;\nattribute highp vec3 in_POSITION0;\nattribute highp vec3 in_TEXCOORD1;\nattribute highp vec3 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD1;\nvarying highp vec2 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_Lightmap_ST.xy + unity_Lightmap_ST.zw;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tmediump vec4 unity_Lightmap_HDR;\nuniform \tmediump vec4 _Color;\nuniform lowp sampler2D _MainTex;\nuniform mediump sampler2D unity_Lightmap;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD2;\n#define SV_Target0 gl_FragData[0]\nmediump vec4 u_xlat16_0;\nlowp vec3 u_xlat10_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture2D(unity_Lightmap, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * unity_Lightmap_HDR.x;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat10_0.xyz = texture2D(_MainTex, vs_TEXCOORD2.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat10_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 unity_LightmapST;\nuniform \tvec4 unity_Lightmap_ST;\nuniform \tvec4 _MainTex_ST;\nin highp vec3 in_POSITION0;\nin highp vec3 in_TEXCOORD1;\nin highp vec3 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec2 vs_TEXCOORD1;\nout highp vec2 vs_TEXCOORD2;\nvec4 u_xlat0;\nvec4 u_xlat1;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD1.xy * unity_LightmapST.xy + unity_LightmapST.zw;\n    vs_TEXCOORD1.xy = in_TEXCOORD1.xy * unity_Lightmap_ST.xy + unity_Lightmap_ST.zw;\n    vs_TEXCOORD2.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;\n    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;\n    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tmediump vec4 unity_Lightmap_HDR;\nuniform \tmediump vec4 _Color;\nUNITY_LOCATION(0) uniform mediump sampler2D _MainTex;\nUNITY_LOCATION(1) uniform mediump sampler2D unity_Lightmap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec2 vs_TEXCOORD2;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec4 u_xlat16_0;\nmediump vec3 u_xlat16_1;\nvoid main()\n{\n    u_xlat16_0 = texture(unity_Lightmap, vs_TEXCOORD0.xy);\n    u_xlat16_1.x = u_xlat16_0.w * unity_Lightmap_HDR.x;\n    u_xlat16_1.xyz = u_xlat16_0.xyz * u_xlat16_1.xxx;\n    u_xlat16_1.xyz = u_xlat16_1.xyz * _Color.xyz;\n    u_xlat16_0.xyz = texture(_MainTex, vs_TEXCOORD2.xy).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * u_xlat16_0.xyz;\n    SV_Target0.w = 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump float vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD4;\nvarying mediump vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec3 u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat15;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = max(u_xlat15, 1.17549435e-38);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5 = 0.0;\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);\n    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    {\n        vec3 hlslcc_movcTemp = u_xlat16_2;\n        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_3.x : u_xlat16_2.x;\n        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_3.y : u_xlat16_2.y;\n        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_3.z : u_xlat16_2.z;\n        u_xlat16_2 = hlslcc_movcTemp;\n    }\n    vs_TEXCOORD8.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_16;\nmediump float u_xlat16_18;\nfloat u_xlat25;\nbool u_xlatb25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = (-_Smoothness) + 1.0;\n    u_xlat16_8.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_8.x = u_xlat16_8.x * 6.0;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;\n    u_xlatb25 = unity_OrthoParams.w==0.0;\n    u_xlat16_2.x = (u_xlatb25) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_2.y = (u_xlatb25) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_2.z = (u_xlatb25) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_16 = dot((-u_xlat16_2.xyz), u_xlat1.xyz);\n    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;\n    u_xlat16_3.xyz = u_xlat1.xyz * (-vec3(u_xlat16_16)) + (-u_xlat16_2.xyz);\n    u_xlat10_3 = textureCube(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_8.x);\n    u_xlat16_8.x = u_xlat10_3.w + -1.0;\n    u_xlat16_0.y = unity_SpecCube0_HDR.w * u_xlat16_8.x + 1.0;\n    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0078125, 0.0));\n    u_xlat16_8.x = log2(u_xlat16_0.y);\n    u_xlat16_8.x = u_xlat16_8.x * unity_SpecCube0_HDR.y;\n    u_xlat16_8.x = exp2(u_xlat16_8.x);\n    u_xlat16_8.x = u_xlat16_8.x * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_3.xyz * u_xlat16_8.xxx;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat16_2.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_2.xyz + _MainLightPosition.xyz;\n    u_xlat16_2.x = (-u_xlat16_26) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_18 = (-u_xlat16_10) + _Smoothness;\n    u_xlat16_18 = u_xlat16_18 + 1.0;\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_5.xyz = u_xlat10_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat10_3.wxyz * _BaseColor.wxyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.xyz = vec3(u_xlat16_18) + (-u_xlat16_5.xyz);\n    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xy = u_xlat16_0.xx * u_xlat16_0.xx + vec2(-1.0, 1.0);\n    u_xlat16_29 = float(1.0) / u_xlat16_6.y;\n    u_xlat7.xyz = u_xlat16_2.xzw * vec3(u_xlat16_29);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat7.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10) * u_xlat16_3.yzw;\n    u_xlat16_8.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz + u_xlat16_8.xyz;\n    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat25 = max(u_xlat25, 1.17549435e-38);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;\n    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat16_26 = dot(u_xlat1.xyz, _MainLightPosition.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_26 * unity_LightData.z;\n    u_xlat16_14.xyz = vec3(u_xlat16_26) * _MainLightColor.xyz;\n    u_xlat1.x = u_xlat4.x * u_xlat4.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat16_26 = u_xlat25 * u_xlat25;\n    u_xlat9 = max(u_xlat16_26, 0.100000001);\n    u_xlat1.x = u_xlat9 * u_xlat1.x;\n    u_xlat16_26 = u_xlat16_0.x * 4.0 + 2.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_26;\n    u_xlat1.x = u_xlat16_0.x / u_xlat1.x;\n    u_xlat16_0.x = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat16_0.x = min(u_xlat16_0.x, 100.0);\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_3.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD5;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD4;\nout mediump vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec3 u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat15;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = max(u_xlat15, 1.17549435e-38);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5 = 0.0;\n    u_xlat16_2.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_2.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_2.x);\n    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_2.xyz = unity_SHC.xyz * u_xlat16_2.xxx + u_xlat16_4.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlat16_3.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_2.xyz = log2(abs(u_xlat16_2.xyz));\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_2.xyz = exp2(u_xlat16_2.xyz);\n    u_xlat16_2.xyz = u_xlat16_2.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    {\n        vec3 hlslcc_movcTemp = u_xlat16_2;\n        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_3.x : u_xlat16_2.x;\n        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_3.y : u_xlat16_2.y;\n        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_3.z : u_xlat16_2.z;\n        u_xlat16_2 = hlslcc_movcTemp;\n    }\n    vs_TEXCOORD8.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_16;\nmediump float u_xlat16_18;\nfloat u_xlat25;\nbool u_xlatb25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = (-_Smoothness) + 1.0;\n    u_xlat16_8.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_8.x = u_xlat16_8.x * 6.0;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;\n    u_xlatb25 = unity_OrthoParams.w==0.0;\n    u_xlat16_2.x = (u_xlatb25) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_2.y = (u_xlatb25) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_2.z = (u_xlatb25) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_16 = dot((-u_xlat16_2.xyz), u_xlat1.xyz);\n    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;\n    u_xlat16_3.xyz = u_xlat1.xyz * (-vec3(u_xlat16_16)) + (-u_xlat16_2.xyz);\n    u_xlat16_3 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_8.x);\n    u_xlat16_8.x = u_xlat16_3.w + -1.0;\n    u_xlat16_0.y = unity_SpecCube0_HDR.w * u_xlat16_8.x + 1.0;\n    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0078125, 0.0));\n    u_xlat16_8.x = log2(u_xlat16_0.y);\n    u_xlat16_8.x = u_xlat16_8.x * unity_SpecCube0_HDR.y;\n    u_xlat16_8.x = exp2(u_xlat16_8.x);\n    u_xlat16_8.x = u_xlat16_8.x * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat16_3.xyz * u_xlat16_8.xxx;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat16_2.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_2.xyz + _MainLightPosition.xyz;\n    u_xlat16_2.x = (-u_xlat16_26) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_18 = (-u_xlat16_10) + _Smoothness;\n    u_xlat16_18 = u_xlat16_18 + 1.0;\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_5.xyz = u_xlat16_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat16_3.wxyz * _BaseColor.wxyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.xyz = vec3(u_xlat16_18) + (-u_xlat16_5.xyz);\n    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xy = u_xlat16_0.xx * u_xlat16_0.xx + vec2(-1.0, 1.0);\n    u_xlat16_29 = float(1.0) / u_xlat16_6.y;\n    u_xlat7.xyz = u_xlat16_2.xzw * vec3(u_xlat16_29);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat7.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10) * u_xlat16_3.yzw;\n    u_xlat16_8.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz + u_xlat16_8.xyz;\n    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat25 = max(u_xlat25, 1.17549435e-38);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;\n    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat16_26 = dot(u_xlat1.xyz, _MainLightPosition.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_26 * unity_LightData.z;\n    u_xlat16_14.xyz = vec3(u_xlat16_26) * _MainLightColor.xyz;\n    u_xlat1.x = u_xlat4.x * u_xlat4.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat16_26 = u_xlat25 * u_xlat25;\n    u_xlat9 = max(u_xlat16_26, 0.100000001);\n    u_xlat1.x = u_xlat9 * u_xlat1.x;\n    u_xlat16_26 = u_xlat16_0.x * 4.0 + 2.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_26;\n    u_xlat1.x = u_xlat16_0.x / u_xlat1.x;\n    u_xlat16_0.x = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat16_0.x = min(u_xlat16_0.x, 100.0);\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_3.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_WorldTransformParams;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump float vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying mediump vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec3 u_xlatb1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = max(u_xlat15, 1.17549435e-38);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 1.17549435e-38);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlatb15 = unity_WorldTransformParams.w>=0.0;\n    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;\n    u_xlat2.w = u_xlat15 * in_TANGENT0.w;\n    vs_TEXCOORD3 = u_xlat2;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5 = 0.0;\n    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    {\n        vec3 hlslcc_movcTemp = u_xlat16_3;\n        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_3.x;\n        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_3.y;\n        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_3.z;\n        u_xlat16_3 = hlslcc_movcTemp;\n    }\n    vs_TEXCOORD8.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_12;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat10_2.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat10_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30 = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30)) + (-u_xlat16_3.xyz);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_31 = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30 * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_31);\n    u_xlat16_4.x = u_xlat10_1.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat16_4.xxx;\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_5.xyz = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat10_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.xyz = vec3(u_xlat16_21) + (-u_xlat16_5.xyz);\n    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xz = vec2(u_xlat16_30) * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_21 = float(1.0) / u_xlat16_3.z;\n    u_xlat7.xyz = u_xlat16_6.xyz * vec3(u_xlat16_21);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat7.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_12) * u_xlat16_2.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_6.xyz + u_xlat16_4.xyz;\n    u_xlat16_12 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_12 = u_xlat16_12 * unity_LightData.z;\n    u_xlat16_8.xyz = vec3(u_xlat16_12) * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_12 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_12, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_3.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_3.x = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_12 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat0.x = u_xlat16_12 / u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);\n    u_xlat16_3.x = min(u_xlat16_3.x, 100.0);\n    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz + u_xlat16_4.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD5;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout highp vec3 vs_TEXCOORD4;\nout mediump vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump float u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = max(u_xlat15, 1.17549435e-38);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 1.17549435e-38);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlatb15 = unity_WorldTransformParams.w>=0.0;\n    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;\n    u_xlat2.w = u_xlat15 * in_TANGENT0.w;\n    vs_TEXCOORD3 = u_xlat2;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5 = 0.0;\n    u_xlat16_3 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);\n    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nbvec3 u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat16_2.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat16_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_4.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_4.x;\n    u_xlat16_3.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_4.y;\n    u_xlat16_3.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_4.z;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30)) + (-u_xlat16_4.xyz);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_31 = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30 * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat16_1.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_30) * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_2.yzw;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_30 / u_xlat0.x;\n    u_xlat16_30 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = min(u_xlat16_30, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nint u_xlati3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nbvec3 u_xlatb5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat10;\nint u_xlati10;\nbool u_xlatb10;\nfloat u_xlat17;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nint u_xlati21;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat21, 1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlati21 = int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlatb10 = u_xlati_loop_1>=u_xlati21;\n        if(u_xlatb10){\n            break;\n        }\n        u_xlat16_23 = float(u_xlati_loop_1);\n        u_xlatb10 = u_xlat16_23<2.0;\n        u_xlat16_4.xy = (bool(u_xlatb10)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n        u_xlat16_18 = u_xlat16_23 + -2.0;\n        u_xlat16_23 = (u_xlatb10) ? u_xlat16_23 : u_xlat16_18;\n        u_xlatb10 = u_xlat16_23<1.0;\n        u_xlat16_23 = (u_xlatb10) ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati10 = int(u_xlat16_23);\n        u_xlat5.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati10].www + _AdditionalLightsPosition[u_xlati10].xyz;\n        u_xlat17 = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat17 = max(u_xlat17, 6.10351563e-05);\n        u_xlat24 = inversesqrt(u_xlat17);\n        u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;\n        u_xlat24 = float(1.0) / u_xlat17;\n        u_xlat17 = u_xlat17 * _AdditionalLightsAttenuation[u_xlati10].x + _AdditionalLightsAttenuation[u_xlati10].y;\n        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);\n        u_xlat17 = u_xlat17 * u_xlat24;\n        u_xlat16_23 = dot(_AdditionalLightsSpotDir[u_xlati10].xyz, u_xlat5.xyz);\n        u_xlat16_23 = u_xlat16_23 * _AdditionalLightsAttenuation[u_xlati10].z + _AdditionalLightsAttenuation[u_xlati10].w;\n        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n        u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n        u_xlat17 = u_xlat16_23 * u_xlat17;\n        u_xlat10.xyz = vec3(u_xlat17) * _AdditionalLightsColor[u_xlati10].xyz;\n        u_xlat16_23 = dot(u_xlat1.xyz, u_xlat5.xyz);\n        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n        u_xlat16_2.xyz = u_xlat10.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;\n    }\n    vs_TEXCOORD5.yzw = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_23 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_23 = u_xlat1.x * u_xlat1.x + (-u_xlat16_23);\n    u_xlat16_4.xyz = unity_SHC.xyz * vec3(u_xlat16_23) + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;\n    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlat16_6.xyz = log2(abs(u_xlat16_2.xyz));\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlatb5.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_2.x = (u_xlatb5.x) ? u_xlat16_4.x : u_xlat16_6.x;\n    u_xlat16_2.y = (u_xlatb5.y) ? u_xlat16_4.y : u_xlat16_6.y;\n    u_xlat16_2.z = (u_xlatb5.z) ? u_xlat16_4.z : u_xlat16_6.z;\n    vs_TEXCOORD8.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5.x = 0.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_16;\nmediump float u_xlat16_18;\nfloat u_xlat25;\nbool u_xlatb25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = (-_Smoothness) + 1.0;\n    u_xlat16_8.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_8.x = u_xlat16_8.x * 6.0;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;\n    u_xlatb25 = unity_OrthoParams.w==0.0;\n    u_xlat16_2.x = (u_xlatb25) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_2.y = (u_xlatb25) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_2.z = (u_xlatb25) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_16 = dot((-u_xlat16_2.xyz), u_xlat1.xyz);\n    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;\n    u_xlat16_3.xyz = u_xlat1.xyz * (-vec3(u_xlat16_16)) + (-u_xlat16_2.xyz);\n    u_xlat10_3 = textureCube(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_8.x);\n    u_xlat16_8.x = u_xlat10_3.w + -1.0;\n    u_xlat16_0.y = unity_SpecCube0_HDR.w * u_xlat16_8.x + 1.0;\n    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0078125, 0.0));\n    u_xlat16_8.x = log2(u_xlat16_0.y);\n    u_xlat16_8.x = u_xlat16_8.x * unity_SpecCube0_HDR.y;\n    u_xlat16_8.x = exp2(u_xlat16_8.x);\n    u_xlat16_8.x = u_xlat16_8.x * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat10_3.xyz * u_xlat16_8.xxx;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat16_2.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_2.xyz + _MainLightPosition.xyz;\n    u_xlat16_2.x = (-u_xlat16_26) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_18 = (-u_xlat16_10) + _Smoothness;\n    u_xlat16_18 = u_xlat16_18 + 1.0;\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_5.xyz = u_xlat10_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat10_3.wxyz * _BaseColor.wxyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.xyz = vec3(u_xlat16_18) + (-u_xlat16_5.xyz);\n    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xy = u_xlat16_0.xx * u_xlat16_0.xx + vec2(-1.0, 1.0);\n    u_xlat16_29 = float(1.0) / u_xlat16_6.y;\n    u_xlat7.xyz = u_xlat16_2.xzw * vec3(u_xlat16_29);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat7.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10) * u_xlat16_3.yzw;\n    u_xlat16_8.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz + u_xlat16_8.xyz;\n    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat25 = max(u_xlat25, 1.17549435e-38);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;\n    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat16_26 = dot(u_xlat1.xyz, _MainLightPosition.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_26 * unity_LightData.z;\n    u_xlat16_14.xyz = vec3(u_xlat16_26) * _MainLightColor.xyz;\n    u_xlat1.x = u_xlat4.x * u_xlat4.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat16_26 = u_xlat25 * u_xlat25;\n    u_xlat9 = max(u_xlat16_26, 0.100000001);\n    u_xlat1.x = u_xlat9 * u_xlat1.x;\n    u_xlat16_26 = u_xlat16_0.x * 4.0 + 2.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_26;\n    u_xlat1.x = u_xlat16_0.x / u_xlat1.x;\n    u_xlat16_0.x = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat16_0.x = min(u_xlat16_0.x, 100.0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_2.xyz + u_xlat16_0.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_3.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_1[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nuint u_xlatu3;\nvec3 u_xlat4;\nbvec3 u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat10;\nint u_xlati10;\nuint u_xlatu10;\nbool u_xlatb10;\nfloat u_xlat17;\nint u_xlati17;\nfloat u_xlat21;\nuint u_xlatu21;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nvoid main()\n{\nImmCB_1[0] = vec4(1.0,0.0,0.0,0.0);\nImmCB_1[1] = vec4(0.0,1.0,0.0,0.0);\nImmCB_1[2] = vec4(0.0,0.0,1.0,0.0);\nImmCB_1[3] = vec4(0.0,0.0,0.0,1.0);\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat21, 1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlatu21 =  uint(int(u_xlat16_2.x));\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu21 ; u_xlatu_loop_1++)\n    {\n        u_xlatu10 = uint(u_xlatu_loop_1 >> 2u);\n        u_xlati17 = int(uint(u_xlatu_loop_1 & 3u));\n        u_xlat10.x = dot(unity_LightIndices[int(u_xlatu10)], ImmCB_1[u_xlati17]);\n        u_xlati10 = int(u_xlat10.x);\n        u_xlat4.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati10].www + _AdditionalLightsPosition[u_xlati10].xyz;\n        u_xlat17 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat17 = max(u_xlat17, 6.10351563e-05);\n        u_xlat24 = inversesqrt(u_xlat17);\n        u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n        u_xlat24 = float(1.0) / float(u_xlat17);\n        u_xlat17 = u_xlat17 * _AdditionalLightsAttenuation[u_xlati10].x + _AdditionalLightsAttenuation[u_xlati10].y;\n        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);\n        u_xlat17 = u_xlat17 * u_xlat24;\n        u_xlat16_23 = dot(_AdditionalLightsSpotDir[u_xlati10].xyz, u_xlat4.xyz);\n        u_xlat16_23 = u_xlat16_23 * _AdditionalLightsAttenuation[u_xlati10].z + _AdditionalLightsAttenuation[u_xlati10].w;\n        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n        u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n        u_xlat17 = u_xlat16_23 * u_xlat17;\n        u_xlat10.xyz = vec3(u_xlat17) * _AdditionalLightsColor[u_xlati10].xyz;\n        u_xlat16_23 = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n        u_xlat16_2.xyz = u_xlat10.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;\n    }\n    vs_TEXCOORD5.yzw = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_23 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_23 = u_xlat1.x * u_xlat1.x + (-u_xlat16_23);\n    u_xlat16_5.xyz = unity_SHC.xyz * vec3(u_xlat16_23) + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlat16_6.xyz = log2(abs(u_xlat16_2.xyz));\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlatb4.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_2.x = (u_xlatb4.x) ? u_xlat16_5.x : u_xlat16_6.x;\n    u_xlat16_2.y = (u_xlatb4.y) ? u_xlat16_5.y : u_xlat16_6.y;\n    u_xlat16_2.z = (u_xlatb4.z) ? u_xlat16_5.z : u_xlat16_6.z;\n    vs_TEXCOORD8.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5.x = 0.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec3 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_16;\nmediump float u_xlat16_18;\nfloat u_xlat25;\nbool u_xlatb25;\nmediump float u_xlat16_26;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = (-_Smoothness) + 1.0;\n    u_xlat16_8.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_8.x = u_xlat16_8.x * 6.0;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;\n    u_xlatb25 = unity_OrthoParams.w==0.0;\n    u_xlat16_2.x = (u_xlatb25) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_2.y = (u_xlatb25) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_2.z = (u_xlatb25) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_16 = dot((-u_xlat16_2.xyz), u_xlat1.xyz);\n    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;\n    u_xlat16_3.xyz = u_xlat1.xyz * (-vec3(u_xlat16_16)) + (-u_xlat16_2.xyz);\n    u_xlat16_3 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_8.x);\n    u_xlat16_8.x = u_xlat16_3.w + -1.0;\n    u_xlat16_0.y = unity_SpecCube0_HDR.w * u_xlat16_8.x + 1.0;\n    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0078125, 0.0));\n    u_xlat16_8.x = log2(u_xlat16_0.y);\n    u_xlat16_8.x = u_xlat16_8.x * unity_SpecCube0_HDR.y;\n    u_xlat16_8.x = exp2(u_xlat16_8.x);\n    u_xlat16_8.x = u_xlat16_8.x * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat16_3.xyz * u_xlat16_8.xxx;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat16_2.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_2.xyz + _MainLightPosition.xyz;\n    u_xlat16_2.x = (-u_xlat16_26) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_18 = (-u_xlat16_10) + _Smoothness;\n    u_xlat16_18 = u_xlat16_18 + 1.0;\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_5.xyz = u_xlat16_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat16_3.wxyz * _BaseColor.wxyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.xyz = vec3(u_xlat16_18) + (-u_xlat16_5.xyz);\n    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xy = u_xlat16_0.xx * u_xlat16_0.xx + vec2(-1.0, 1.0);\n    u_xlat16_29 = float(1.0) / u_xlat16_6.y;\n    u_xlat7.xyz = u_xlat16_2.xzw * vec3(u_xlat16_29);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat7.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10) * u_xlat16_3.yzw;\n    u_xlat16_8.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz + u_xlat16_8.xyz;\n    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat25 = max(u_xlat25, 1.17549435e-38);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;\n    u_xlat25 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat4.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);\n    u_xlat16_26 = dot(u_xlat1.xyz, _MainLightPosition.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat16_26 * unity_LightData.z;\n    u_xlat16_14.xyz = vec3(u_xlat16_26) * _MainLightColor.xyz;\n    u_xlat1.x = u_xlat4.x * u_xlat4.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat16_26 = u_xlat25 * u_xlat25;\n    u_xlat9 = max(u_xlat16_26, 0.100000001);\n    u_xlat1.x = u_xlat9 * u_xlat1.x;\n    u_xlat16_26 = u_xlat16_0.x * 4.0 + 2.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_26;\n    u_xlat1.x = u_xlat16_0.x / u_xlat1.x;\n    u_xlat16_0.x = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat16_0.x = min(u_xlat16_0.x, 100.0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;\n    u_xlat16_0.xyz = u_xlat16_5.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_2.xyz + u_xlat16_0.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_3.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_WorldTransformParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nint u_xlati4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nbvec3 u_xlatb6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat12;\nint u_xlati12;\nbool u_xlatb12;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nint u_xlati24;\nbool u_xlatb24;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = max(u_xlat24, 1.17549435e-38);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 1.17549435e-38);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat16_3.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlati24 = int(u_xlat16_3.x);\n    u_xlat16_3.x = float(0.0);\n    u_xlat16_3.y = float(0.0);\n    u_xlat16_3.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlatb12 = u_xlati_loop_1>=u_xlati24;\n        if(u_xlatb12){\n            break;\n        }\n        u_xlat16_27 = float(u_xlati_loop_1);\n        u_xlatb12 = u_xlat16_27<2.0;\n        u_xlat16_5.xy = (bool(u_xlatb12)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n        u_xlat16_21 = u_xlat16_27 + -2.0;\n        u_xlat16_27 = (u_xlatb12) ? u_xlat16_27 : u_xlat16_21;\n        u_xlatb12 = u_xlat16_27<1.0;\n        u_xlat16_27 = (u_xlatb12) ? u_xlat16_5.x : u_xlat16_5.y;\n        u_xlati12 = int(u_xlat16_27);\n        u_xlat6.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati12].www + _AdditionalLightsPosition[u_xlati12].xyz;\n        u_xlat20 = dot(u_xlat6.xyz, u_xlat6.xyz);\n        u_xlat20 = max(u_xlat20, 6.10351563e-05);\n        u_xlat28 = inversesqrt(u_xlat20);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat28 = float(1.0) / u_xlat20;\n        u_xlat20 = u_xlat20 * _AdditionalLightsAttenuation[u_xlati12].x + _AdditionalLightsAttenuation[u_xlati12].y;\n        u_xlat20 = clamp(u_xlat20, 0.0, 1.0);\n        u_xlat20 = u_xlat20 * u_xlat28;\n        u_xlat16_27 = dot(_AdditionalLightsSpotDir[u_xlati12].xyz, u_xlat6.xyz);\n        u_xlat16_27 = u_xlat16_27 * _AdditionalLightsAttenuation[u_xlati12].z + _AdditionalLightsAttenuation[u_xlati12].w;\n        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n        u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n        u_xlat20 = u_xlat16_27 * u_xlat20;\n        u_xlat12.xyz = vec3(u_xlat20) * _AdditionalLightsColor[u_xlati12].xyz;\n        u_xlat16_27 = dot(u_xlat1.xyz, u_xlat6.xyz);\n        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n        u_xlat16_3.xyz = u_xlat12.xyz * vec3(u_xlat16_27) + u_xlat16_3.xyz;\n    }\n    vs_TEXCOORD5.yzw = u_xlat16_3.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlatb24 = unity_WorldTransformParams.w>=0.0;\n    u_xlat24 = (u_xlatb24) ? 1.0 : -1.0;\n    u_xlat2.w = u_xlat24 * in_TANGENT0.w;\n    u_xlat1.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_4 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);\n    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);\n    u_xlat16_27 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_27 = u_xlat1.x * u_xlat1.x + (-u_xlat16_27);\n    u_xlat16_5.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlat16_7.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlatb6.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.x = (u_xlatb6.x) ? u_xlat16_5.x : u_xlat16_7.x;\n    u_xlat16_3.y = (u_xlatb6.y) ? u_xlat16_5.y : u_xlat16_7.y;\n    u_xlat16_3.z = (u_xlatb6.z) ? u_xlat16_5.z : u_xlat16_7.z;\n    vs_TEXCOORD8.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3 = u_xlat2;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5.x = 0.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat10_2.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat10_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat16_3.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30)) + (-u_xlat16_4.xyz);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_31 = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30 * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat10_1.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat10_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_30) * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_2.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_30 / u_xlat0.x;\n    u_xlat16_30 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = min(u_xlat16_30, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_1[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout highp vec3 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout mediump vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nfloat u_xlat4;\nint u_xlati4;\nuint u_xlatu4;\nbool u_xlatb4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat11;\nint u_xlati11;\nfloat u_xlat12;\nfloat u_xlat21;\nuint u_xlatu21;\nbool u_xlatb21;\nuint u_xlatu22;\nmediump float u_xlat16_24;\nvoid main()\n{\nImmCB_1[0] = vec4(1.0,0.0,0.0,0.0);\nImmCB_1[1] = vec4(0.0,1.0,0.0,0.0);\nImmCB_1[2] = vec4(0.0,0.0,1.0,0.0);\nImmCB_1[3] = vec4(0.0,0.0,0.0,1.0);\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat21, 1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat16_3.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlatu21 =  uint(int(u_xlat16_3.x));\n    u_xlat16_3.x = float(0.0);\n    u_xlat16_3.y = float(0.0);\n    u_xlat16_3.z = float(0.0);\n    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu21 ; u_xlatu_loop_1++)\n    {\n        u_xlatu4 = uint(u_xlatu_loop_1 >> 2u);\n        u_xlati11 = int(uint(u_xlatu_loop_1 & 3u));\n        u_xlat4 = dot(unity_LightIndices[int(u_xlatu4)], ImmCB_1[u_xlati11]);\n        u_xlati4 = int(u_xlat4);\n        u_xlat11.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati4].www + _AdditionalLightsPosition[u_xlati4].xyz;\n        u_xlat5.x = dot(u_xlat11.xyz, u_xlat11.xyz);\n        u_xlat5.x = max(u_xlat5.x, 6.10351563e-05);\n        u_xlat12 = inversesqrt(u_xlat5.x);\n        u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat12);\n        u_xlat12 = float(1.0) / float(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati4].x + _AdditionalLightsAttenuation[u_xlati4].y;\n        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n        u_xlat5.x = u_xlat5.x * u_xlat12;\n        u_xlat16_24 = dot(_AdditionalLightsSpotDir[u_xlati4].xyz, u_xlat11.xyz);\n        u_xlat16_24 = u_xlat16_24 * _AdditionalLightsAttenuation[u_xlati4].z + _AdditionalLightsAttenuation[u_xlati4].w;\n        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n        u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n        u_xlat5.x = u_xlat16_24 * u_xlat5.x;\n        u_xlat5.xyz = u_xlat5.xxx * _AdditionalLightsColor[u_xlati4].xyz;\n        u_xlat16_24 = dot(u_xlat1.xyz, u_xlat11.xyz);\n        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n        u_xlat16_3.xyz = u_xlat5.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;\n    }\n    vs_TEXCOORD5.yzw = u_xlat16_3.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlatb21 = unity_WorldTransformParams.w>=0.0;\n    u_xlat21 = (u_xlatb21) ? 1.0 : -1.0;\n    u_xlat2.w = u_xlat21 * in_TANGENT0.w;\n    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);\n    vs_TEXCOORD8.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3 = u_xlat2;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5.x = 0.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nbvec3 u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat16_2.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat16_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_4.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_4.x;\n    u_xlat16_3.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_4.y;\n    u_xlat16_3.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_4.z;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30)) + (-u_xlat16_4.xyz);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_31 = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30 * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat16_1.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_30) * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_2.yzw;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_30 / u_xlat0.x;\n    u_xlat16_30 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = min(u_xlat16_30, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump float vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec3 u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat15;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = max(u_xlat15, 1.17549435e-38);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5 = 0.0;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n    vs_TEXCOORD6.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;\n    vs_TEXCOORD6.w = 0.0;\n    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    {\n        vec3 hlslcc_movcTemp = u_xlat16_3;\n        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_3.x;\n        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_3.y;\n        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_3.z;\n        u_xlat16_3 = hlslcc_movcTemp;\n    }\n    vs_TEXCOORD8.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nmediump float u_xlat16_28;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD6.xy, _GlobalMipBias.x).x;\n    u_xlatb0 = u_xlat0.x<vs_TEXCOORD6.z;\n    u_xlat16_1.x = (u_xlatb0) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_10 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_10;\n    u_xlatb0 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb9 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0 = u_xlatb9 || u_xlatb0;\n    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;\n    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;\n    u_xlat0.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat9.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat9.x = inversesqrt(u_xlat9.x);\n    u_xlat9.xyz = u_xlat9.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = dot(u_xlat9.xyz, _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlatb0 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb0) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb0) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb0) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_4.xyz), u_xlat9.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat9.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_4.xyz);\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_31 = u_xlat10_2.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat9.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat10_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_2.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat9.xyz, u_xlat3.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9.x * u_xlat9.x;\n    u_xlat9.x = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9.x * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD5;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD4;\nout highp vec4 vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec3 u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat15;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = max(u_xlat15, 1.17549435e-38);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5 = 0.0;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n    vs_TEXCOORD6.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;\n    vs_TEXCOORD6.w = 0.0;\n    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    {\n        vec3 hlslcc_movcTemp = u_xlat16_3;\n        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_3.x;\n        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_3.y;\n        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_3.z;\n        u_xlat16_3 = hlslcc_movcTemp;\n    }\n    vs_TEXCOORD8.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nmediump vec2 u_xlat16_0;\nvec3 u_xlat1;\nbool u_xlatb1;\nmediump vec4 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_16;\nmediump float u_xlat16_18;\nfloat u_xlat25;\nmediump float u_xlat16_25;\nbool u_xlatb25;\nmediump float u_xlat16_26;\nbool u_xlatb28;\nmediump float u_xlat16_29;\nvoid main()\n{\n    u_xlat16_0.x = (-_Smoothness) + 1.0;\n    u_xlat16_8.x = (-u_xlat16_0.x) * 0.699999988 + 1.70000005;\n    u_xlat16_8.x = u_xlat16_8.x * u_xlat16_0.x;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat16_8.x = u_xlat16_8.x * 6.0;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat25 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat1.xyz = vec3(u_xlat25) * u_xlat1.xyz;\n    u_xlatb25 = unity_OrthoParams.w==0.0;\n    u_xlat16_2.x = (u_xlatb25) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_2.y = (u_xlatb25) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_2.z = (u_xlatb25) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat1.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_16 = dot((-u_xlat16_2.xyz), u_xlat1.xyz);\n    u_xlat16_16 = u_xlat16_16 + u_xlat16_16;\n    u_xlat16_3.xyz = u_xlat1.xyz * (-vec3(u_xlat16_16)) + (-u_xlat16_2.xyz);\n    u_xlat16_3 = textureLod(unity_SpecCube0, u_xlat16_3.xyz, u_xlat16_8.x);\n    u_xlat16_8.x = u_xlat16_3.w + -1.0;\n    u_xlat16_0.y = unity_SpecCube0_HDR.w * u_xlat16_8.x + 1.0;\n    u_xlat16_0.xy = max(u_xlat16_0.xy, vec2(0.0078125, 0.0));\n    u_xlat16_8.x = log2(u_xlat16_0.y);\n    u_xlat16_8.x = u_xlat16_8.x * unity_SpecCube0_HDR.y;\n    u_xlat16_8.x = exp2(u_xlat16_8.x);\n    u_xlat16_8.x = u_xlat16_8.x * unity_SpecCube0_HDR.x;\n    u_xlat16_8.xyz = u_xlat16_3.xyz * u_xlat16_8.xxx;\n    u_xlat16_26 = dot(u_xlat1.xyz, u_xlat16_2.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_2.xyz + _MainLightPosition.xyz;\n    u_xlat16_2.x = (-u_xlat16_26) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_2.x = u_xlat16_2.x * u_xlat16_2.x;\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_18 = (-u_xlat16_10) + _Smoothness;\n    u_xlat16_18 = u_xlat16_18 + 1.0;\n    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);\n    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_5.xyz = u_xlat16_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat16_3.wxyz * _BaseColor.wxyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.xyz = vec3(u_xlat16_18) + (-u_xlat16_5.xyz);\n    u_xlat16_2.xzw = u_xlat16_2.xxx * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_6.xy = u_xlat16_0.xx * u_xlat16_0.xx + vec2(-1.0, 1.0);\n    u_xlat16_29 = float(1.0) / u_xlat16_6.y;\n    u_xlat7.xyz = u_xlat16_2.xzw * vec3(u_xlat16_29);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * u_xlat7.xyz;\n    u_xlat16_2.xyz = vec3(u_xlat16_10) * u_xlat16_3.yzw;\n    u_xlat16_8.xyz = vs_TEXCOORD8.xyz * u_xlat16_2.xyz + u_xlat16_8.xyz;\n    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n    u_xlat16_25 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlat16_26 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_26 = u_xlat16_25 * _MainLightShadowParams.x + u_xlat16_26;\n    u_xlatb25 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb28 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb25 = u_xlatb25 || u_xlatb28;\n    u_xlat16_26 = (u_xlatb25) ? 1.0 : u_xlat16_26;\n    u_xlat16_29 = (-u_xlat16_26) + 1.0;\n    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat25 = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat25 = u_xlat25 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat25 = clamp(u_xlat25, 0.0, 1.0);\n    u_xlat16_26 = u_xlat25 * u_xlat16_29 + u_xlat16_26;\n    u_xlat25 = u_xlat16_26 * unity_LightData.z;\n    u_xlat16_26 = dot(u_xlat1.xyz, _MainLightPosition.xyz);\n    u_xlat16_26 = clamp(u_xlat16_26, 0.0, 1.0);\n    u_xlat16_26 = u_xlat25 * u_xlat16_26;\n    u_xlat16_14.xyz = vec3(u_xlat16_26) * _MainLightColor.xyz;\n    u_xlat25 = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat25 = max(u_xlat25, 1.17549435e-38);\n    u_xlat25 = inversesqrt(u_xlat25);\n    u_xlat4.xyz = vec3(u_xlat25) * u_xlat4.xyz;\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat4.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_26 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_26, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_6.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat9 * u_xlat1.x;\n    u_xlat16_26 = u_xlat16_0.x * 4.0 + 2.0;\n    u_xlat16_0.x = u_xlat16_0.x * u_xlat16_0.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_26;\n    u_xlat1.x = u_xlat16_0.x / u_xlat1.x;\n    u_xlat16_0.x = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_0.x = max(u_xlat16_0.x, 0.0);\n    u_xlat16_0.x = min(u_xlat16_0.x, 100.0);\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_0.xxx + u_xlat16_2.xyz;\n    SV_Target0.xyz = u_xlat16_2.xyz * u_xlat16_14.xyz + u_xlat16_8.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_3.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_WorldTransformParams;\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying mediump float vs_TEXCOORD5;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nbvec3 u_xlatb1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = max(u_xlat15, 1.17549435e-38);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 1.17549435e-38);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlatb15 = unity_WorldTransformParams.w>=0.0;\n    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;\n    u_xlat2.w = u_xlat15 * in_TANGENT0.w;\n    vs_TEXCOORD3 = u_xlat2;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5 = 0.0;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n    vs_TEXCOORD6.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;\n    vs_TEXCOORD6.w = 0.0;\n    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);\n    u_xlat16_2 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_2);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_2);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_2);\n    u_xlat16_3.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_4.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_4.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_4.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_4.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_4.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_3.xyz = exp2(u_xlat16_3.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    {\n        vec3 hlslcc_movcTemp = u_xlat16_3;\n        hlslcc_movcTemp.x = (u_xlatb1.x) ? u_xlat16_4.x : u_xlat16_3.x;\n        hlslcc_movcTemp.y = (u_xlatb1.y) ? u_xlat16_4.y : u_xlat16_3.y;\n        hlslcc_movcTemp.z = (u_xlatb1.z) ? u_xlat16_4.z : u_xlat16_3.z;\n        u_xlat16_3 = hlslcc_movcTemp;\n    }\n    vs_TEXCOORD8.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nmediump float u_xlat16_28;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD6.xy, _GlobalMipBias.x).x;\n    u_xlatb0 = u_xlat0.x<vs_TEXCOORD6.z;\n    u_xlat16_1.x = (u_xlatb0) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_10 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_10;\n    u_xlatb0 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb9 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0 = u_xlatb9 || u_xlatb0;\n    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;\n    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;\n    u_xlat0.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat2.x = vs_TEXCOORD3.x;\n    u_xlat2.z = vs_TEXCOORD2.x;\n    u_xlat9.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat9.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xzy * vs_TEXCOORD3.www;\n    u_xlat2.y = u_xlat9.x;\n    u_xlat10_3.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_1.xy = u_xlat10_3.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_1.xy, u_xlat16_1.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_28 = sqrt(u_xlat16_28);\n    u_xlat16_1.z = max(u_xlat16_28, 1.00000002e-16);\n    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);\n    u_xlat3.y = u_xlat9.z;\n    u_xlat3.x = vs_TEXCOORD3.y;\n    u_xlat3.z = vs_TEXCOORD2.y;\n    u_xlat2.y = dot(u_xlat16_1.xyz, u_xlat3.xyz);\n    u_xlat9.x = vs_TEXCOORD3.z;\n    u_xlat9.z = vs_TEXCOORD2.z;\n    u_xlat2.z = dot(u_xlat16_1.xyz, u_xlat9.xyz);\n    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9.x = inversesqrt(u_xlat9.x);\n    u_xlat9.xyz = u_xlat9.xxx * u_xlat2.xyz;\n    u_xlat16_1.x = dot(u_xlat9.xyz, _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;\n    u_xlatb0 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb0) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb0) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb0) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_28 = dot((-u_xlat16_4.xyz), u_xlat9.xyz);\n    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n    u_xlat16_5.xyz = u_xlat9.xyz * (-vec3(u_xlat16_28)) + (-u_xlat16_4.xyz);\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_31 = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_28 * u_xlat16_31;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat10_2.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat9.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat2.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat10_3.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_3.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;\n    u_xlat0.x = dot(u_xlat9.xyz, u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);\n    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9.x * u_xlat9.x;\n    u_xlat9.x = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9.x * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_3.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout mediump float vs_TEXCOORD5;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout highp vec3 vs_TEXCOORD4;\nout highp vec4 vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD8;\nvec4 u_xlat0;\nvec4 u_xlat1;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump float u_xlat16_3;\nmediump vec3 u_xlat16_4;\nfloat u_xlat15;\nbool u_xlatb15;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat15 = max(u_xlat15, 1.17549435e-38);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat15 = max(u_xlat15, 1.17549435e-38);\n    u_xlat15 = inversesqrt(u_xlat15);\n    u_xlat2.xyz = vec3(u_xlat15) * u_xlat2.xyz;\n    u_xlatb15 = unity_WorldTransformParams.w>=0.0;\n    u_xlat15 = (u_xlatb15) ? 1.0 : -1.0;\n    u_xlat2.w = u_xlat15 * in_TANGENT0.w;\n    vs_TEXCOORD3 = u_xlat2;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5 = 0.0;\n    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat2.xyz;\n    vs_TEXCOORD6.xyz = u_xlat2.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;\n    vs_TEXCOORD6.w = 0.0;\n    u_xlat16_3 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_3 = u_xlat1.x * u_xlat1.x + (-u_xlat16_3);\n    u_xlat16_1 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_1);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_1);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_1);\n    vs_TEXCOORD8.xyz = unity_SHC.xyz * vec3(u_xlat16_3) + u_xlat16_4.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nbvec3 u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nbool u_xlatb28;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat16_2.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat16_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_4.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_4.x;\n    u_xlat16_3.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_4.y;\n    u_xlat16_3.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_4.z;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30)) + (-u_xlat16_4.xyz);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_31 = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30 * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat16_1.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_30) * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_2.yzw;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlat16_13 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_13 = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_13;\n    u_xlatb27 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb28 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb27 = u_xlatb27 || u_xlatb28;\n    u_xlat16_13 = (u_xlatb27) ? 1.0 : u_xlat16_13;\n    u_xlat16_22 = (-u_xlat16_13) + 1.0;\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_13 = u_xlat27 * u_xlat16_22 + u_xlat16_13;\n    u_xlat27 = u_xlat16_13 * unity_LightData.z;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat27;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_30 / u_xlat0.x;\n    u_xlat16_30 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = min(u_xlat16_30, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec3 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nint u_xlati3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nbvec3 u_xlatb5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat10;\nint u_xlati10;\nbool u_xlatb10;\nfloat u_xlat17;\nmediump float u_xlat16_18;\nfloat u_xlat21;\nint u_xlati21;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat21, 1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlati21 = int(u_xlat16_2.x);\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlatb10 = u_xlati_loop_1>=u_xlati21;\n        if(u_xlatb10){\n            break;\n        }\n        u_xlat16_23 = float(u_xlati_loop_1);\n        u_xlatb10 = u_xlat16_23<2.0;\n        u_xlat16_4.xy = (bool(u_xlatb10)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n        u_xlat16_18 = u_xlat16_23 + -2.0;\n        u_xlat16_23 = (u_xlatb10) ? u_xlat16_23 : u_xlat16_18;\n        u_xlatb10 = u_xlat16_23<1.0;\n        u_xlat16_23 = (u_xlatb10) ? u_xlat16_4.x : u_xlat16_4.y;\n        u_xlati10 = int(u_xlat16_23);\n        u_xlat5.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati10].www + _AdditionalLightsPosition[u_xlati10].xyz;\n        u_xlat17 = dot(u_xlat5.xyz, u_xlat5.xyz);\n        u_xlat17 = max(u_xlat17, 6.10351563e-05);\n        u_xlat24 = inversesqrt(u_xlat17);\n        u_xlat5.xyz = vec3(u_xlat24) * u_xlat5.xyz;\n        u_xlat24 = float(1.0) / u_xlat17;\n        u_xlat17 = u_xlat17 * _AdditionalLightsAttenuation[u_xlati10].x + _AdditionalLightsAttenuation[u_xlati10].y;\n        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);\n        u_xlat17 = u_xlat17 * u_xlat24;\n        u_xlat16_23 = dot(_AdditionalLightsSpotDir[u_xlati10].xyz, u_xlat5.xyz);\n        u_xlat16_23 = u_xlat16_23 * _AdditionalLightsAttenuation[u_xlati10].z + _AdditionalLightsAttenuation[u_xlati10].w;\n        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n        u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n        u_xlat17 = u_xlat16_23 * u_xlat17;\n        u_xlat10.xyz = vec3(u_xlat17) * _AdditionalLightsColor[u_xlati10].xyz;\n        u_xlat16_23 = dot(u_xlat1.xyz, u_xlat5.xyz);\n        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n        u_xlat16_2.xyz = u_xlat10.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;\n    }\n    vs_TEXCOORD5.yzw = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_4.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_4.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_4.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_23 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_23 = u_xlat1.x * u_xlat1.x + (-u_xlat16_23);\n    u_xlat16_4.xyz = unity_SHC.xyz * vec3(u_xlat16_23) + u_xlat16_4.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_4.xyz;\n    u_xlat16_4.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlat16_6.xyz = log2(abs(u_xlat16_2.xyz));\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlatb5.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_2.x = (u_xlatb5.x) ? u_xlat16_4.x : u_xlat16_6.x;\n    u_xlat16_2.y = (u_xlatb5.y) ? u_xlat16_4.y : u_xlat16_6.y;\n    u_xlat16_2.z = (u_xlatb5.z) ? u_xlat16_4.z : u_xlat16_6.z;\n    vs_TEXCOORD8.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat5.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat5.xyz;\n    u_xlat5.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat5.xyz;\n    vs_TEXCOORD6.xyz = u_xlat5.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5.x = 0.0;\n    vs_TEXCOORD6.w = 0.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nmediump float u_xlat16_28;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD6.xy, _GlobalMipBias.x).x;\n    u_xlatb0 = u_xlat0.x<vs_TEXCOORD6.z;\n    u_xlat16_1.x = (u_xlatb0) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_10 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_10;\n    u_xlatb0 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb9 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0 = u_xlatb9 || u_xlatb0;\n    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;\n    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;\n    u_xlat0.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat9.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat9.x = inversesqrt(u_xlat9.x);\n    u_xlat9.xyz = u_xlat9.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = dot(u_xlat9.xyz, _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlatb0 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb0) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb0) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb0) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_4.xyz), u_xlat9.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat9.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_4.xyz);\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_31 = u_xlat10_2.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat9.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat10_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_2.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat9.xyz, u_xlat3.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9.x * u_xlat9.x;\n    u_xlat9.x = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9.x * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_1[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout highp vec3 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_2;\nmediump vec4 u_xlat16_3;\nuint u_xlatu3;\nvec3 u_xlat4;\nbvec3 u_xlatb4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat10;\nint u_xlati10;\nuint u_xlatu10;\nbool u_xlatb10;\nfloat u_xlat17;\nint u_xlati17;\nfloat u_xlat21;\nuint u_xlatu21;\nmediump float u_xlat16_23;\nfloat u_xlat24;\nvoid main()\n{\nImmCB_1[0] = vec4(1.0,0.0,0.0,0.0);\nImmCB_1[1] = vec4(0.0,1.0,0.0,0.0);\nImmCB_1[2] = vec4(0.0,0.0,1.0,0.0);\nImmCB_1[3] = vec4(0.0,0.0,0.0,1.0);\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat21, 1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat16_2.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlatu21 =  uint(int(u_xlat16_2.x));\n    u_xlat16_2.x = float(0.0);\n    u_xlat16_2.y = float(0.0);\n    u_xlat16_2.z = float(0.0);\n    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu21 ; u_xlatu_loop_1++)\n    {\n        u_xlatu10 = uint(u_xlatu_loop_1 >> 2u);\n        u_xlati17 = int(uint(u_xlatu_loop_1 & 3u));\n        u_xlat10.x = dot(unity_LightIndices[int(u_xlatu10)], ImmCB_1[u_xlati17]);\n        u_xlati10 = int(u_xlat10.x);\n        u_xlat4.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati10].www + _AdditionalLightsPosition[u_xlati10].xyz;\n        u_xlat17 = dot(u_xlat4.xyz, u_xlat4.xyz);\n        u_xlat17 = max(u_xlat17, 6.10351563e-05);\n        u_xlat24 = inversesqrt(u_xlat17);\n        u_xlat4.xyz = vec3(u_xlat24) * u_xlat4.xyz;\n        u_xlat24 = float(1.0) / float(u_xlat17);\n        u_xlat17 = u_xlat17 * _AdditionalLightsAttenuation[u_xlati10].x + _AdditionalLightsAttenuation[u_xlati10].y;\n        u_xlat17 = clamp(u_xlat17, 0.0, 1.0);\n        u_xlat17 = u_xlat17 * u_xlat24;\n        u_xlat16_23 = dot(_AdditionalLightsSpotDir[u_xlati10].xyz, u_xlat4.xyz);\n        u_xlat16_23 = u_xlat16_23 * _AdditionalLightsAttenuation[u_xlati10].z + _AdditionalLightsAttenuation[u_xlati10].w;\n        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n        u_xlat16_23 = u_xlat16_23 * u_xlat16_23;\n        u_xlat17 = u_xlat16_23 * u_xlat17;\n        u_xlat10.xyz = vec3(u_xlat17) * _AdditionalLightsColor[u_xlati10].xyz;\n        u_xlat16_23 = dot(u_xlat1.xyz, u_xlat4.xyz);\n        u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n        u_xlat16_2.xyz = u_xlat10.xyz * vec3(u_xlat16_23) + u_xlat16_2.xyz;\n    }\n    vs_TEXCOORD5.yzw = u_xlat16_2.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat1.w = 1.0;\n    u_xlat16_2.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_2.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_2.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_23 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_23 = u_xlat1.x * u_xlat1.x + (-u_xlat16_23);\n    u_xlat16_5.xyz = unity_SHC.xyz * vec3(u_xlat16_23) + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlat16_6.xyz = log2(abs(u_xlat16_2.xyz));\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlatb4.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_2.xyzx).xyz;\n    u_xlat16_2.x = (u_xlatb4.x) ? u_xlat16_5.x : u_xlat16_6.x;\n    u_xlat16_2.y = (u_xlatb4.y) ? u_xlat16_5.y : u_xlat16_6.y;\n    u_xlat16_2.z = (u_xlatb4.z) ? u_xlat16_5.z : u_xlat16_6.z;\n    vs_TEXCOORD8.xyz = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat4.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat4.xyz;\n    vs_TEXCOORD6.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5.x = 0.0;\n    vs_TEXCOORD6.w = 0.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump float u_xlat16_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nmediump float u_xlat16_28;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n    u_xlat16_0 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlat16_1.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_1.x = u_xlat16_0 * _MainLightShadowParams.x + u_xlat16_1.x;\n    u_xlatb0 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb9 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0 = u_xlatb9 || u_xlatb0;\n    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;\n    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;\n    u_xlat0.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat9.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat9.x = inversesqrt(u_xlat9.x);\n    u_xlat9.xyz = u_xlat9.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = dot(u_xlat9.xyz, _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_2.x = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_2.x = u_xlat16_28 * u_xlat16_2.x;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_2.x = u_xlat16_2.x * 6.0;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlatb0 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb0) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb0) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb0) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_11.x = dot((-u_xlat16_4.xyz), u_xlat9.xyz);\n    u_xlat16_11.x = u_xlat16_11.x + u_xlat16_11.x;\n    u_xlat16_11.xyz = u_xlat9.xyz * (-u_xlat16_11.xxx) + (-u_xlat16_4.xyz);\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_11.xyz, u_xlat16_2.x);\n    u_xlat16_31 = u_xlat16_2.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat9.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_2.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat9.xyz, u_xlat3.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9.x * u_xlat9.x;\n    u_xlat9.x = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9.x * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[16];\nuniform \tmediump vec4 _AdditionalLightsColor[16];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[16];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[16];\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tmediump vec4 unity_WorldTransformParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_LightIndices[2];\nuniform \tmediump vec4 unity_SHAr;\nuniform \tmediump vec4 unity_SHAg;\nuniform \tmediump vec4 unity_SHAb;\nuniform \tmediump vec4 unity_SHBr;\nuniform \tmediump vec4 unity_SHBg;\nuniform \tmediump vec4 unity_SHBb;\nuniform \tmediump vec4 unity_SHC;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec4 in_TANGENT0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying highp vec3 vs_TEXCOORD4;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nint u_xlati4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nbvec3 u_xlatb6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat12;\nint u_xlati12;\nbool u_xlatb12;\nfloat u_xlat20;\nmediump float u_xlat16_21;\nfloat u_xlat24;\nint u_xlati24;\nbool u_xlatb24;\nmediump float u_xlat16_27;\nfloat u_xlat28;\nvoid main()\n{\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = max(u_xlat24, 1.17549435e-38);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 1.17549435e-38);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat2.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat16_3.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlati24 = int(u_xlat16_3.x);\n    u_xlat16_3.x = float(0.0);\n    u_xlat16_3.y = float(0.0);\n    u_xlat16_3.z = float(0.0);\n    for(int u_xlati_loop_1 = 0 ; u_xlati_loop_1<8 ; u_xlati_loop_1++)\n    {\n        u_xlatb12 = u_xlati_loop_1>=u_xlati24;\n        if(u_xlatb12){\n            break;\n        }\n        u_xlat16_27 = float(u_xlati_loop_1);\n        u_xlatb12 = u_xlat16_27<2.0;\n        u_xlat16_5.xy = (bool(u_xlatb12)) ? unity_LightIndices[0].xy : unity_LightIndices[0].zw;\n        u_xlat16_21 = u_xlat16_27 + -2.0;\n        u_xlat16_27 = (u_xlatb12) ? u_xlat16_27 : u_xlat16_21;\n        u_xlatb12 = u_xlat16_27<1.0;\n        u_xlat16_27 = (u_xlatb12) ? u_xlat16_5.x : u_xlat16_5.y;\n        u_xlati12 = int(u_xlat16_27);\n        u_xlat6.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati12].www + _AdditionalLightsPosition[u_xlati12].xyz;\n        u_xlat20 = dot(u_xlat6.xyz, u_xlat6.xyz);\n        u_xlat20 = max(u_xlat20, 6.10351563e-05);\n        u_xlat28 = inversesqrt(u_xlat20);\n        u_xlat6.xyz = vec3(u_xlat28) * u_xlat6.xyz;\n        u_xlat28 = float(1.0) / u_xlat20;\n        u_xlat20 = u_xlat20 * _AdditionalLightsAttenuation[u_xlati12].x + _AdditionalLightsAttenuation[u_xlati12].y;\n        u_xlat20 = clamp(u_xlat20, 0.0, 1.0);\n        u_xlat20 = u_xlat20 * u_xlat28;\n        u_xlat16_27 = dot(_AdditionalLightsSpotDir[u_xlati12].xyz, u_xlat6.xyz);\n        u_xlat16_27 = u_xlat16_27 * _AdditionalLightsAttenuation[u_xlati12].z + _AdditionalLightsAttenuation[u_xlati12].w;\n        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n        u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n        u_xlat20 = u_xlat16_27 * u_xlat20;\n        u_xlat12.xyz = vec3(u_xlat20) * _AdditionalLightsColor[u_xlati12].xyz;\n        u_xlat16_27 = dot(u_xlat1.xyz, u_xlat6.xyz);\n        u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);\n        u_xlat16_3.xyz = u_xlat12.xyz * vec3(u_xlat16_27) + u_xlat16_3.xyz;\n    }\n    vs_TEXCOORD5.yzw = u_xlat16_3.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlatb24 = unity_WorldTransformParams.w>=0.0;\n    u_xlat24 = (u_xlatb24) ? 1.0 : -1.0;\n    u_xlat2.w = u_xlat24 * in_TANGENT0.w;\n    u_xlat1.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_4 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_5.x = dot(unity_SHBr, u_xlat16_4);\n    u_xlat16_5.y = dot(unity_SHBg, u_xlat16_4);\n    u_xlat16_5.z = dot(unity_SHBb, u_xlat16_4);\n    u_xlat16_27 = u_xlat1.y * u_xlat1.y;\n    u_xlat16_27 = u_xlat1.x * u_xlat1.x + (-u_xlat16_27);\n    u_xlat16_5.xyz = unity_SHC.xyz * vec3(u_xlat16_27) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz + u_xlat16_5.xyz;\n    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlat16_7.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_7.xyz = exp2(u_xlat16_7.xyz);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlatb6.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.x = (u_xlatb6.x) ? u_xlat16_5.x : u_xlat16_7.x;\n    u_xlat16_3.y = (u_xlatb6.y) ? u_xlat16_5.y : u_xlat16_7.y;\n    u_xlat16_3.z = (u_xlatb6.z) ? u_xlat16_5.z : u_xlat16_7.z;\n    vs_TEXCOORD8.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat6.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat6.xyz;\n    vs_TEXCOORD6.xyz = u_xlat6.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3 = u_xlat2;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5.x = 0.0;\n    vs_TEXCOORD6.w = 0.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nmediump float u_xlat16_28;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD6.xy, _GlobalMipBias.x).x;\n    u_xlatb0 = u_xlat0.x<vs_TEXCOORD6.z;\n    u_xlat16_1.x = (u_xlatb0) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_10 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_10;\n    u_xlatb0 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb9 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0 = u_xlatb9 || u_xlatb0;\n    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;\n    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;\n    u_xlat0.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat2.x = vs_TEXCOORD3.x;\n    u_xlat2.z = vs_TEXCOORD2.x;\n    u_xlat9.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat9.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xzy * vs_TEXCOORD3.www;\n    u_xlat2.y = u_xlat9.x;\n    u_xlat10_3.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_1.xy = u_xlat10_3.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_1.xy, u_xlat16_1.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_28 = sqrt(u_xlat16_28);\n    u_xlat16_1.z = max(u_xlat16_28, 1.00000002e-16);\n    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);\n    u_xlat3.y = u_xlat9.z;\n    u_xlat3.x = vs_TEXCOORD3.y;\n    u_xlat3.z = vs_TEXCOORD2.y;\n    u_xlat2.y = dot(u_xlat16_1.xyz, u_xlat3.xyz);\n    u_xlat9.x = vs_TEXCOORD3.z;\n    u_xlat9.z = vs_TEXCOORD2.z;\n    u_xlat2.z = dot(u_xlat16_1.xyz, u_xlat9.xyz);\n    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9.x = inversesqrt(u_xlat9.x);\n    u_xlat9.xyz = u_xlat9.xxx * u_xlat2.xyz;\n    u_xlat16_1.x = dot(u_xlat9.xyz, _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;\n    u_xlatb0 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb0) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb0) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb0) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_28 = dot((-u_xlat16_4.xyz), u_xlat9.xyz);\n    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n    u_xlat16_5.xyz = u_xlat9.xyz * (-vec3(u_xlat16_28)) + (-u_xlat16_4.xyz);\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_31 = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_28 * u_xlat16_31;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat10_2.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat9.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat2.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat10_3.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_3.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;\n    u_xlat0.x = dot(u_xlat9.xyz, u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);\n    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9.x * u_xlat9.x;\n    u_xlat9.x = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9.x * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_3.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nvec4 ImmCB_1[4];\nuniform \tmediump vec4 _AdditionalLightsCount;\nuniform \tvec4 _AdditionalLightsPosition[32];\nuniform \tmediump vec4 _AdditionalLightsColor[32];\nuniform \tmediump vec4 _AdditionalLightsAttenuation[32];\nuniform \tmediump vec4 _AdditionalLightsSpotDir[32];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec4 in_TANGENT0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nout highp vec3 vs_TEXCOORD1;\nout highp vec3 vs_TEXCOORD2;\nout mediump vec4 vs_TEXCOORD3;\nout highp vec3 vs_TEXCOORD4;\nout mediump vec4 vs_TEXCOORD5;\nout highp vec4 vs_TEXCOORD6;\nout mediump vec3 vs_TEXCOORD8;\nvec3 u_xlat0;\nvec4 u_xlat1;\nvec4 u_xlat2;\nmediump vec4 u_xlat16_3;\nvec3 u_xlat4;\nint u_xlati4;\nuint u_xlatu4;\nbool u_xlatb4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat11;\nint u_xlati11;\nfloat u_xlat12;\nfloat u_xlat21;\nuint u_xlatu21;\nbool u_xlatb21;\nuint u_xlatu22;\nmediump float u_xlat16_24;\nvoid main()\n{\nImmCB_1[0] = vec4(1.0,0.0,0.0,0.0);\nImmCB_1[1] = vec4(0.0,1.0,0.0,0.0);\nImmCB_1[2] = vec4(0.0,0.0,1.0,0.0);\nImmCB_1[3] = vec4(0.0,0.0,0.0,1.0);\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    gl_Position = u_xlat1 + hlslcc_mtx4x4unity_MatrixVP[3];\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat21 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat21 = max(u_xlat21, 1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat1.xyz = vec3(u_xlat21) * u_xlat1.xyz;\n    u_xlat2.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_TANGENT0.xxx + u_xlat2.xyz;\n    u_xlat2.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_TANGENT0.zzz + u_xlat2.xyz;\n    u_xlat21 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat21 = max(u_xlat21, 1.17549435e-38);\n    u_xlat21 = inversesqrt(u_xlat21);\n    u_xlat2.xyz = vec3(u_xlat21) * u_xlat2.xyz;\n    u_xlat16_3.x = min(_AdditionalLightsCount.x, unity_LightData.y);\n    u_xlatu21 =  uint(int(u_xlat16_3.x));\n    u_xlat16_3.x = float(0.0);\n    u_xlat16_3.y = float(0.0);\n    u_xlat16_3.z = float(0.0);\n    for(uint u_xlatu_loop_1 = uint(0u) ; u_xlatu_loop_1<u_xlatu21 ; u_xlatu_loop_1++)\n    {\n        u_xlatu4 = uint(u_xlatu_loop_1 >> 2u);\n        u_xlati11 = int(uint(u_xlatu_loop_1 & 3u));\n        u_xlat4.x = dot(unity_LightIndices[int(u_xlatu4)], ImmCB_1[u_xlati11]);\n        u_xlati4 = int(u_xlat4.x);\n        u_xlat11.xyz = (-u_xlat0.xyz) * _AdditionalLightsPosition[u_xlati4].www + _AdditionalLightsPosition[u_xlati4].xyz;\n        u_xlat5.x = dot(u_xlat11.xyz, u_xlat11.xyz);\n        u_xlat5.x = max(u_xlat5.x, 6.10351563e-05);\n        u_xlat12 = inversesqrt(u_xlat5.x);\n        u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat12);\n        u_xlat12 = float(1.0) / float(u_xlat5.x);\n        u_xlat5.x = u_xlat5.x * _AdditionalLightsAttenuation[u_xlati4].x + _AdditionalLightsAttenuation[u_xlati4].y;\n        u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);\n        u_xlat5.x = u_xlat5.x * u_xlat12;\n        u_xlat16_24 = dot(_AdditionalLightsSpotDir[u_xlati4].xyz, u_xlat11.xyz);\n        u_xlat16_24 = u_xlat16_24 * _AdditionalLightsAttenuation[u_xlati4].z + _AdditionalLightsAttenuation[u_xlati4].w;\n        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n        u_xlat16_24 = u_xlat16_24 * u_xlat16_24;\n        u_xlat5.x = u_xlat16_24 * u_xlat5.x;\n        u_xlat5.xyz = u_xlat5.xxx * _AdditionalLightsColor[u_xlati4].xyz;\n        u_xlat16_24 = dot(u_xlat1.xyz, u_xlat11.xyz);\n        u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n        u_xlat16_3.xyz = u_xlat5.xyz * vec3(u_xlat16_24) + u_xlat16_3.xyz;\n    }\n    vs_TEXCOORD5.yzw = u_xlat16_3.xyz;\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlatb21 = unity_WorldTransformParams.w>=0.0;\n    u_xlat21 = (u_xlatb21) ? 1.0 : -1.0;\n    u_xlat2.w = u_xlat21 * in_TANGENT0.w;\n    u_xlat16_3 = u_xlat1.yzzx * u_xlat1.xyzz;\n    u_xlat16_6.x = dot(unity_SHBr, u_xlat16_3);\n    u_xlat16_6.y = dot(unity_SHBg, u_xlat16_3);\n    u_xlat16_6.z = dot(unity_SHBb, u_xlat16_3);\n    u_xlat16_3.x = u_xlat1.y * u_xlat1.y;\n    u_xlat16_3.x = u_xlat1.x * u_xlat1.x + (-u_xlat16_3.x);\n    vs_TEXCOORD8.xyz = unity_SHC.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat4.xyz = u_xlat0.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[1].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[0].xyz * u_xlat0.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[2].xyz * u_xlat0.zzz + u_xlat4.xyz;\n    vs_TEXCOORD6.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[3].xyz;\n    vs_TEXCOORD1.xyz = u_xlat0.xyz;\n    vs_TEXCOORD2.xyz = u_xlat1.xyz;\n    vs_TEXCOORD3 = u_xlat2;\n    vs_TEXCOORD4.xyz = vec3(0.0, 0.0, 0.0);\n    vs_TEXCOORD5.x = 0.0;\n    vs_TEXCOORD6.w = 0.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec3 u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec2 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec2 u_xlat16_9;\nvec3 u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_11;\nmediump vec3 u_xlat16_16;\nfloat u_xlat30;\nbool u_xlatb30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_34;\nmediump float u_xlat16_35;\nvoid main()\n{\n    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlat16_1.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_1.x = u_xlat16_0.x * _MainLightShadowParams.x + u_xlat16_1.x;\n    u_xlatb0.x = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb10 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0.x = u_xlatb10 || u_xlatb0.x;\n    u_xlat16_1.x = (u_xlatb0.x) ? 1.0 : u_xlat16_1.x;\n    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_11 + u_xlat16_1.x;\n    u_xlat0.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat2.x = vs_TEXCOORD3.x;\n    u_xlat2.z = vs_TEXCOORD2.x;\n    u_xlat10.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat10.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat10.xyz);\n    u_xlat10.xyz = u_xlat10.xzy * vs_TEXCOORD3.www;\n    u_xlat2.y = u_xlat10.x;\n    u_xlat16_3.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_1.xy = u_xlat16_3.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_31 = dot(u_xlat16_1.xy, u_xlat16_1.xy);\n    u_xlat16_31 = min(u_xlat16_31, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_31 = sqrt(u_xlat16_31);\n    u_xlat16_1.z = max(u_xlat16_31, 1.00000002e-16);\n    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);\n    u_xlat3.y = u_xlat10.z;\n    u_xlat3.x = vs_TEXCOORD3.y;\n    u_xlat3.z = vs_TEXCOORD2.y;\n    u_xlat2.y = dot(u_xlat16_1.xyz, u_xlat3.xyz);\n    u_xlat10.x = vs_TEXCOORD3.z;\n    u_xlat10.z = vs_TEXCOORD2.z;\n    u_xlat2.z = dot(u_xlat16_1.xyz, u_xlat10.xyz);\n    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10.x = inversesqrt(u_xlat10.x);\n    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_6.xyz = log2(abs(u_xlat16_5.xyz));\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_5.xyzx).xyz;\n    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat16_7.x : u_xlat16_6.x;\n    u_xlat16_5.y = (u_xlatb0.y) ? u_xlat16_7.y : u_xlat16_6.y;\n    u_xlat16_5.z = (u_xlatb0.z) ? u_xlat16_7.z : u_xlat16_6.z;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;\n    u_xlatb30 = unity_OrthoParams.w==0.0;\n    u_xlat16_6.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_6.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_6.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_34 = dot((-u_xlat16_6.xyz), u_xlat1.xyz);\n    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;\n    u_xlat16_7.xyz = u_xlat1.xyz * (-vec3(u_xlat16_34)) + (-u_xlat16_6.xyz);\n    u_xlat16_34 = (-_Smoothness) + 1.0;\n    u_xlat16_35 = (-u_xlat16_34) * 0.699999988 + 1.70000005;\n    u_xlat16_35 = u_xlat16_34 * u_xlat16_35;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_34 = max(u_xlat16_34, 0.0078125);\n    u_xlat16_35 = u_xlat16_35 * 6.0;\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_35);\n    u_xlat16_35 = u_xlat16_0.w + -1.0;\n    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;\n    u_xlat16_35 = max(u_xlat16_35, 0.0);\n    u_xlat16_35 = log2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.y;\n    u_xlat16_35 = exp2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);\n    u_xlat16_35 = dot(u_xlat1.xyz, u_xlat16_6.xyz);\n    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_6.xyz + _MainLightPosition.xyz;\n    u_xlat16_35 = (-u_xlat16_35) + 1.0;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_6.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_16.x = (-u_xlat16_6.x) + _Smoothness;\n    u_xlat16_16.x = u_xlat16_16.x + 1.0;\n    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_8.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_16.xyz = u_xlat16_16.xxx + (-u_xlat16_8.xyz);\n    u_xlat16_16.xyz = vec3(u_xlat16_35) * u_xlat16_16.xyz + u_xlat16_8.xyz;\n    u_xlat16_9.xy = vec2(u_xlat16_34) * vec2(u_xlat16_34) + vec2(-1.0, 1.0);\n    u_xlat16_35 = float(1.0) / u_xlat16_9.y;\n    u_xlat3.xyz = u_xlat16_16.xyz * vec3(u_xlat16_35);\n    u_xlat16_16.xyz = u_xlat3.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_6.xxx * u_xlat16_2.yzw;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_16.xyz;\n    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat30 = max(u_xlat30, 1.17549435e-38);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;\n    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);\n    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_35 = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = max(u_xlat16_35, 0.100000001);\n    u_xlat10.x = u_xlat30 * u_xlat30;\n    u_xlat10.x = u_xlat10.x * u_xlat16_9.x + 1.00001001;\n    u_xlat10.x = u_xlat10.x * u_xlat10.x;\n    u_xlat0.x = u_xlat0.x * u_xlat10.x;\n    u_xlat16_35 = u_xlat16_34 * 4.0 + 2.0;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n    u_xlat0.x = u_xlat0.x * u_xlat16_35;\n    u_xlat0.x = u_xlat16_34 / u_xlat0.x;\n    u_xlat16_34 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_34 = max(u_xlat16_34, 0.0);\n    u_xlat16_34 = min(u_xlat16_34, 100.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_7.xyz + u_xlat16_4.xyz;\n    u_xlatb0.x = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0.x) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nint u_xlati1;\nint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec2 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nint op_shl(int a, int b) { return int(floor(float(a) * pow(2.0, float(b)))); }\nivec2 op_shl(ivec2 a, ivec2 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); return a; }\nivec3 op_shl(ivec3 a, ivec3 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); return a; }\nivec4 op_shl(ivec4 a, ivec4 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); a.w = op_shl(a.w, b.w); return a; }\n\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\nvec4 hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return hlslcc_mtx4x4_MainLightWorldToShadow[i];\n#else\n#define d_ar hlslcc_mtx4x4_MainLightWorldToShadow\n    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = int(u_xlat16_2.x);\n    u_xlati1 = op_shl(int(u_xlatu1), 2);\n    u_xlat10.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 1)).xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(u_xlati1).xyz * vs_TEXCOORD1.xxx + u_xlat10.xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 2)).xyz * vs_TEXCOORD1.zzz + u_xlat10.xyz;\n    u_xlat1.xyz = u_xlat10.xyz + hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 3)).xyz;\n    u_xlat1.x = texture2D(_MainLightShadowmapTexture, u_xlat1.xy, _GlobalMipBias.x).x;\n    u_xlatb1 = u_xlat1.x<u_xlat1.z;\n    u_xlat16_2.x = (u_xlatb1) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_11 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_11;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb10 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb10 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_11 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat10.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat10.x = inversesqrt(u_xlat10.x);\n    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_2.x = dot(u_xlat10.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat16_29 = (-_Smoothness) + 1.0;\n    u_xlat16_3.x = (-u_xlat16_29) * 0.699999988 + 1.70000005;\n    u_xlat16_3.x = u_xlat16_29 * u_xlat16_3.x;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29 = max(u_xlat16_29, 0.0078125);\n    u_xlat16_3.x = u_xlat16_3.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;\n    u_xlatb1 = unity_OrthoParams.w==0.0;\n    u_xlat16_5.x = (u_xlatb1) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_5.y = (u_xlatb1) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_5.z = (u_xlatb1) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_12.x = dot((-u_xlat16_5.xyz), u_xlat10.xyz);\n    u_xlat16_12.x = u_xlat16_12.x + u_xlat16_12.x;\n    u_xlat16_12.xyz = u_xlat10.xyz * (-u_xlat16_12.xxx) + (-u_xlat16_5.xyz);\n    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat10_0.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);\n    u_xlat16_3.x = log2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.y;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * u_xlat16_3.xxx;\n    u_xlat16_30 = dot(u_xlat10.xyz, u_xlat16_5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_5.xyz + _MainLightPosition.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_5.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_14.x = (-u_xlat16_5.x) + _Smoothness;\n    u_xlat16_14.x = u_xlat16_14.x + 1.0;\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_0 = u_xlat10_0.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_14.xyz = u_xlat16_14.xxx + (-u_xlat16_6.xyz);\n    u_xlat16_14.xyz = vec3(u_xlat16_30) * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_29) * vec2(u_xlat16_29) + vec2(-1.0, 1.0);\n    u_xlat16_30 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_14.xyz * vec3(u_xlat16_30);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_0.yzw;\n    u_xlat16_3.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;\n    u_xlat1.x = dot(u_xlat10.xyz, u_xlat4.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat10.x = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);\n    u_xlat16_30 = u_xlat10.x * u_xlat10.x;\n    u_xlat10.x = max(u_xlat16_30, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_7.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat10.x * u_xlat1.x;\n    u_xlat16_30 = u_xlat16_29 * 4.0 + 2.0;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat1.x = u_xlat1.x * u_xlat16_30;\n    u_xlat1.x = u_xlat16_29 / u_xlat1.x;\n    u_xlat16_29 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_29 = max(u_xlat16_29, 0.0);\n    u_xlat16_29 = min(u_xlat16_29, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_0.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nbool u_xlatb3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec2 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_11;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nbool u_xlatb28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << 2);\n    u_xlat10.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat10.xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat10.xyz;\n    u_xlat1.xyz = u_xlat10.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlatb28 = 0.0>=u_xlat1.z;\n    u_xlatb3 = u_xlat1.z>=1.0;\n    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);\n    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlatb10 = u_xlatb28 || u_xlatb3;\n    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_2.x;\n    u_xlat16_2.x = (u_xlatb10) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_11 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat10.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat10.x = inversesqrt(u_xlat10.x);\n    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_2.x = dot(u_xlat10.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat16_29 = (-_Smoothness) + 1.0;\n    u_xlat16_4.x = (-u_xlat16_29) * 0.699999988 + 1.70000005;\n    u_xlat16_4.x = u_xlat16_29 * u_xlat16_4.x;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29 = max(u_xlat16_29, 0.0078125);\n    u_xlat16_4.x = u_xlat16_4.x * 6.0;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlatb1 = unity_OrthoParams.w==0.0;\n    u_xlat16_5.x = (u_xlatb1) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_5.y = (u_xlatb1) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_5.z = (u_xlatb1) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_13.x = dot((-u_xlat16_5.xyz), u_xlat10.xyz);\n    u_xlat16_13.x = u_xlat16_13.x + u_xlat16_13.x;\n    u_xlat16_13.xyz = u_xlat10.xyz * (-u_xlat16_13.xxx) + (-u_xlat16_5.xyz);\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_13.xyz, u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_0.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;\n    u_xlat16_31 = dot(u_xlat10.xyz, u_xlat16_5.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_5.xyz + _MainLightPosition.xyz;\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_5.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_14.x = (-u_xlat16_5.x) + _Smoothness;\n    u_xlat16_14.x = u_xlat16_14.x + 1.0;\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_0 = u_xlat16_0.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_14.xyz = u_xlat16_14.xxx + (-u_xlat16_6.xyz);\n    u_xlat16_14.xyz = vec3(u_xlat16_31) * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_29) * vec2(u_xlat16_29) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_14.xyz * vec3(u_xlat16_31);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_0.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlat1.x = dot(u_xlat10.xyz, u_xlat3.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat10.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);\n    u_xlat16_31 = u_xlat10.x * u_xlat10.x;\n    u_xlat10.x = max(u_xlat16_31, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_7.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat10.x * u_xlat1.x;\n    u_xlat16_31 = u_xlat16_29 * 4.0 + 2.0;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat1.x = u_xlat1.x * u_xlat16_31;\n    u_xlat1.x = u_xlat16_29 / u_xlat1.x;\n    u_xlat16_29 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_29 = max(u_xlat16_29, 0.0);\n    u_xlat16_29 = min(u_xlat16_29, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_0.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nint u_xlati1;\nint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nlowp vec2 u_xlat10_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_14;\nmediump float u_xlat16_23;\nmediump float u_xlat16_29;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nint op_shl(int a, int b) { return int(floor(float(a) * pow(2.0, float(b)))); }\nivec2 op_shl(ivec2 a, ivec2 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); return a; }\nivec3 op_shl(ivec3 a, ivec3 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); return a; }\nivec4 op_shl(ivec4 a, ivec4 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); a.w = op_shl(a.w, b.w); return a; }\n\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\nvec4 hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return hlslcc_mtx4x4_MainLightWorldToShadow[i];\n#else\n#define d_ar hlslcc_mtx4x4_MainLightWorldToShadow\n    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = int(u_xlat16_2.x);\n    u_xlati1 = op_shl(int(u_xlatu1), 2);\n    u_xlat10.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 1)).xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(u_xlati1).xyz * vs_TEXCOORD1.xxx + u_xlat10.xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 2)).xyz * vs_TEXCOORD1.zzz + u_xlat10.xyz;\n    u_xlat1.xyz = u_xlat10.xyz + hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 3)).xyz;\n    u_xlat1.x = texture2D(_MainLightShadowmapTexture, u_xlat1.xy, _GlobalMipBias.x).x;\n    u_xlatb1 = u_xlat1.x<u_xlat1.z;\n    u_xlat16_2.x = (u_xlatb1) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_11 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_11;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb10 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb10 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_11 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat3.x = vs_TEXCOORD3.x;\n    u_xlat3.z = vs_TEXCOORD2.x;\n    u_xlat10.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat10.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat10.xyz);\n    u_xlat10.xyz = u_xlat10.xzy * vs_TEXCOORD3.www;\n    u_xlat3.y = u_xlat10.x;\n    u_xlat10_4.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_2.xy = u_xlat10_4.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_29 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_29 = min(u_xlat16_29, 1.0);\n    u_xlat16_29 = (-u_xlat16_29) + 1.0;\n    u_xlat16_29 = sqrt(u_xlat16_29);\n    u_xlat16_2.z = max(u_xlat16_29, 1.00000002e-16);\n    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat4.y = u_xlat10.z;\n    u_xlat4.x = vs_TEXCOORD3.y;\n    u_xlat4.z = vs_TEXCOORD2.y;\n    u_xlat3.y = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat10.x = vs_TEXCOORD3.z;\n    u_xlat10.z = vs_TEXCOORD2.z;\n    u_xlat3.z = dot(u_xlat16_2.xyz, u_xlat10.xyz);\n    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat10.x = inversesqrt(u_xlat10.x);\n    u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;\n    u_xlat16_2.x = dot(u_xlat10.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlatb1 = unity_OrthoParams.w==0.0;\n    u_xlat16_5.x = (u_xlatb1) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_5.y = (u_xlatb1) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_5.z = (u_xlatb1) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_29 = dot((-u_xlat16_5.xyz), u_xlat10.xyz);\n    u_xlat16_29 = u_xlat16_29 + u_xlat16_29;\n    u_xlat16_6.xyz = u_xlat10.xyz * (-vec3(u_xlat16_29)) + (-u_xlat16_5.xyz);\n    u_xlat16_29 = (-_Smoothness) + 1.0;\n    u_xlat16_32 = (-u_xlat16_29) * 0.699999988 + 1.70000005;\n    u_xlat16_32 = u_xlat16_29 * u_xlat16_32;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29 = max(u_xlat16_29, 0.0078125);\n    u_xlat16_32 = u_xlat16_32 * 6.0;\n    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_32);\n    u_xlat16_32 = u_xlat10_0.w + -1.0;\n    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = log2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.y;\n    u_xlat16_32 = exp2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;\n    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = dot(u_xlat10.xyz, u_xlat16_5.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_5.xyz + _MainLightPosition.xyz;\n    u_xlat16_5.x = (-u_xlat16_32) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_14 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_23 = (-u_xlat16_14) + _Smoothness;\n    u_xlat16_23 = u_xlat16_23 + 1.0;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_0 = u_xlat10_0.wxyz * _BaseColor.wxyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_8.xyz = vec3(u_xlat16_23) + (-u_xlat16_7.xyz);\n    u_xlat16_5.xzw = u_xlat16_5.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_29) * vec2(u_xlat16_29) + vec2(-1.0, 1.0);\n    u_xlat16_33 = float(1.0) / u_xlat16_8.y;\n    u_xlat4.xyz = u_xlat16_5.xzw * vec3(u_xlat16_33);\n    u_xlat16_5.xzw = u_xlat4.xyz * u_xlat16_6.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_14) * u_xlat16_0.yzw;\n    u_xlat16_5.xyz = vs_TEXCOORD8.xyz * u_xlat16_6.xyz + u_xlat16_5.xzw;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlat1.x = dot(u_xlat10.xyz, u_xlat3.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat10.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);\n    u_xlat16_32 = u_xlat10.x * u_xlat10.x;\n    u_xlat10.x = max(u_xlat16_32, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_8.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat10.x * u_xlat1.x;\n    u_xlat16_32 = u_xlat16_29 * 4.0 + 2.0;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat1.x = u_xlat1.x * u_xlat16_32;\n    u_xlat1.x = u_xlat16_29 / u_xlat1.x;\n    u_xlat16_29 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_29 = max(u_xlat16_29, 0.0);\n    u_xlat16_29 = min(u_xlat16_29, 100.0);\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_0.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbvec3 u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nbool u_xlatb3;\nvec3 u_xlat4;\nmediump vec2 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec2 u_xlat16_9;\nvec3 u_xlat11;\nbool u_xlatb11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_16;\nfloat u_xlat31;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << 2);\n    u_xlat11.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat11.xyz;\n    u_xlat1.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlatb31 = 0.0>=u_xlat1.z;\n    u_xlatb3 = u_xlat1.z>=1.0;\n    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);\n    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlatb11 = u_xlatb31 || u_xlatb3;\n    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;\n    u_xlat16_2.x = (u_xlatb11) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_12 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_12 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat3.x = vs_TEXCOORD3.x;\n    u_xlat3.z = vs_TEXCOORD2.x;\n    u_xlat11.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat11.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat11.xyz);\n    u_xlat11.xyz = u_xlat11.xzy * vs_TEXCOORD3.www;\n    u_xlat3.y = u_xlat11.x;\n    u_xlat16_4.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_2.xy = u_xlat16_4.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_32 = min(u_xlat16_32, 1.0);\n    u_xlat16_32 = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = sqrt(u_xlat16_32);\n    u_xlat16_2.z = max(u_xlat16_32, 1.00000002e-16);\n    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat4.y = u_xlat11.z;\n    u_xlat4.x = vs_TEXCOORD3.y;\n    u_xlat4.z = vs_TEXCOORD2.y;\n    u_xlat3.y = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat11.x = vs_TEXCOORD3.z;\n    u_xlat11.z = vs_TEXCOORD2.z;\n    u_xlat3.z = dot(u_xlat16_2.xyz, u_xlat11.xyz);\n    u_xlat11.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat11.x = inversesqrt(u_xlat11.x);\n    u_xlat0.xyz = u_xlat11.xxx * u_xlat3.xyz;\n    u_xlat16_2.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_6.xyz = log2(abs(u_xlat16_5.xyz));\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_5.xyzx).xyz;\n    u_xlat16_5.x = (u_xlatb1.x) ? u_xlat16_7.x : u_xlat16_6.x;\n    u_xlat16_5.y = (u_xlatb1.y) ? u_xlat16_7.y : u_xlat16_6.y;\n    u_xlat16_5.z = (u_xlatb1.z) ? u_xlat16_7.z : u_xlat16_6.z;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;\n    u_xlatb31 = unity_OrthoParams.w==0.0;\n    u_xlat16_6.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_6.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_6.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_32 = dot((-u_xlat16_6.xyz), u_xlat0.xyz);\n    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;\n    u_xlat16_7.xyz = u_xlat0.xyz * (-vec3(u_xlat16_32)) + (-u_xlat16_6.xyz);\n    u_xlat16_32 = (-_Smoothness) + 1.0;\n    u_xlat16_35 = (-u_xlat16_32) * 0.699999988 + 1.70000005;\n    u_xlat16_35 = u_xlat16_32 * u_xlat16_35;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = max(u_xlat16_32, 0.0078125);\n    u_xlat16_35 = u_xlat16_35 * 6.0;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_35);\n    u_xlat16_35 = u_xlat16_1.w + -1.0;\n    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;\n    u_xlat16_35 = max(u_xlat16_35, 0.0);\n    u_xlat16_35 = log2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.y;\n    u_xlat16_35 = exp2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_35);\n    u_xlat16_35 = dot(u_xlat0.xyz, u_xlat16_6.xyz);\n    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_6.xyz + _MainLightPosition.xyz;\n    u_xlat16_35 = (-u_xlat16_35) + 1.0;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_6.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_16.x = (-u_xlat16_6.x) + _Smoothness;\n    u_xlat16_16.x = u_xlat16_16.x + 1.0;\n    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);\n    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_8.xyz = u_xlat16_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat16_3.wxyz * _BaseColor.wxyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_16.xyz = u_xlat16_16.xxx + (-u_xlat16_8.xyz);\n    u_xlat16_16.xyz = vec3(u_xlat16_35) * u_xlat16_16.xyz + u_xlat16_8.xyz;\n    u_xlat16_9.xy = vec2(u_xlat16_32) * vec2(u_xlat16_32) + vec2(-1.0, 1.0);\n    u_xlat16_35 = float(1.0) / u_xlat16_9.y;\n    u_xlat4.xyz = u_xlat16_16.xyz * vec3(u_xlat16_35);\n    u_xlat16_16.xyz = u_xlat4.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_6.xxx * u_xlat16_3.yzw;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_16.xyz;\n    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat31 = max(u_xlat31, 1.17549435e-38);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;\n    u_xlat31 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);\n    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_35 = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_35, 0.100000001);\n    u_xlat11.x = u_xlat31 * u_xlat31;\n    u_xlat11.x = u_xlat11.x * u_xlat16_9.x + 1.00001001;\n    u_xlat11.x = u_xlat11.x * u_xlat11.x;\n    u_xlat1.x = u_xlat1.x * u_xlat11.x;\n    u_xlat16_35 = u_xlat16_32 * 4.0 + 2.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat1.x = u_xlat1.x * u_xlat16_35;\n    u_xlat1.x = u_xlat16_32 / u_xlat1.x;\n    u_xlat16_32 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = min(u_xlat16_32, 100.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_32) + u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlatb1.x = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_3.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nint u_xlati1;\nint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nvec3 u_xlat4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec2 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_29;\nmediump float u_xlat16_30;\nint op_shl(int a, int b) { return int(floor(float(a) * pow(2.0, float(b)))); }\nivec2 op_shl(ivec2 a, ivec2 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); return a; }\nivec3 op_shl(ivec3 a, ivec3 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); return a; }\nivec4 op_shl(ivec4 a, ivec4 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); a.w = op_shl(a.w, b.w); return a; }\n\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\nvec4 hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return hlslcc_mtx4x4_MainLightWorldToShadow[i];\n#else\n#define d_ar hlslcc_mtx4x4_MainLightWorldToShadow\n    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = int(u_xlat16_2.x);\n    u_xlati1 = op_shl(int(u_xlatu1), 2);\n    u_xlat10.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 1)).xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(u_xlati1).xyz * vs_TEXCOORD1.xxx + u_xlat10.xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 2)).xyz * vs_TEXCOORD1.zzz + u_xlat10.xyz;\n    u_xlat1.xyz = u_xlat10.xyz + hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 3)).xyz;\n    u_xlat1.x = texture2D(_MainLightShadowmapTexture, u_xlat1.xy, _GlobalMipBias.x).x;\n    u_xlatb1 = u_xlat1.x<u_xlat1.z;\n    u_xlat16_2.x = (u_xlatb1) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_11 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_11;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb10 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb10 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_11 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat10.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat10.x = inversesqrt(u_xlat10.x);\n    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_2.x = dot(u_xlat10.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat16_29 = (-_Smoothness) + 1.0;\n    u_xlat16_3.x = (-u_xlat16_29) * 0.699999988 + 1.70000005;\n    u_xlat16_3.x = u_xlat16_29 * u_xlat16_3.x;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29 = max(u_xlat16_29, 0.0078125);\n    u_xlat16_3.x = u_xlat16_3.x * 6.0;\n    u_xlat4.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;\n    u_xlatb1 = unity_OrthoParams.w==0.0;\n    u_xlat16_5.x = (u_xlatb1) ? u_xlat4.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_5.y = (u_xlatb1) ? u_xlat4.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_5.z = (u_xlatb1) ? u_xlat4.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_12.x = dot((-u_xlat16_5.xyz), u_xlat10.xyz);\n    u_xlat16_12.x = u_xlat16_12.x + u_xlat16_12.x;\n    u_xlat16_12.xyz = u_xlat10.xyz * (-u_xlat16_12.xxx) + (-u_xlat16_5.xyz);\n    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat10_0.w + -1.0;\n    u_xlat16_3.x = unity_SpecCube0_HDR.w * u_xlat16_3.x + 1.0;\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);\n    u_xlat16_3.x = log2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.y;\n    u_xlat16_3.x = exp2(u_xlat16_3.x);\n    u_xlat16_3.x = u_xlat16_3.x * unity_SpecCube0_HDR.x;\n    u_xlat16_3.xyz = u_xlat10_0.xyz * u_xlat16_3.xxx;\n    u_xlat16_30 = dot(u_xlat10.xyz, u_xlat16_5.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat4.xyz = u_xlat16_5.xyz + _MainLightPosition.xyz;\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_5.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_14.x = (-u_xlat16_5.x) + _Smoothness;\n    u_xlat16_14.x = u_xlat16_14.x + 1.0;\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_0 = u_xlat10_0.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_14.xyz = u_xlat16_14.xxx + (-u_xlat16_6.xyz);\n    u_xlat16_14.xyz = vec3(u_xlat16_30) * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_29) * vec2(u_xlat16_29) + vec2(-1.0, 1.0);\n    u_xlat16_30 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_14.xyz * vec3(u_xlat16_30);\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_0.yzw;\n    u_xlat16_3.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;\n    u_xlat1.x = dot(u_xlat10.xyz, u_xlat4.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat10.x = dot(_MainLightPosition.xyz, u_xlat4.xyz);\n    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);\n    u_xlat16_30 = u_xlat10.x * u_xlat10.x;\n    u_xlat10.x = max(u_xlat16_30, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_7.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat10.x * u_xlat1.x;\n    u_xlat16_30 = u_xlat16_29 * 4.0 + 2.0;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat1.x = u_xlat1.x * u_xlat16_30;\n    u_xlat1.x = u_xlat16_29 / u_xlat1.x;\n    u_xlat16_29 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_29 = max(u_xlat16_29, 0.0);\n    u_xlat16_29 = min(u_xlat16_29, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_3.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_2.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_0.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nbool u_xlatb3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec2 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_11;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_14;\nbool u_xlatb28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << 2);\n    u_xlat10.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat10.xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat10.xyz;\n    u_xlat1.xyz = u_xlat10.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlatb28 = 0.0>=u_xlat1.z;\n    u_xlatb3 = u_xlat1.z>=1.0;\n    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);\n    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlatb10 = u_xlatb28 || u_xlatb3;\n    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_2.x;\n    u_xlat16_2.x = (u_xlatb10) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_11 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat10.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat10.x = inversesqrt(u_xlat10.x);\n    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_2.x = dot(u_xlat10.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat16_29 = (-_Smoothness) + 1.0;\n    u_xlat16_4.x = (-u_xlat16_29) * 0.699999988 + 1.70000005;\n    u_xlat16_4.x = u_xlat16_29 * u_xlat16_4.x;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29 = max(u_xlat16_29, 0.0078125);\n    u_xlat16_4.x = u_xlat16_4.x * 6.0;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlatb1 = unity_OrthoParams.w==0.0;\n    u_xlat16_5.x = (u_xlatb1) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_5.y = (u_xlatb1) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_5.z = (u_xlatb1) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_13.x = dot((-u_xlat16_5.xyz), u_xlat10.xyz);\n    u_xlat16_13.x = u_xlat16_13.x + u_xlat16_13.x;\n    u_xlat16_13.xyz = u_xlat10.xyz * (-u_xlat16_13.xxx) + (-u_xlat16_5.xyz);\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_13.xyz, u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_0.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xxx;\n    u_xlat16_31 = dot(u_xlat10.xyz, u_xlat16_5.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_5.xyz + _MainLightPosition.xyz;\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_5.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_14.x = (-u_xlat16_5.x) + _Smoothness;\n    u_xlat16_14.x = u_xlat16_14.x + 1.0;\n    u_xlat16_14.x = clamp(u_xlat16_14.x, 0.0, 1.0);\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_0 = u_xlat16_0.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_14.xyz = u_xlat16_14.xxx + (-u_xlat16_6.xyz);\n    u_xlat16_14.xyz = vec3(u_xlat16_31) * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_29) * vec2(u_xlat16_29) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_14.xyz * vec3(u_xlat16_31);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_0.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlat1.x = dot(u_xlat10.xyz, u_xlat3.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat10.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);\n    u_xlat16_31 = u_xlat10.x * u_xlat10.x;\n    u_xlat10.x = max(u_xlat16_31, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_7.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat10.x * u_xlat1.x;\n    u_xlat16_31 = u_xlat16_29 * 4.0 + 2.0;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat1.x = u_xlat1.x * u_xlat16_31;\n    u_xlat1.x = u_xlat16_29 / u_xlat1.x;\n    u_xlat16_29 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_29 = max(u_xlat16_29, 0.0);\n    u_xlat16_29 = min(u_xlat16_29, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_29) + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_2.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_0.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nint u_xlati1;\nint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nlowp vec2 u_xlat10_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_14;\nmediump float u_xlat16_23;\nmediump float u_xlat16_29;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nint op_shl(int a, int b) { return int(floor(float(a) * pow(2.0, float(b)))); }\nivec2 op_shl(ivec2 a, ivec2 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); return a; }\nivec3 op_shl(ivec3 a, ivec3 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); return a; }\nivec4 op_shl(ivec4 a, ivec4 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); a.w = op_shl(a.w, b.w); return a; }\n\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\nvec4 hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return hlslcc_mtx4x4_MainLightWorldToShadow[i];\n#else\n#define d_ar hlslcc_mtx4x4_MainLightWorldToShadow\n    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = int(u_xlat16_2.x);\n    u_xlati1 = op_shl(int(u_xlatu1), 2);\n    u_xlat10.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 1)).xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(u_xlati1).xyz * vs_TEXCOORD1.xxx + u_xlat10.xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 2)).xyz * vs_TEXCOORD1.zzz + u_xlat10.xyz;\n    u_xlat1.xyz = u_xlat10.xyz + hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 3)).xyz;\n    u_xlat1.x = texture2D(_MainLightShadowmapTexture, u_xlat1.xy, _GlobalMipBias.x).x;\n    u_xlatb1 = u_xlat1.x<u_xlat1.z;\n    u_xlat16_2.x = (u_xlatb1) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_11 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_11;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb10 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb10 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_11 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat3.x = vs_TEXCOORD3.x;\n    u_xlat3.z = vs_TEXCOORD2.x;\n    u_xlat10.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat10.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat10.xyz);\n    u_xlat10.xyz = u_xlat10.xzy * vs_TEXCOORD3.www;\n    u_xlat3.y = u_xlat10.x;\n    u_xlat10_4.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_2.xy = u_xlat10_4.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_29 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_29 = min(u_xlat16_29, 1.0);\n    u_xlat16_29 = (-u_xlat16_29) + 1.0;\n    u_xlat16_29 = sqrt(u_xlat16_29);\n    u_xlat16_2.z = max(u_xlat16_29, 1.00000002e-16);\n    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat4.y = u_xlat10.z;\n    u_xlat4.x = vs_TEXCOORD3.y;\n    u_xlat4.z = vs_TEXCOORD2.y;\n    u_xlat3.y = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat10.x = vs_TEXCOORD3.z;\n    u_xlat10.z = vs_TEXCOORD2.z;\n    u_xlat3.z = dot(u_xlat16_2.xyz, u_xlat10.xyz);\n    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat10.x = inversesqrt(u_xlat10.x);\n    u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;\n    u_xlat16_2.x = dot(u_xlat10.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlatb1 = unity_OrthoParams.w==0.0;\n    u_xlat16_5.x = (u_xlatb1) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_5.y = (u_xlatb1) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_5.z = (u_xlatb1) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_29 = dot((-u_xlat16_5.xyz), u_xlat10.xyz);\n    u_xlat16_29 = u_xlat16_29 + u_xlat16_29;\n    u_xlat16_6.xyz = u_xlat10.xyz * (-vec3(u_xlat16_29)) + (-u_xlat16_5.xyz);\n    u_xlat16_29 = (-_Smoothness) + 1.0;\n    u_xlat16_32 = (-u_xlat16_29) * 0.699999988 + 1.70000005;\n    u_xlat16_32 = u_xlat16_29 * u_xlat16_32;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29 = max(u_xlat16_29, 0.0078125);\n    u_xlat16_32 = u_xlat16_32 * 6.0;\n    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_32);\n    u_xlat16_32 = u_xlat10_0.w + -1.0;\n    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = log2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.y;\n    u_xlat16_32 = exp2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;\n    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = dot(u_xlat10.xyz, u_xlat16_5.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_5.xyz + _MainLightPosition.xyz;\n    u_xlat16_5.x = (-u_xlat16_32) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_14 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_23 = (-u_xlat16_14) + _Smoothness;\n    u_xlat16_23 = u_xlat16_23 + 1.0;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_0 = u_xlat10_0.wxyz * _BaseColor.wxyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_8.xyz = vec3(u_xlat16_23) + (-u_xlat16_7.xyz);\n    u_xlat16_5.xzw = u_xlat16_5.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_29) * vec2(u_xlat16_29) + vec2(-1.0, 1.0);\n    u_xlat16_33 = float(1.0) / u_xlat16_8.y;\n    u_xlat4.xyz = u_xlat16_5.xzw * vec3(u_xlat16_33);\n    u_xlat16_5.xzw = u_xlat4.xyz * u_xlat16_6.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_14) * u_xlat16_0.yzw;\n    u_xlat16_5.xyz = vs_TEXCOORD8.xyz * u_xlat16_6.xyz + u_xlat16_5.xzw;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlat1.x = dot(u_xlat10.xyz, u_xlat3.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat10.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);\n    u_xlat16_32 = u_xlat10.x * u_xlat10.x;\n    u_xlat10.x = max(u_xlat16_32, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_8.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat10.x * u_xlat1.x;\n    u_xlat16_32 = u_xlat16_29 * 4.0 + 2.0;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat1.x = u_xlat1.x * u_xlat16_32;\n    u_xlat1.x = u_xlat16_29 / u_xlat1.x;\n    u_xlat16_29 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_29 = max(u_xlat16_29, 0.0);\n    u_xlat16_29 = min(u_xlat16_29, 100.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_0.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbvec3 u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nbool u_xlatb3;\nvec3 u_xlat4;\nmediump vec2 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec2 u_xlat16_9;\nvec3 u_xlat11;\nbool u_xlatb11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_16;\nfloat u_xlat31;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << 2);\n    u_xlat11.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat11.xyz;\n    u_xlat1.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlatb31 = 0.0>=u_xlat1.z;\n    u_xlatb3 = u_xlat1.z>=1.0;\n    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);\n    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlatb11 = u_xlatb31 || u_xlatb3;\n    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;\n    u_xlat16_2.x = (u_xlatb11) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_12 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_12 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat3.x = vs_TEXCOORD3.x;\n    u_xlat3.z = vs_TEXCOORD2.x;\n    u_xlat11.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat11.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat11.xyz);\n    u_xlat11.xyz = u_xlat11.xzy * vs_TEXCOORD3.www;\n    u_xlat3.y = u_xlat11.x;\n    u_xlat16_4.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_2.xy = u_xlat16_4.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_32 = min(u_xlat16_32, 1.0);\n    u_xlat16_32 = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = sqrt(u_xlat16_32);\n    u_xlat16_2.z = max(u_xlat16_32, 1.00000002e-16);\n    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat4.y = u_xlat11.z;\n    u_xlat4.x = vs_TEXCOORD3.y;\n    u_xlat4.z = vs_TEXCOORD2.y;\n    u_xlat3.y = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat11.x = vs_TEXCOORD3.z;\n    u_xlat11.z = vs_TEXCOORD2.z;\n    u_xlat3.z = dot(u_xlat16_2.xyz, u_xlat11.xyz);\n    u_xlat11.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat11.x = inversesqrt(u_xlat11.x);\n    u_xlat0.xyz = u_xlat11.xxx * u_xlat3.xyz;\n    u_xlat16_2.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_6.xyz = log2(abs(u_xlat16_5.xyz));\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_5.xyzx).xyz;\n    u_xlat16_5.x = (u_xlatb1.x) ? u_xlat16_7.x : u_xlat16_6.x;\n    u_xlat16_5.y = (u_xlatb1.y) ? u_xlat16_7.y : u_xlat16_6.y;\n    u_xlat16_5.z = (u_xlatb1.z) ? u_xlat16_7.z : u_xlat16_6.z;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;\n    u_xlatb31 = unity_OrthoParams.w==0.0;\n    u_xlat16_6.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_6.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_6.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_32 = dot((-u_xlat16_6.xyz), u_xlat0.xyz);\n    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;\n    u_xlat16_7.xyz = u_xlat0.xyz * (-vec3(u_xlat16_32)) + (-u_xlat16_6.xyz);\n    u_xlat16_32 = (-_Smoothness) + 1.0;\n    u_xlat16_35 = (-u_xlat16_32) * 0.699999988 + 1.70000005;\n    u_xlat16_35 = u_xlat16_32 * u_xlat16_35;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = max(u_xlat16_32, 0.0078125);\n    u_xlat16_35 = u_xlat16_35 * 6.0;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_35);\n    u_xlat16_35 = u_xlat16_1.w + -1.0;\n    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;\n    u_xlat16_35 = max(u_xlat16_35, 0.0);\n    u_xlat16_35 = log2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.y;\n    u_xlat16_35 = exp2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_35);\n    u_xlat16_35 = dot(u_xlat0.xyz, u_xlat16_6.xyz);\n    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_6.xyz + _MainLightPosition.xyz;\n    u_xlat16_35 = (-u_xlat16_35) + 1.0;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_6.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_16.x = (-u_xlat16_6.x) + _Smoothness;\n    u_xlat16_16.x = u_xlat16_16.x + 1.0;\n    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);\n    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_8.xyz = u_xlat16_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat16_3.wxyz * _BaseColor.wxyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_16.xyz = u_xlat16_16.xxx + (-u_xlat16_8.xyz);\n    u_xlat16_16.xyz = vec3(u_xlat16_35) * u_xlat16_16.xyz + u_xlat16_8.xyz;\n    u_xlat16_9.xy = vec2(u_xlat16_32) * vec2(u_xlat16_32) + vec2(-1.0, 1.0);\n    u_xlat16_35 = float(1.0) / u_xlat16_9.y;\n    u_xlat4.xyz = u_xlat16_16.xyz * vec3(u_xlat16_35);\n    u_xlat16_16.xyz = u_xlat4.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_6.xxx * u_xlat16_3.yzw;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_16.xyz;\n    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat31 = max(u_xlat31, 1.17549435e-38);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;\n    u_xlat31 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);\n    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_35 = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_35, 0.100000001);\n    u_xlat11.x = u_xlat31 * u_xlat31;\n    u_xlat11.x = u_xlat11.x * u_xlat16_9.x + 1.00001001;\n    u_xlat11.x = u_xlat11.x * u_xlat11.x;\n    u_xlat1.x = u_xlat1.x * u_xlat11.x;\n    u_xlat16_35 = u_xlat16_32 * 4.0 + 2.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat1.x = u_xlat1.x * u_xlat16_35;\n    u_xlat1.x = u_xlat16_32 / u_xlat1.x;\n    u_xlat16_32 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = min(u_xlat16_32, 100.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_32) + u_xlat16_7.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_7.xyz + u_xlat16_2.xyz;\n    u_xlatb1.x = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_3.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_1.x = (u_xlatb27) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_1.y = (u_xlatb27) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_1.z = (u_xlatb27) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_28 = dot((-u_xlat16_1.xyz), u_xlat0.xyz);\n    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_28)) + (-u_xlat16_1.xyz);\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_28 = (-u_xlat10_3.w) * _Smoothness + 1.0;\n    u_xlat16_29 = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_29 = u_xlat16_28 * u_xlat16_29;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_29 = u_xlat16_29 * 6.0;\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);\n    u_xlat16_4.x = u_xlat10_2.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_4.xxx;\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat5.xyz = u_xlat16_1.xyz + _MainLightPosition.xyz;\n    u_xlat16_1.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_19 = u_xlat10_3.w * _Smoothness + (-u_xlat16_10);\n    u_xlat16_19 = u_xlat16_19 + 1.0;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat10_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_8.xyz = vec3(u_xlat16_19) + (-u_xlat16_6.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_8.y;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_1.xyz = u_xlat3.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_1.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat0.x = u_xlat3.x * u_xlat3.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_8.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat16_31 = u_xlat27 * u_xlat27;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_1.x = (u_xlatb27) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_1.y = (u_xlatb27) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_1.z = (u_xlatb27) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_28 = dot((-u_xlat16_1.xyz), u_xlat0.xyz);\n    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_28)) + (-u_xlat16_1.xyz);\n    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_28 = (-u_xlat16_3.w) * _Smoothness + 1.0;\n    u_xlat16_29 = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_29 = u_xlat16_28 * u_xlat16_29;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_29 = u_xlat16_29 * 6.0;\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);\n    u_xlat16_4.x = u_xlat16_2.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat5.xyz = u_xlat16_1.xyz + _MainLightPosition.xyz;\n    u_xlat16_1.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_19 = u_xlat16_3.w * _Smoothness + (-u_xlat16_10);\n    u_xlat16_19 = u_xlat16_19 + 1.0;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat16_3.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_8.xyz = vec3(u_xlat16_19) + (-u_xlat16_6.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_8.y;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_1.xyz = u_xlat3.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_1.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat0.x = u_xlat3.x * u_xlat3.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_8.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat16_31 = u_xlat27 * u_xlat27;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nmediump float u_xlat16_11;\nmediump float u_xlat16_19;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat10_2.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat10_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_27 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_27 = min(u_xlat16_27, 1.0);\n    u_xlat16_27 = (-u_xlat16_27) + 1.0;\n    u_xlat16_27 = sqrt(u_xlat16_27);\n    u_xlat16_3.z = max(u_xlat16_27, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlatb24 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb24) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb24) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb24) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_27 = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_27 = u_xlat16_27 + u_xlat16_27;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-vec3(u_xlat16_27)) + (-u_xlat16_3.xyz);\n    u_xlat10_1 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_27 = (-u_xlat10_1.w) * _Smoothness + 1.0;\n    u_xlat16_28 = (-u_xlat16_27) * 0.699999988 + 1.70000005;\n    u_xlat16_28 = u_xlat16_27 * u_xlat16_28;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = max(u_xlat16_27, 0.0078125);\n    u_xlat16_28 = u_xlat16_28 * 6.0;\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_28);\n    u_xlat16_4.x = u_xlat10_2.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_4.xxx;\n    u_xlat16_28 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat2.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_28) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_11 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_19 = u_xlat10_1.w * _Smoothness + (-u_xlat16_11);\n    u_xlat16_19 = u_xlat16_19 + 1.0;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_5.xyz = u_xlat10_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_6.xyz = u_xlat10_1.xyz * _BaseColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_11) * u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_19) + (-u_xlat16_5.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_27) * vec2(u_xlat16_27) + vec2(-1.0, 1.0);\n    u_xlat16_28 = float(1.0) / u_xlat16_7.y;\n    u_xlat1.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28);\n    u_xlat16_3.xyz = u_xlat1.xyz * u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD8.xyz * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 1.17549435e-38);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);\n    u_xlat16_28 = u_xlat8 * u_xlat8;\n    u_xlat8 = max(u_xlat16_28, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat8 * u_xlat0.x;\n    u_xlat16_28 = u_xlat16_27 * 4.0 + 2.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat0.x = u_xlat0.x * u_xlat16_28;\n    u_xlat0.x = u_xlat16_27 / u_xlat0.x;\n    u_xlat16_27 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_27 = max(u_xlat16_27, 0.0);\n    u_xlat16_27 = min(u_xlat16_27, 100.0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nbvec3 u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat16_2.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat16_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_4.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_4.x;\n    u_xlat16_3.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_4.y;\n    u_xlat16_3.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_4.z;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30)) + (-u_xlat16_4.xyz);\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_30 = (-u_xlat16_1.w) * _Smoothness + 1.0;\n    u_xlat16_31 = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30 * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat16_2.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat2.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = u_xlat16_1.w * _Smoothness + (-u_xlat16_13.x);\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat16_1.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_13.xxx * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_13.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_13.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_30) * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_8.y;\n    u_xlat1.xyz = u_xlat16_4.xyz * vec3(u_xlat16_31);\n    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_8.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_30 / u_xlat0.x;\n    u_xlat16_30 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = min(u_xlat16_30, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30) + u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_1.x = (u_xlatb27) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_1.y = (u_xlatb27) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_1.z = (u_xlatb27) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_28 = dot((-u_xlat16_1.xyz), u_xlat0.xyz);\n    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_28)) + (-u_xlat16_1.xyz);\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_28 = (-u_xlat10_3.w) * _Smoothness + 1.0;\n    u_xlat16_29 = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_29 = u_xlat16_28 * u_xlat16_29;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_29 = u_xlat16_29 * 6.0;\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);\n    u_xlat16_4.x = u_xlat10_2.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_4.xxx;\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat5.xyz = u_xlat16_1.xyz + _MainLightPosition.xyz;\n    u_xlat16_1.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_19 = u_xlat10_3.w * _Smoothness + (-u_xlat16_10);\n    u_xlat16_19 = u_xlat16_19 + 1.0;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat10_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_8.xyz = vec3(u_xlat16_19) + (-u_xlat16_6.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_8.y;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_1.xyz = u_xlat3.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_1.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat0.x = u_xlat3.x * u_xlat3.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_8.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat16_31 = u_xlat27 * u_xlat27;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_7.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_7.xyz + u_xlat16_1.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_1.x = (u_xlatb27) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_1.y = (u_xlatb27) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_1.z = (u_xlatb27) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_28 = dot((-u_xlat16_1.xyz), u_xlat0.xyz);\n    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_28)) + (-u_xlat16_1.xyz);\n    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_28 = (-u_xlat16_3.w) * _Smoothness + 1.0;\n    u_xlat16_29 = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_29 = u_xlat16_28 * u_xlat16_29;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_29 = u_xlat16_29 * 6.0;\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);\n    u_xlat16_4.x = u_xlat16_2.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat5.xyz = u_xlat16_1.xyz + _MainLightPosition.xyz;\n    u_xlat16_1.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_19 = u_xlat16_3.w * _Smoothness + (-u_xlat16_10);\n    u_xlat16_19 = u_xlat16_19 + 1.0;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat16_3.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_8.xyz = vec3(u_xlat16_19) + (-u_xlat16_6.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_8.y;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_1.xyz = u_xlat3.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_1.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat27 = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat3.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat0.x = u_xlat3.x * u_xlat3.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_8.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat16_31 = u_xlat27 * u_xlat27;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_7.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_7.xyz + u_xlat16_1.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nfloat u_xlat8;\nmediump float u_xlat16_11;\nmediump float u_xlat16_19;\nfloat u_xlat24;\nbool u_xlatb24;\nmediump float u_xlat16_27;\nmediump float u_xlat16_28;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat10_2.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat10_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_27 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_27 = min(u_xlat16_27, 1.0);\n    u_xlat16_27 = (-u_xlat16_27) + 1.0;\n    u_xlat16_27 = sqrt(u_xlat16_27);\n    u_xlat16_3.z = max(u_xlat16_27, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat24 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat0.xyz = vec3(u_xlat24) * u_xlat0.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat24 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat1.xyz;\n    u_xlatb24 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb24) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb24) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb24) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_27 = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_27 = u_xlat16_27 + u_xlat16_27;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-vec3(u_xlat16_27)) + (-u_xlat16_3.xyz);\n    u_xlat10_1 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_27 = (-u_xlat10_1.w) * _Smoothness + 1.0;\n    u_xlat16_28 = (-u_xlat16_27) * 0.699999988 + 1.70000005;\n    u_xlat16_28 = u_xlat16_27 * u_xlat16_28;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat16_27 = max(u_xlat16_27, 0.0078125);\n    u_xlat16_28 = u_xlat16_28 * 6.0;\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_28);\n    u_xlat16_4.x = u_xlat10_2.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_4.xxx;\n    u_xlat16_28 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_28 = clamp(u_xlat16_28, 0.0, 1.0);\n    u_xlat2.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_28) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_11 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_19 = u_xlat10_1.w * _Smoothness + (-u_xlat16_11);\n    u_xlat16_19 = u_xlat16_19 + 1.0;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_5.xyz = u_xlat10_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_6.xyz = u_xlat10_1.xyz * _BaseColor.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_11) * u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_19) + (-u_xlat16_5.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_7.xyz + u_xlat16_5.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_27) * vec2(u_xlat16_27) + vec2(-1.0, 1.0);\n    u_xlat16_28 = float(1.0) / u_xlat16_7.y;\n    u_xlat1.xyz = u_xlat16_3.xyz * vec3(u_xlat16_28);\n    u_xlat16_3.xyz = u_xlat1.xyz * u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD8.xyz * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat24 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat24 = max(u_xlat24, 1.17549435e-38);\n    u_xlat24 = inversesqrt(u_xlat24);\n    u_xlat1.xyz = vec3(u_xlat24) * u_xlat2.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat8 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);\n    u_xlat16_28 = u_xlat8 * u_xlat8;\n    u_xlat8 = max(u_xlat16_28, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat8 * u_xlat0.x;\n    u_xlat16_28 = u_xlat16_27 * 4.0 + 2.0;\n    u_xlat16_27 = u_xlat16_27 * u_xlat16_27;\n    u_xlat0.x = u_xlat0.x * u_xlat16_28;\n    u_xlat0.x = u_xlat16_27 / u_xlat0.x;\n    u_xlat16_27 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_27 = max(u_xlat16_27, 0.0);\n    u_xlat16_27 = min(u_xlat16_27, 100.0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz * vec3(u_xlat16_27) + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_6.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nbvec3 u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat16_2.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat16_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_4.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_4.x;\n    u_xlat16_3.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_4.y;\n    u_xlat16_3.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_4.z;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30)) + (-u_xlat16_4.xyz);\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_30 = (-u_xlat16_1.w) * _Smoothness + 1.0;\n    u_xlat16_31 = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30 * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat16_2.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat2.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = u_xlat16_1.w * _Smoothness + (-u_xlat16_13.x);\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat16_1.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_13.xxx * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_13.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_13.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_30) * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_8.y;\n    u_xlat1.xyz = u_xlat16_4.xyz * vec3(u_xlat16_31);\n    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_8.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_30 / u_xlat0.x;\n    u_xlat16_30 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = min(u_xlat16_30, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30) + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_7.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec3 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nbool u_xlatb3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_1.x = (u_xlatb27) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_1.y = (u_xlatb27) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_1.z = (u_xlatb27) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_28 = dot((-u_xlat16_1.xyz), u_xlat0.xyz);\n    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_28)) + (-u_xlat16_1.xyz);\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_28 = (-u_xlat10_3.w) * _Smoothness + 1.0;\n    u_xlat16_29 = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_29 = u_xlat16_28 * u_xlat16_29;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_29 = u_xlat16_29 * 6.0;\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);\n    u_xlat16_4.x = u_xlat10_2.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat10_2.xyz * u_xlat16_4.xxx;\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat5.xyz = u_xlat16_1.xyz + _MainLightPosition.xyz;\n    u_xlat16_1.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_19 = u_xlat10_3.w * _Smoothness + (-u_xlat16_10);\n    u_xlat16_19 = u_xlat16_19 + 1.0;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat10_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat10_3.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_8.xyz = vec3(u_xlat16_19) + (-u_xlat16_6.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_8.y;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_1.xyz = u_xlat3.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_1.xyz;\n    u_xlat27 = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD6.xy, _GlobalMipBias.x).x;\n    u_xlatb27 = u_xlat27<vs_TEXCOORD6.z;\n    u_xlat16_4.x = (u_xlatb27) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_13 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x + u_xlat16_13;\n    u_xlatb27 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb3 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb27 = u_xlatb27 || u_xlatb3;\n    u_xlat16_4.x = (u_xlatb27) ? 1.0 : u_xlat16_4.x;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat27 = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_8.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nbool u_xlatb3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_1.x = (u_xlatb27) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_1.y = (u_xlatb27) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_1.z = (u_xlatb27) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_28 = dot((-u_xlat16_1.xyz), u_xlat0.xyz);\n    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_28)) + (-u_xlat16_1.xyz);\n    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_28 = (-u_xlat16_3.w) * _Smoothness + 1.0;\n    u_xlat16_29 = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_29 = u_xlat16_28 * u_xlat16_29;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_29 = u_xlat16_29 * 6.0;\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);\n    u_xlat16_4.x = u_xlat16_2.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat5.xyz = u_xlat16_1.xyz + _MainLightPosition.xyz;\n    u_xlat16_1.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_19 = u_xlat16_3.w * _Smoothness + (-u_xlat16_10);\n    u_xlat16_19 = u_xlat16_19 + 1.0;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat16_3.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_8.xyz = vec3(u_xlat16_19) + (-u_xlat16_6.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_8.y;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_1.xyz = u_xlat3.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_1.xyz;\n    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlat16_4.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_4.x;\n    u_xlatb27 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb3 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb27 = u_xlatb27 || u_xlatb3;\n    u_xlat16_4.x = (u_xlatb27) ? 1.0 : u_xlat16_4.x;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat27 = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_8.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nvec3 u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_22;\nmediump float u_xlat16_28;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD6.xy, _GlobalMipBias.x).x;\n    u_xlatb0 = u_xlat0.x<vs_TEXCOORD6.z;\n    u_xlat16_1.x = (u_xlatb0) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_10 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_10;\n    u_xlatb0 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb9 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0 = u_xlatb9 || u_xlatb0;\n    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;\n    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;\n    u_xlat0.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat2.x = vs_TEXCOORD3.x;\n    u_xlat2.z = vs_TEXCOORD2.x;\n    u_xlat9.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat9.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xzy * vs_TEXCOORD3.www;\n    u_xlat2.y = u_xlat9.x;\n    u_xlat10_3.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_1.xy = u_xlat10_3.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_1.xy, u_xlat16_1.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_28 = sqrt(u_xlat16_28);\n    u_xlat16_1.z = max(u_xlat16_28, 1.00000002e-16);\n    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);\n    u_xlat3.y = u_xlat9.z;\n    u_xlat3.x = vs_TEXCOORD3.y;\n    u_xlat3.z = vs_TEXCOORD2.y;\n    u_xlat2.y = dot(u_xlat16_1.xyz, u_xlat3.xyz);\n    u_xlat9.x = vs_TEXCOORD3.z;\n    u_xlat9.z = vs_TEXCOORD2.z;\n    u_xlat2.z = dot(u_xlat16_1.xyz, u_xlat9.xyz);\n    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9.x = inversesqrt(u_xlat9.x);\n    u_xlat9.xyz = u_xlat9.xxx * u_xlat2.xyz;\n    u_xlat16_1.x = dot(u_xlat9.xyz, _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;\n    u_xlatb0 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb0) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb0) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb0) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_28 = dot((-u_xlat16_4.xyz), u_xlat9.xyz);\n    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n    u_xlat16_5.xyz = u_xlat9.xyz * (-vec3(u_xlat16_28)) + (-u_xlat16_4.xyz);\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_28 = (-u_xlat10_2.w) * _Smoothness + 1.0;\n    u_xlat16_31 = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_28 * u_xlat16_31;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat10_3 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat10_3.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat9.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = u_xlat10_2.w * _Smoothness + (-u_xlat16_13.x);\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat10_2.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_13.xxx * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_13.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_13.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_8.y;\n    u_xlat2.xyz = u_xlat16_4.xyz * vec3(u_xlat16_31);\n    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat9.xyz, u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);\n    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9.x * u_xlat9.x;\n    u_xlat9.x = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_8.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9.x * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nbvec3 u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat16_2.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat16_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_4.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_4.x;\n    u_xlat16_3.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_4.y;\n    u_xlat16_3.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_4.z;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30)) + (-u_xlat16_4.xyz);\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_30 = (-u_xlat16_1.w) * _Smoothness + 1.0;\n    u_xlat16_31 = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30 * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat16_2.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat2.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = u_xlat16_1.w * _Smoothness + (-u_xlat16_13.x);\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat16_1.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_13.xxx * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_13.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_13.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_30) * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_8.y;\n    u_xlat1.xyz = u_xlat16_4.xyz * vec3(u_xlat16_31);\n    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlat16_13.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_13.x = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_13.x;\n    u_xlatb27 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb1.x = vs_TEXCOORD6.z>=1.0;\n    u_xlatb27 = u_xlatb27 || u_xlatb1.x;\n    u_xlat16_13.x = (u_xlatb27) ? 1.0 : u_xlat16_13.x;\n    u_xlat16_22 = (-u_xlat16_13.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_13.x = u_xlat27 * u_xlat16_22 + u_xlat16_13.x;\n    u_xlat27 = u_xlat16_13.x * unity_LightData.z;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat27;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_8.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_30 / u_xlat0.x;\n    u_xlat16_30 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = min(u_xlat16_30, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30) + u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nlowp vec4 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec2 u_xlat16_9;\nvec3 u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_11;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_23;\nmediump float u_xlat16_31;\nmediump float u_xlat16_33;\nvoid main()\n{\n    u_xlat0.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD6.xy, _GlobalMipBias.x).x;\n    u_xlatb0 = u_xlat0.x<vs_TEXCOORD6.z;\n    u_xlat16_1.x = (u_xlatb0) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_11 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_11;\n    u_xlatb0 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb10 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0 = u_xlatb10 || u_xlatb0;\n    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;\n    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_11 + u_xlat16_1.x;\n    u_xlat0.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat10.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat10.x = inversesqrt(u_xlat10.x);\n    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_1.x = dot(u_xlat10.xyz, _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;\n    u_xlatb0 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb0) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb0) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb0) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_31 = dot((-u_xlat16_3.xyz), u_xlat10.xyz);\n    u_xlat16_31 = u_xlat16_31 + u_xlat16_31;\n    u_xlat16_4.xyz = u_xlat10.xyz * (-vec3(u_xlat16_31)) + (-u_xlat16_3.xyz);\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_31 = (-u_xlat10_2.w) * _Smoothness + 1.0;\n    u_xlat16_33 = (-u_xlat16_31) * 0.699999988 + 1.70000005;\n    u_xlat16_33 = u_xlat16_31 * u_xlat16_33;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat16_31 = max(u_xlat16_31, 0.0078125);\n    u_xlat16_33 = u_xlat16_33 * 6.0;\n    u_xlat10_4 = textureCube(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_33);\n    u_xlat16_33 = u_xlat10_4.w + -1.0;\n    u_xlat16_33 = unity_SpecCube0_HDR.w * u_xlat16_33 + 1.0;\n    u_xlat16_33 = max(u_xlat16_33, 0.0);\n    u_xlat16_33 = log2(u_xlat16_33);\n    u_xlat16_33 = u_xlat16_33 * unity_SpecCube0_HDR.y;\n    u_xlat16_33 = exp2(u_xlat16_33);\n    u_xlat16_33 = u_xlat16_33 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_4.xyz * vec3(u_xlat16_33);\n    u_xlat16_33 = dot(u_xlat10.xyz, u_xlat16_3.xyz);\n    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);\n    u_xlat6.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_33) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_13.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_23 = u_xlat10_2.w * _Smoothness + (-u_xlat16_13.x);\n    u_xlat16_23 = u_xlat16_23 + 1.0;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat16_7.xyz = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_8.xyz = u_xlat10_2.xyz * _BaseColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_13.xxx * u_xlat16_8.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_13.xyz = vec3(u_xlat16_23) + (-u_xlat16_7.xyz);\n    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + u_xlat16_7.xyz;\n    u_xlat16_9.xy = vec2(u_xlat16_31) * vec2(u_xlat16_31) + vec2(-1.0, 1.0);\n    u_xlat16_33 = float(1.0) / u_xlat16_9.y;\n    u_xlat2.xyz = u_xlat16_3.xyz * vec3(u_xlat16_33);\n    u_xlat16_3.xyz = u_xlat2.xyz * u_xlat16_5.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD8.xyz * u_xlat16_8.xyz + u_xlat16_3.xyz;\n    u_xlat0.x = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * u_xlat6.xyz;\n    u_xlat0.x = dot(u_xlat10.xyz, u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat10.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);\n    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat10.x * u_xlat10.x;\n    u_xlat10.x = max(u_xlat16_33, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_9.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat10.x * u_xlat0.x;\n    u_xlat16_33 = u_xlat16_31 * 4.0 + 2.0;\n    u_xlat16_31 = u_xlat16_31 * u_xlat16_31;\n    u_xlat0.x = u_xlat0.x * u_xlat16_33;\n    u_xlat0.x = u_xlat16_31 / u_xlat0.x;\n    u_xlat16_31 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = min(u_xlat16_31, 100.0);\n    u_xlat16_5.xyz = u_xlat16_7.xyz * vec3(u_xlat16_31) + u_xlat16_8.xyz;\n    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat16_3.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_8.xyz + u_xlat16_1.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nbool u_xlatb3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_19;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nmediump float u_xlat16_28;\nmediump float u_xlat16_29;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_1.x = (u_xlatb27) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_1.y = (u_xlatb27) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_1.z = (u_xlatb27) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat0.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_28 = dot((-u_xlat16_1.xyz), u_xlat0.xyz);\n    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n    u_xlat16_2.xyz = u_xlat0.xyz * (-vec3(u_xlat16_28)) + (-u_xlat16_1.xyz);\n    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_28 = (-u_xlat16_3.w) * _Smoothness + 1.0;\n    u_xlat16_29 = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_29 = u_xlat16_28 * u_xlat16_29;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_29 = u_xlat16_29 * 6.0;\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_2.xyz, u_xlat16_29);\n    u_xlat16_4.x = u_xlat16_2.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat16_2.xyz * u_xlat16_4.xxx;\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_1.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat5.xyz = u_xlat16_1.xyz + _MainLightPosition.xyz;\n    u_xlat16_1.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_1.x = u_xlat16_1.x * u_xlat16_1.x;\n    u_xlat16_10 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_19 = u_xlat16_3.w * _Smoothness + (-u_xlat16_10);\n    u_xlat16_19 = u_xlat16_19 + 1.0;\n    u_xlat16_19 = clamp(u_xlat16_19, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat16_3.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = vec3(u_xlat16_10) * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_8.xyz = vec3(u_xlat16_19) + (-u_xlat16_6.xyz);\n    u_xlat16_1.xyz = u_xlat16_1.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_8.y;\n    u_xlat3.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_1.xyz = u_xlat3.xyz * u_xlat16_4.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_1.xyz;\n    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlat16_4.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_4.x = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_4.x;\n    u_xlatb27 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb3 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb27 = u_xlatb27 || u_xlatb3;\n    u_xlat16_4.x = (u_xlatb27) ? 1.0 : u_xlat16_4.x;\n    u_xlat16_13 = (-u_xlat16_4.x) + 1.0;\n    u_xlat3.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat27 * u_xlat16_13 + u_xlat16_4.x;\n    u_xlat27 = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat27 * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat3.xyz = vec3(u_xlat27) * u_xlat5.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat3.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_8.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_7.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_1.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_7.xyz + u_xlat16_1.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nvec3 u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_22;\nmediump float u_xlat16_28;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD6.xy, _GlobalMipBias.x).x;\n    u_xlatb0 = u_xlat0.x<vs_TEXCOORD6.z;\n    u_xlat16_1.x = (u_xlatb0) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_10 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_10;\n    u_xlatb0 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb9 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0 = u_xlatb9 || u_xlatb0;\n    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;\n    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;\n    u_xlat0.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat2.x = vs_TEXCOORD3.x;\n    u_xlat2.z = vs_TEXCOORD2.x;\n    u_xlat9.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat9.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xzy * vs_TEXCOORD3.www;\n    u_xlat2.y = u_xlat9.x;\n    u_xlat10_3.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_1.xy = u_xlat10_3.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_1.xy, u_xlat16_1.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_28 = sqrt(u_xlat16_28);\n    u_xlat16_1.z = max(u_xlat16_28, 1.00000002e-16);\n    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);\n    u_xlat3.y = u_xlat9.z;\n    u_xlat3.x = vs_TEXCOORD3.y;\n    u_xlat3.z = vs_TEXCOORD2.y;\n    u_xlat2.y = dot(u_xlat16_1.xyz, u_xlat3.xyz);\n    u_xlat9.x = vs_TEXCOORD3.z;\n    u_xlat9.z = vs_TEXCOORD2.z;\n    u_xlat2.z = dot(u_xlat16_1.xyz, u_xlat9.xyz);\n    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9.x = inversesqrt(u_xlat9.x);\n    u_xlat9.xyz = u_xlat9.xxx * u_xlat2.xyz;\n    u_xlat16_1.x = dot(u_xlat9.xyz, _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;\n    u_xlatb0 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb0) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb0) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb0) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_28 = dot((-u_xlat16_4.xyz), u_xlat9.xyz);\n    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n    u_xlat16_5.xyz = u_xlat9.xyz * (-vec3(u_xlat16_28)) + (-u_xlat16_4.xyz);\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_28 = (-u_xlat10_2.w) * _Smoothness + 1.0;\n    u_xlat16_31 = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_28 * u_xlat16_31;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat10_3 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat10_3.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat9.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = u_xlat10_2.w * _Smoothness + (-u_xlat16_13.x);\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat10_2.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_13.xxx * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_13.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_13.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_8.y;\n    u_xlat2.xyz = u_xlat16_4.xyz * vec3(u_xlat16_31);\n    u_xlat16_4.xyz = u_xlat2.xyz * u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;\n    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * u_xlat3.xyz;\n    u_xlat0.x = dot(u_xlat9.xyz, u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);\n    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9.x * u_xlat9.x;\n    u_xlat9.x = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_8.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9.x * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_7.xyz;\n    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_7.xyz + u_xlat16_1.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nbvec3 u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nfloat u_xlat9;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat16_2.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat16_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_4.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_4.x;\n    u_xlat16_3.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_4.y;\n    u_xlat16_3.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_4.z;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30)) + (-u_xlat16_4.xyz);\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_30 = (-u_xlat16_1.w) * _Smoothness + 1.0;\n    u_xlat16_31 = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30 * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat16_2 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat16_2.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_2.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat2.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = u_xlat16_1.w * _Smoothness + (-u_xlat16_13.x);\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat16_1.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_13.xxx * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_13.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_13.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_30) * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_31 = float(1.0) / u_xlat16_8.y;\n    u_xlat1.xyz = u_xlat16_4.xyz * vec3(u_xlat16_31);\n    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlat16_13.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_13.x = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_13.x;\n    u_xlatb27 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb1.x = vs_TEXCOORD6.z>=1.0;\n    u_xlatb27 = u_xlatb27 || u_xlatb1.x;\n    u_xlat16_13.x = (u_xlatb27) ? 1.0 : u_xlat16_13.x;\n    u_xlat16_22 = (-u_xlat16_13.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_13.x = u_xlat27 * u_xlat16_22 + u_xlat16_13.x;\n    u_xlat27 = u_xlat16_13.x * unity_LightData.z;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat27;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat2.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_8.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_30 / u_xlat0.x;\n    u_xlat16_30 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = min(u_xlat16_30, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30) + u_xlat16_7.xyz;\n    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_7.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nint u_xlati1;\nint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nvec3 u_xlat9;\nvec3 u_xlat11;\nbool u_xlatb11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_24;\nmediump float u_xlat16_32;\nmediump float u_xlat16_34;\nint op_shl(int a, int b) { return int(floor(float(a) * pow(2.0, float(b)))); }\nivec2 op_shl(ivec2 a, ivec2 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); return a; }\nivec3 op_shl(ivec3 a, ivec3 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); return a; }\nivec4 op_shl(ivec4 a, ivec4 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); a.w = op_shl(a.w, b.w); return a; }\n\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\nvec4 hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return hlslcc_mtx4x4_MainLightWorldToShadow[i];\n#else\n#define d_ar hlslcc_mtx4x4_MainLightWorldToShadow\n    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = int(u_xlat16_2.x);\n    u_xlati1 = op_shl(int(u_xlatu1), 2);\n    u_xlat11.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 1)).xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(u_xlati1).xyz * vs_TEXCOORD1.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 2)).xyz * vs_TEXCOORD1.zzz + u_xlat11.xyz;\n    u_xlat1.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 3)).xyz;\n    u_xlat1.x = texture2D(_MainLightShadowmapTexture, u_xlat1.xy, _GlobalMipBias.x).x;\n    u_xlatb1 = u_xlat1.x<u_xlat1.z;\n    u_xlat16_2.x = (u_xlatb1) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_12 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_12;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb11 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb11 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_12 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_12 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat11.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat11.x = inversesqrt(u_xlat11.x);\n    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_2.x = dot(u_xlat11.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlatb1 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb1) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb1) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb1) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_32 = dot((-u_xlat16_4.xyz), u_xlat11.xyz);\n    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;\n    u_xlat16_5.xyz = u_xlat11.xyz * (-vec3(u_xlat16_32)) + (-u_xlat16_4.xyz);\n    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_32 = (-u_xlat10_0.w) * _Smoothness + 1.0;\n    u_xlat16_34 = (-u_xlat16_32) * 0.699999988 + 1.70000005;\n    u_xlat16_34 = u_xlat16_32 * u_xlat16_34;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = max(u_xlat16_32, 0.0078125);\n    u_xlat16_34 = u_xlat16_34 * 6.0;\n    u_xlat10_3 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_34);\n    u_xlat16_34 = u_xlat10_3.w + -1.0;\n    u_xlat16_34 = unity_SpecCube0_HDR.w * u_xlat16_34 + 1.0;\n    u_xlat16_34 = max(u_xlat16_34, 0.0);\n    u_xlat16_34 = log2(u_xlat16_34);\n    u_xlat16_34 = u_xlat16_34 * unity_SpecCube0_HDR.y;\n    u_xlat16_34 = exp2(u_xlat16_34);\n    u_xlat16_34 = u_xlat16_34 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(u_xlat16_34);\n    u_xlat16_34 = dot(u_xlat11.xyz, u_xlat16_4.xyz);\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_34) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_24 = u_xlat10_0.w * _Smoothness + (-u_xlat16_14.x);\n    u_xlat16_24 = u_xlat16_24 + 1.0;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_14.xyz = vec3(u_xlat16_24) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_32) * vec2(u_xlat16_32) + vec2(-1.0, 1.0);\n    u_xlat16_34 = float(1.0) / u_xlat16_8.y;\n    u_xlat9.xyz = u_xlat16_4.xyz * vec3(u_xlat16_34);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat9.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlat1.x = dot(u_xlat11.xyz, u_xlat3.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat11.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);\n    u_xlat16_34 = u_xlat11.x * u_xlat11.x;\n    u_xlat11.x = max(u_xlat16_34, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_8.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat11.x * u_xlat1.x;\n    u_xlat16_34 = u_xlat16_32 * 4.0 + 2.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat1.x = u_xlat1.x * u_xlat16_34;\n    u_xlat1.x = u_xlat16_32 / u_xlat1.x;\n    u_xlat16_32 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = min(u_xlat16_32, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_32) + u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nbool u_xlatb3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nvec3 u_xlat9;\nvec3 u_xlat11;\nbool u_xlatb11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_24;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << 2);\n    u_xlat11.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat11.xyz;\n    u_xlat1.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlatb31 = 0.0>=u_xlat1.z;\n    u_xlatb3 = u_xlat1.z>=1.0;\n    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);\n    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlatb11 = u_xlatb31 || u_xlatb3;\n    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_2.x;\n    u_xlat16_2.x = (u_xlatb11) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_12 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_12 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat11.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat11.x = inversesqrt(u_xlat11.x);\n    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_2.x = dot(u_xlat11.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlatb1 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb1) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb1) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb1) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_32 = dot((-u_xlat16_4.xyz), u_xlat11.xyz);\n    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;\n    u_xlat16_5.xyz = u_xlat11.xyz * (-vec3(u_xlat16_32)) + (-u_xlat16_4.xyz);\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_32 = (-u_xlat16_0.w) * _Smoothness + 1.0;\n    u_xlat16_34 = (-u_xlat16_32) * 0.699999988 + 1.70000005;\n    u_xlat16_34 = u_xlat16_32 * u_xlat16_34;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = max(u_xlat16_32, 0.0078125);\n    u_xlat16_34 = u_xlat16_34 * 6.0;\n    u_xlat16_3 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_34);\n    u_xlat16_34 = u_xlat16_3.w + -1.0;\n    u_xlat16_34 = unity_SpecCube0_HDR.w * u_xlat16_34 + 1.0;\n    u_xlat16_34 = max(u_xlat16_34, 0.0);\n    u_xlat16_34 = log2(u_xlat16_34);\n    u_xlat16_34 = u_xlat16_34 * unity_SpecCube0_HDR.y;\n    u_xlat16_34 = exp2(u_xlat16_34);\n    u_xlat16_34 = u_xlat16_34 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(u_xlat16_34);\n    u_xlat16_34 = dot(u_xlat11.xyz, u_xlat16_4.xyz);\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_34) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_24 = u_xlat16_0.w * _Smoothness + (-u_xlat16_14.x);\n    u_xlat16_24 = u_xlat16_24 + 1.0;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_14.xyz = vec3(u_xlat16_24) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_32) * vec2(u_xlat16_32) + vec2(-1.0, 1.0);\n    u_xlat16_34 = float(1.0) / u_xlat16_8.y;\n    u_xlat9.xyz = u_xlat16_4.xyz * vec3(u_xlat16_34);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat9.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlat1.x = dot(u_xlat11.xyz, u_xlat3.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat11.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);\n    u_xlat16_34 = u_xlat11.x * u_xlat11.x;\n    u_xlat11.x = max(u_xlat16_34, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_8.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat11.x * u_xlat1.x;\n    u_xlat16_34 = u_xlat16_32 * 4.0 + 2.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat1.x = u_xlat1.x * u_xlat16_34;\n    u_xlat1.x = u_xlat16_32 / u_xlat1.x;\n    u_xlat16_32 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = min(u_xlat16_32, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_32) + u_xlat16_7.xyz;\n    SV_Target0.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nint u_xlati1;\nint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nvec3 u_xlat4;\nlowp vec2 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec2 u_xlat16_9;\nvec3 u_xlat11;\nbool u_xlatb11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_25;\nmediump float u_xlat16_32;\nmediump float u_xlat16_35;\nint op_shl(int a, int b) { return int(floor(float(a) * pow(2.0, float(b)))); }\nivec2 op_shl(ivec2 a, ivec2 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); return a; }\nivec3 op_shl(ivec3 a, ivec3 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); return a; }\nivec4 op_shl(ivec4 a, ivec4 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); a.w = op_shl(a.w, b.w); return a; }\n\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\nvec4 hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return hlslcc_mtx4x4_MainLightWorldToShadow[i];\n#else\n#define d_ar hlslcc_mtx4x4_MainLightWorldToShadow\n    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = int(u_xlat16_2.x);\n    u_xlati1 = op_shl(int(u_xlatu1), 2);\n    u_xlat11.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 1)).xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(u_xlati1).xyz * vs_TEXCOORD1.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 2)).xyz * vs_TEXCOORD1.zzz + u_xlat11.xyz;\n    u_xlat1.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 3)).xyz;\n    u_xlat1.x = texture2D(_MainLightShadowmapTexture, u_xlat1.xy, _GlobalMipBias.x).x;\n    u_xlatb1 = u_xlat1.x<u_xlat1.z;\n    u_xlat16_2.x = (u_xlatb1) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_12 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_12;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb11 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb11 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_12 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_12 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat3.x = vs_TEXCOORD3.x;\n    u_xlat3.z = vs_TEXCOORD2.x;\n    u_xlat11.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat11.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat11.xyz);\n    u_xlat11.xyz = u_xlat11.xzy * vs_TEXCOORD3.www;\n    u_xlat3.y = u_xlat11.x;\n    u_xlat10_4.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_2.xy = u_xlat10_4.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_32 = min(u_xlat16_32, 1.0);\n    u_xlat16_32 = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = sqrt(u_xlat16_32);\n    u_xlat16_2.z = max(u_xlat16_32, 1.00000002e-16);\n    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat4.y = u_xlat11.z;\n    u_xlat4.x = vs_TEXCOORD3.y;\n    u_xlat4.z = vs_TEXCOORD2.y;\n    u_xlat3.y = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat11.x = vs_TEXCOORD3.z;\n    u_xlat11.z = vs_TEXCOORD2.z;\n    u_xlat3.z = dot(u_xlat16_2.xyz, u_xlat11.xyz);\n    u_xlat11.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat11.x = inversesqrt(u_xlat11.x);\n    u_xlat11.xyz = u_xlat11.xxx * u_xlat3.xyz;\n    u_xlat16_2.x = dot(u_xlat11.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlatb1 = unity_OrthoParams.w==0.0;\n    u_xlat16_5.x = (u_xlatb1) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_5.y = (u_xlatb1) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_5.z = (u_xlatb1) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_32 = dot((-u_xlat16_5.xyz), u_xlat11.xyz);\n    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;\n    u_xlat16_6.xyz = u_xlat11.xyz * (-vec3(u_xlat16_32)) + (-u_xlat16_5.xyz);\n    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_32 = (-u_xlat10_0.w) * _Smoothness + 1.0;\n    u_xlat16_35 = (-u_xlat16_32) * 0.699999988 + 1.70000005;\n    u_xlat16_35 = u_xlat16_32 * u_xlat16_35;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = max(u_xlat16_32, 0.0078125);\n    u_xlat16_35 = u_xlat16_35 * 6.0;\n    u_xlat10_3 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_35);\n    u_xlat16_35 = u_xlat10_3.w + -1.0;\n    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;\n    u_xlat16_35 = max(u_xlat16_35, 0.0);\n    u_xlat16_35 = log2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.y;\n    u_xlat16_35 = exp2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;\n    u_xlat16_6.xyz = u_xlat10_3.xyz * vec3(u_xlat16_35);\n    u_xlat16_35 = dot(u_xlat11.xyz, u_xlat16_5.xyz);\n    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_5.xyz + _MainLightPosition.xyz;\n    u_xlat16_5.x = (-u_xlat16_35) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_25 = u_xlat10_0.w * _Smoothness + (-u_xlat16_15.x);\n    u_xlat16_25 = u_xlat16_25 + 1.0;\n    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_8.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_15.xxx * u_xlat16_8.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_15.xyz = vec3(u_xlat16_25) + (-u_xlat16_7.xyz);\n    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_15.xyz + u_xlat16_7.xyz;\n    u_xlat16_9.xy = vec2(u_xlat16_32) * vec2(u_xlat16_32) + vec2(-1.0, 1.0);\n    u_xlat16_35 = float(1.0) / u_xlat16_9.y;\n    u_xlat4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_35);\n    u_xlat16_5.xyz = u_xlat4.xyz * u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vs_TEXCOORD8.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlat1.x = dot(u_xlat11.xyz, u_xlat3.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat11.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);\n    u_xlat16_35 = u_xlat11.x * u_xlat11.x;\n    u_xlat11.x = max(u_xlat16_35, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_9.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat11.x * u_xlat1.x;\n    u_xlat16_35 = u_xlat16_32 * 4.0 + 2.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat1.x = u_xlat1.x * u_xlat16_35;\n    u_xlat1.x = u_xlat16_32 / u_xlat1.x;\n    u_xlat16_32 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = min(u_xlat16_32, 100.0);\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbvec3 u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nbool u_xlatb3;\nvec3 u_xlat4;\nmediump vec2 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec2 u_xlat16_10;\nvec3 u_xlat12;\nbool u_xlatb12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_17;\nfloat u_xlat34;\nbool u_xlatb34;\nmediump float u_xlat16_35;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << 2);\n    u_xlat12.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat12.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat12.xyz;\n    u_xlat12.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat12.xyz;\n    u_xlat1.xyz = u_xlat12.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlatb34 = 0.0>=u_xlat1.z;\n    u_xlatb3 = u_xlat1.z>=1.0;\n    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);\n    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlatb12 = u_xlatb34 || u_xlatb3;\n    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;\n    u_xlat16_2.x = (u_xlatb12) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_13 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_13 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat3.x = vs_TEXCOORD3.x;\n    u_xlat3.z = vs_TEXCOORD2.x;\n    u_xlat12.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat12.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat12.xyz);\n    u_xlat12.xyz = u_xlat12.xzy * vs_TEXCOORD3.www;\n    u_xlat3.y = u_xlat12.x;\n    u_xlat16_4.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_2.xy = u_xlat16_4.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_35 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_35 = min(u_xlat16_35, 1.0);\n    u_xlat16_35 = (-u_xlat16_35) + 1.0;\n    u_xlat16_35 = sqrt(u_xlat16_35);\n    u_xlat16_2.z = max(u_xlat16_35, 1.00000002e-16);\n    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat4.y = u_xlat12.z;\n    u_xlat4.x = vs_TEXCOORD3.y;\n    u_xlat4.z = vs_TEXCOORD2.y;\n    u_xlat3.y = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat12.x = vs_TEXCOORD3.z;\n    u_xlat12.z = vs_TEXCOORD2.z;\n    u_xlat3.z = dot(u_xlat16_2.xyz, u_xlat12.xyz);\n    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat0.xyz = u_xlat12.xxx * u_xlat3.xyz;\n    u_xlat16_2.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_6.xyz = log2(abs(u_xlat16_5.xyz));\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_5.xyzx).xyz;\n    u_xlat16_5.x = (u_xlatb1.x) ? u_xlat16_7.x : u_xlat16_6.x;\n    u_xlat16_5.y = (u_xlatb1.y) ? u_xlat16_7.y : u_xlat16_6.y;\n    u_xlat16_5.z = (u_xlatb1.z) ? u_xlat16_7.z : u_xlat16_6.z;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;\n    u_xlatb34 = unity_OrthoParams.w==0.0;\n    u_xlat16_6.x = (u_xlatb34) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_6.y = (u_xlatb34) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_6.z = (u_xlatb34) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_35 = dot((-u_xlat16_6.xyz), u_xlat0.xyz);\n    u_xlat16_35 = u_xlat16_35 + u_xlat16_35;\n    u_xlat16_7.xyz = u_xlat0.xyz * (-vec3(u_xlat16_35)) + (-u_xlat16_6.xyz);\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_35 = (-u_xlat16_1.w) * _Smoothness + 1.0;\n    u_xlat16_38 = (-u_xlat16_35) * 0.699999988 + 1.70000005;\n    u_xlat16_38 = u_xlat16_35 * u_xlat16_38;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_35 = max(u_xlat16_35, 0.0078125);\n    u_xlat16_38 = u_xlat16_38 * 6.0;\n    u_xlat16_3 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_38);\n    u_xlat16_38 = u_xlat16_3.w + -1.0;\n    u_xlat16_38 = unity_SpecCube0_HDR.w * u_xlat16_38 + 1.0;\n    u_xlat16_38 = max(u_xlat16_38, 0.0);\n    u_xlat16_38 = log2(u_xlat16_38);\n    u_xlat16_38 = u_xlat16_38 * unity_SpecCube0_HDR.y;\n    u_xlat16_38 = exp2(u_xlat16_38);\n    u_xlat16_38 = u_xlat16_38 * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz = u_xlat16_3.xyz * vec3(u_xlat16_38);\n    u_xlat16_38 = dot(u_xlat0.xyz, u_xlat16_6.xyz);\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_6.xyz + _MainLightPosition.xyz;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_6.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_17 = u_xlat16_1.w * _Smoothness + (-u_xlat16_6.x);\n    u_xlat16_17 = u_xlat16_17 + 1.0;\n    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_9.xyz = u_xlat16_1.xyz * _BaseColor.xyz;\n    u_xlat16_6.xzw = u_xlat16_6.xxx * u_xlat16_9.xyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_9.xyz = vec3(u_xlat16_17) + (-u_xlat16_8.xyz);\n    u_xlat16_9.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_10.xy = vec2(u_xlat16_35) * vec2(u_xlat16_35) + vec2(-1.0, 1.0);\n    u_xlat16_38 = float(1.0) / u_xlat16_10.y;\n    u_xlat1.xyz = u_xlat16_9.xyz * vec3(u_xlat16_38);\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xzw + u_xlat16_7.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlat34 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);\n    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_38 = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_38, 0.100000001);\n    u_xlat12.x = u_xlat34 * u_xlat34;\n    u_xlat12.x = u_xlat12.x * u_xlat16_10.x + 1.00001001;\n    u_xlat12.x = u_xlat12.x * u_xlat12.x;\n    u_xlat1.x = u_xlat1.x * u_xlat12.x;\n    u_xlat16_38 = u_xlat16_35 * 4.0 + 2.0;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat1.x = u_xlat1.x * u_xlat16_38;\n    u_xlat1.x = u_xlat16_35 / u_xlat1.x;\n    u_xlat16_35 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_35 = max(u_xlat16_35, 0.0);\n    u_xlat16_35 = min(u_xlat16_35, 100.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_35) + u_xlat16_6.xzw;\n    SV_Target0.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlatb1.x = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1.x) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nint u_xlati1;\nint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nvec3 u_xlat9;\nvec3 u_xlat11;\nbool u_xlatb11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_24;\nmediump float u_xlat16_32;\nmediump float u_xlat16_34;\nint op_shl(int a, int b) { return int(floor(float(a) * pow(2.0, float(b)))); }\nivec2 op_shl(ivec2 a, ivec2 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); return a; }\nivec3 op_shl(ivec3 a, ivec3 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); return a; }\nivec4 op_shl(ivec4 a, ivec4 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); a.w = op_shl(a.w, b.w); return a; }\n\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\nvec4 hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return hlslcc_mtx4x4_MainLightWorldToShadow[i];\n#else\n#define d_ar hlslcc_mtx4x4_MainLightWorldToShadow\n    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = int(u_xlat16_2.x);\n    u_xlati1 = op_shl(int(u_xlatu1), 2);\n    u_xlat11.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 1)).xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(u_xlati1).xyz * vs_TEXCOORD1.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 2)).xyz * vs_TEXCOORD1.zzz + u_xlat11.xyz;\n    u_xlat1.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 3)).xyz;\n    u_xlat1.x = texture2D(_MainLightShadowmapTexture, u_xlat1.xy, _GlobalMipBias.x).x;\n    u_xlatb1 = u_xlat1.x<u_xlat1.z;\n    u_xlat16_2.x = (u_xlatb1) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_12 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_12;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb11 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb11 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_12 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_12 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat11.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat11.x = inversesqrt(u_xlat11.x);\n    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_2.x = dot(u_xlat11.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlatb1 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb1) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb1) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb1) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_32 = dot((-u_xlat16_4.xyz), u_xlat11.xyz);\n    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;\n    u_xlat16_5.xyz = u_xlat11.xyz * (-vec3(u_xlat16_32)) + (-u_xlat16_4.xyz);\n    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_32 = (-u_xlat10_0.w) * _Smoothness + 1.0;\n    u_xlat16_34 = (-u_xlat16_32) * 0.699999988 + 1.70000005;\n    u_xlat16_34 = u_xlat16_32 * u_xlat16_34;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = max(u_xlat16_32, 0.0078125);\n    u_xlat16_34 = u_xlat16_34 * 6.0;\n    u_xlat10_3 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_34);\n    u_xlat16_34 = u_xlat10_3.w + -1.0;\n    u_xlat16_34 = unity_SpecCube0_HDR.w * u_xlat16_34 + 1.0;\n    u_xlat16_34 = max(u_xlat16_34, 0.0);\n    u_xlat16_34 = log2(u_xlat16_34);\n    u_xlat16_34 = u_xlat16_34 * unity_SpecCube0_HDR.y;\n    u_xlat16_34 = exp2(u_xlat16_34);\n    u_xlat16_34 = u_xlat16_34 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_3.xyz * vec3(u_xlat16_34);\n    u_xlat16_34 = dot(u_xlat11.xyz, u_xlat16_4.xyz);\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_34) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_24 = u_xlat10_0.w * _Smoothness + (-u_xlat16_14.x);\n    u_xlat16_24 = u_xlat16_24 + 1.0;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_14.xyz = vec3(u_xlat16_24) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_32) * vec2(u_xlat16_32) + vec2(-1.0, 1.0);\n    u_xlat16_34 = float(1.0) / u_xlat16_8.y;\n    u_xlat9.xyz = u_xlat16_4.xyz * vec3(u_xlat16_34);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat9.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlat1.x = dot(u_xlat11.xyz, u_xlat3.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat11.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);\n    u_xlat16_34 = u_xlat11.x * u_xlat11.x;\n    u_xlat11.x = max(u_xlat16_34, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_8.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat11.x * u_xlat1.x;\n    u_xlat16_34 = u_xlat16_32 * 4.0 + 2.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat1.x = u_xlat1.x * u_xlat16_34;\n    u_xlat1.x = u_xlat16_32 / u_xlat1.x;\n    u_xlat16_32 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = min(u_xlat16_32, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_32) + u_xlat16_7.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_7.xyz + u_xlat16_2.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump float u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nbool u_xlatb3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nvec3 u_xlat9;\nvec3 u_xlat11;\nbool u_xlatb11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_14;\nmediump float u_xlat16_24;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << 2);\n    u_xlat11.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat11.xyz;\n    u_xlat1.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlatb31 = 0.0>=u_xlat1.z;\n    u_xlatb3 = u_xlat1.z>=1.0;\n    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);\n    u_xlat16_1 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlatb11 = u_xlatb31 || u_xlatb3;\n    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_1 * _MainLightShadowParams.x + u_xlat16_2.x;\n    u_xlat16_2.x = (u_xlatb11) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_12 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_12 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat11.x = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat11.x = inversesqrt(u_xlat11.x);\n    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;\n    u_xlat16_2.x = dot(u_xlat11.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlatb1 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb1) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb1) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb1) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_32 = dot((-u_xlat16_4.xyz), u_xlat11.xyz);\n    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;\n    u_xlat16_5.xyz = u_xlat11.xyz * (-vec3(u_xlat16_32)) + (-u_xlat16_4.xyz);\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_32 = (-u_xlat16_0.w) * _Smoothness + 1.0;\n    u_xlat16_34 = (-u_xlat16_32) * 0.699999988 + 1.70000005;\n    u_xlat16_34 = u_xlat16_32 * u_xlat16_34;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = max(u_xlat16_32, 0.0078125);\n    u_xlat16_34 = u_xlat16_34 * 6.0;\n    u_xlat16_3 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_34);\n    u_xlat16_34 = u_xlat16_3.w + -1.0;\n    u_xlat16_34 = unity_SpecCube0_HDR.w * u_xlat16_34 + 1.0;\n    u_xlat16_34 = max(u_xlat16_34, 0.0);\n    u_xlat16_34 = log2(u_xlat16_34);\n    u_xlat16_34 = u_xlat16_34 * unity_SpecCube0_HDR.y;\n    u_xlat16_34 = exp2(u_xlat16_34);\n    u_xlat16_34 = u_xlat16_34 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(u_xlat16_34);\n    u_xlat16_34 = dot(u_xlat11.xyz, u_xlat16_4.xyz);\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_34) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_14.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_24 = u_xlat16_0.w * _Smoothness + (-u_xlat16_14.x);\n    u_xlat16_24 = u_xlat16_24 + 1.0;\n    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);\n    u_xlat16_6.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = u_xlat16_0.xyz * _BaseColor.xyz;\n    u_xlat16_7.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_14.xyz = vec3(u_xlat16_24) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + u_xlat16_6.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_32) * vec2(u_xlat16_32) + vec2(-1.0, 1.0);\n    u_xlat16_34 = float(1.0) / u_xlat16_8.y;\n    u_xlat9.xyz = u_xlat16_4.xyz * vec3(u_xlat16_34);\n    u_xlat16_4.xyz = u_xlat16_5.xyz * u_xlat9.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_7.xyz + u_xlat16_4.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlat1.x = dot(u_xlat11.xyz, u_xlat3.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat11.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);\n    u_xlat16_34 = u_xlat11.x * u_xlat11.x;\n    u_xlat11.x = max(u_xlat16_34, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_8.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat11.x * u_xlat1.x;\n    u_xlat16_34 = u_xlat16_32 * 4.0 + 2.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat1.x = u_xlat1.x * u_xlat16_34;\n    u_xlat1.x = u_xlat16_32 / u_xlat1.x;\n    u_xlat16_32 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = min(u_xlat16_32, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_32) + u_xlat16_7.xyz;\n    u_xlat16_2.xyz = u_xlat16_5.xyz * u_xlat16_2.xyz + u_xlat16_4.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_7.xyz + u_xlat16_2.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nint u_xlati1;\nint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nlowp vec4 u_xlat10_3;\nvec3 u_xlat4;\nlowp vec2 u_xlat10_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec2 u_xlat16_9;\nvec3 u_xlat11;\nbool u_xlatb11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_25;\nmediump float u_xlat16_32;\nmediump float u_xlat16_35;\nint op_shl(int a, int b) { return int(floor(float(a) * pow(2.0, float(b)))); }\nivec2 op_shl(ivec2 a, ivec2 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); return a; }\nivec3 op_shl(ivec3 a, ivec3 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); return a; }\nivec4 op_shl(ivec4 a, ivec4 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); a.w = op_shl(a.w, b.w); return a; }\n\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\nvec4 hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return hlslcc_mtx4x4_MainLightWorldToShadow[i];\n#else\n#define d_ar hlslcc_mtx4x4_MainLightWorldToShadow\n    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = int(u_xlat16_2.x);\n    u_xlati1 = op_shl(int(u_xlatu1), 2);\n    u_xlat11.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 1)).xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(u_xlati1).xyz * vs_TEXCOORD1.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 2)).xyz * vs_TEXCOORD1.zzz + u_xlat11.xyz;\n    u_xlat1.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 3)).xyz;\n    u_xlat1.x = texture2D(_MainLightShadowmapTexture, u_xlat1.xy, _GlobalMipBias.x).x;\n    u_xlatb1 = u_xlat1.x<u_xlat1.z;\n    u_xlat16_2.x = (u_xlatb1) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_12 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_12;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb11 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb11 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_12 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_12 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat3.x = vs_TEXCOORD3.x;\n    u_xlat3.z = vs_TEXCOORD2.x;\n    u_xlat11.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat11.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat11.xyz);\n    u_xlat11.xyz = u_xlat11.xzy * vs_TEXCOORD3.www;\n    u_xlat3.y = u_xlat11.x;\n    u_xlat10_4.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_2.xy = u_xlat10_4.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_32 = min(u_xlat16_32, 1.0);\n    u_xlat16_32 = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = sqrt(u_xlat16_32);\n    u_xlat16_2.z = max(u_xlat16_32, 1.00000002e-16);\n    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat4.y = u_xlat11.z;\n    u_xlat4.x = vs_TEXCOORD3.y;\n    u_xlat4.z = vs_TEXCOORD2.y;\n    u_xlat3.y = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat11.x = vs_TEXCOORD3.z;\n    u_xlat11.z = vs_TEXCOORD2.z;\n    u_xlat3.z = dot(u_xlat16_2.xyz, u_xlat11.xyz);\n    u_xlat11.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat11.x = inversesqrt(u_xlat11.x);\n    u_xlat11.xyz = u_xlat11.xxx * u_xlat3.xyz;\n    u_xlat16_2.x = dot(u_xlat11.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlatb1 = unity_OrthoParams.w==0.0;\n    u_xlat16_5.x = (u_xlatb1) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_5.y = (u_xlatb1) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_5.z = (u_xlatb1) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_32 = dot((-u_xlat16_5.xyz), u_xlat11.xyz);\n    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;\n    u_xlat16_6.xyz = u_xlat11.xyz * (-vec3(u_xlat16_32)) + (-u_xlat16_5.xyz);\n    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_32 = (-u_xlat10_0.w) * _Smoothness + 1.0;\n    u_xlat16_35 = (-u_xlat16_32) * 0.699999988 + 1.70000005;\n    u_xlat16_35 = u_xlat16_32 * u_xlat16_35;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = max(u_xlat16_32, 0.0078125);\n    u_xlat16_35 = u_xlat16_35 * 6.0;\n    u_xlat10_3 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_35);\n    u_xlat16_35 = u_xlat10_3.w + -1.0;\n    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;\n    u_xlat16_35 = max(u_xlat16_35, 0.0);\n    u_xlat16_35 = log2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.y;\n    u_xlat16_35 = exp2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;\n    u_xlat16_6.xyz = u_xlat10_3.xyz * vec3(u_xlat16_35);\n    u_xlat16_35 = dot(u_xlat11.xyz, u_xlat16_5.xyz);\n    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_5.xyz + _MainLightPosition.xyz;\n    u_xlat16_5.x = (-u_xlat16_35) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_15.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_25 = u_xlat10_0.w * _Smoothness + (-u_xlat16_15.x);\n    u_xlat16_25 = u_xlat16_25 + 1.0;\n    u_xlat16_25 = clamp(u_xlat16_25, 0.0, 1.0);\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_8.xyz = u_xlat10_0.xyz * _BaseColor.xyz;\n    u_xlat16_8.xyz = u_xlat16_15.xxx * u_xlat16_8.xyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_15.xyz = vec3(u_xlat16_25) + (-u_xlat16_7.xyz);\n    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_15.xyz + u_xlat16_7.xyz;\n    u_xlat16_9.xy = vec2(u_xlat16_32) * vec2(u_xlat16_32) + vec2(-1.0, 1.0);\n    u_xlat16_35 = float(1.0) / u_xlat16_9.y;\n    u_xlat4.xyz = u_xlat16_5.xyz * vec3(u_xlat16_35);\n    u_xlat16_5.xyz = u_xlat4.xyz * u_xlat16_6.xyz;\n    u_xlat16_5.xyz = vs_TEXCOORD8.xyz * u_xlat16_8.xyz + u_xlat16_5.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlat1.x = dot(u_xlat11.xyz, u_xlat3.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat11.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);\n    u_xlat16_35 = u_xlat11.x * u_xlat11.x;\n    u_xlat11.x = max(u_xlat16_35, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_9.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat11.x * u_xlat1.x;\n    u_xlat16_35 = u_xlat16_32 * 4.0 + 2.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat1.x = u_xlat1.x * u_xlat16_35;\n    u_xlat1.x = u_xlat16_32 / u_xlat1.x;\n    u_xlat16_32 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = min(u_xlat16_32, 100.0);\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_32) + u_xlat16_8.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_8.xyz + u_xlat16_2.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbvec3 u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nbool u_xlatb3;\nvec3 u_xlat4;\nmediump vec2 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec4 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec2 u_xlat16_10;\nvec3 u_xlat12;\nbool u_xlatb12;\nmediump float u_xlat16_13;\nmediump float u_xlat16_17;\nfloat u_xlat34;\nbool u_xlatb34;\nmediump float u_xlat16_35;\nmediump float u_xlat16_38;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << 2);\n    u_xlat12.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat12.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat12.xyz;\n    u_xlat12.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat12.xyz;\n    u_xlat1.xyz = u_xlat12.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlatb34 = 0.0>=u_xlat1.z;\n    u_xlatb3 = u_xlat1.z>=1.0;\n    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);\n    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlatb12 = u_xlatb34 || u_xlatb3;\n    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;\n    u_xlat16_2.x = (u_xlatb12) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_13 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_13 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat3.x = vs_TEXCOORD3.x;\n    u_xlat3.z = vs_TEXCOORD2.x;\n    u_xlat12.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat12.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat12.xyz);\n    u_xlat12.xyz = u_xlat12.xzy * vs_TEXCOORD3.www;\n    u_xlat3.y = u_xlat12.x;\n    u_xlat16_4.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_2.xy = u_xlat16_4.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_35 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_35 = min(u_xlat16_35, 1.0);\n    u_xlat16_35 = (-u_xlat16_35) + 1.0;\n    u_xlat16_35 = sqrt(u_xlat16_35);\n    u_xlat16_2.z = max(u_xlat16_35, 1.00000002e-16);\n    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat4.y = u_xlat12.z;\n    u_xlat4.x = vs_TEXCOORD3.y;\n    u_xlat4.z = vs_TEXCOORD2.y;\n    u_xlat3.y = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat12.x = vs_TEXCOORD3.z;\n    u_xlat12.z = vs_TEXCOORD2.z;\n    u_xlat3.z = dot(u_xlat16_2.xyz, u_xlat12.xyz);\n    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat12.x = inversesqrt(u_xlat12.x);\n    u_xlat0.xyz = u_xlat12.xxx * u_xlat3.xyz;\n    u_xlat16_2.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_6.xyz = log2(abs(u_xlat16_5.xyz));\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_5.xyzx).xyz;\n    u_xlat16_5.x = (u_xlatb1.x) ? u_xlat16_7.x : u_xlat16_6.x;\n    u_xlat16_5.y = (u_xlatb1.y) ? u_xlat16_7.y : u_xlat16_6.y;\n    u_xlat16_5.z = (u_xlatb1.z) ? u_xlat16_7.z : u_xlat16_6.z;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat34 = inversesqrt(u_xlat34);\n    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;\n    u_xlatb34 = unity_OrthoParams.w==0.0;\n    u_xlat16_6.x = (u_xlatb34) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_6.y = (u_xlatb34) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_6.z = (u_xlatb34) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_35 = dot((-u_xlat16_6.xyz), u_xlat0.xyz);\n    u_xlat16_35 = u_xlat16_35 + u_xlat16_35;\n    u_xlat16_7.xyz = u_xlat0.xyz * (-vec3(u_xlat16_35)) + (-u_xlat16_6.xyz);\n    u_xlat16_1 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_35 = (-u_xlat16_1.w) * _Smoothness + 1.0;\n    u_xlat16_38 = (-u_xlat16_35) * 0.699999988 + 1.70000005;\n    u_xlat16_38 = u_xlat16_35 * u_xlat16_38;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_35 = max(u_xlat16_35, 0.0078125);\n    u_xlat16_38 = u_xlat16_38 * 6.0;\n    u_xlat16_3 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_38);\n    u_xlat16_38 = u_xlat16_3.w + -1.0;\n    u_xlat16_38 = unity_SpecCube0_HDR.w * u_xlat16_38 + 1.0;\n    u_xlat16_38 = max(u_xlat16_38, 0.0);\n    u_xlat16_38 = log2(u_xlat16_38);\n    u_xlat16_38 = u_xlat16_38 * unity_SpecCube0_HDR.y;\n    u_xlat16_38 = exp2(u_xlat16_38);\n    u_xlat16_38 = u_xlat16_38 * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz = u_xlat16_3.xyz * vec3(u_xlat16_38);\n    u_xlat16_38 = dot(u_xlat0.xyz, u_xlat16_6.xyz);\n    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_6.xyz + _MainLightPosition.xyz;\n    u_xlat16_38 = (-u_xlat16_38) + 1.0;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_38 = u_xlat16_38 * u_xlat16_38;\n    u_xlat16_6.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_17 = u_xlat16_1.w * _Smoothness + (-u_xlat16_6.x);\n    u_xlat16_17 = u_xlat16_17 + 1.0;\n    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);\n    u_xlat16_8.xyz = u_xlat16_1.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_9.xyz = u_xlat16_1.xyz * _BaseColor.xyz;\n    u_xlat16_6.xzw = u_xlat16_6.xxx * u_xlat16_9.xyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_9.xyz = vec3(u_xlat16_17) + (-u_xlat16_8.xyz);\n    u_xlat16_9.xyz = vec3(u_xlat16_38) * u_xlat16_9.xyz + u_xlat16_8.xyz;\n    u_xlat16_10.xy = vec2(u_xlat16_35) * vec2(u_xlat16_35) + vec2(-1.0, 1.0);\n    u_xlat16_38 = float(1.0) / u_xlat16_10.y;\n    u_xlat1.xyz = u_xlat16_9.xyz * vec3(u_xlat16_38);\n    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_7.xyz;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_6.xzw + u_xlat16_7.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat1.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlat34 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);\n    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_38 = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_38, 0.100000001);\n    u_xlat12.x = u_xlat34 * u_xlat34;\n    u_xlat12.x = u_xlat12.x * u_xlat16_10.x + 1.00001001;\n    u_xlat12.x = u_xlat12.x * u_xlat12.x;\n    u_xlat1.x = u_xlat1.x * u_xlat12.x;\n    u_xlat16_38 = u_xlat16_35 * 4.0 + 2.0;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat1.x = u_xlat1.x * u_xlat16_38;\n    u_xlat1.x = u_xlat16_35 / u_xlat1.x;\n    u_xlat16_35 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_35 = max(u_xlat16_35, 0.0);\n    u_xlat16_35 = min(u_xlat16_35, 100.0);\n    u_xlat16_7.xyz = u_xlat16_8.xyz * vec3(u_xlat16_35) + u_xlat16_6.xzw;\n    u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_6.xzw + u_xlat16_2.xyz;\n    u_xlatb1.x = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1.x) ? _BaseColor.w : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _EmissionColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_8;\nfloat u_xlat9;\nmediump float u_xlat16_12;\nmediump float u_xlat16_21;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat10_2.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat10_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30 = dot((-u_xlat16_3.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_4.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30)) + (-u_xlat16_3.xyz);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_31 = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30 * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_4.xyz, u_xlat16_31);\n    u_xlat16_4.x = u_xlat10_1.w + -1.0;\n    u_xlat16_4.x = unity_SpecCube0_HDR.w * u_xlat16_4.x + 1.0;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = log2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.y;\n    u_xlat16_4.x = exp2(u_xlat16_4.x);\n    u_xlat16_4.x = u_xlat16_4.x * unity_SpecCube0_HDR.x;\n    u_xlat16_4.xyz = u_xlat10_1.xyz * u_xlat16_4.xxx;\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_3.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat16_3.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_3.x = u_xlat16_3.x * u_xlat16_3.x;\n    u_xlat16_12 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_21 = (-u_xlat16_12) + _Smoothness;\n    u_xlat16_21 = u_xlat16_21 + 1.0;\n    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_5.xyz = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat10_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_5.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_5.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_6.xyz = vec3(u_xlat16_21) + (-u_xlat16_5.xyz);\n    u_xlat16_6.xyz = u_xlat16_3.xxx * u_xlat16_6.xyz + u_xlat16_5.xyz;\n    u_xlat16_3.xz = vec2(u_xlat16_30) * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_21 = float(1.0) / u_xlat16_3.z;\n    u_xlat7.xyz = u_xlat16_6.xyz * vec3(u_xlat16_21);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat7.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_12) * u_xlat16_2.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_6.xyz + u_xlat16_4.xyz;\n    u_xlat16_12 = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_12 = clamp(u_xlat16_12, 0.0, 1.0);\n    u_xlat16_12 = u_xlat16_12 * unity_LightData.z;\n    u_xlat16_8.xyz = vec3(u_xlat16_12) * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_12 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_12, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_3.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_3.x = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_12 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_3.x;\n    u_xlat0.x = u_xlat16_12 / u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);\n    u_xlat16_3.x = min(u_xlat16_3.x, 100.0);\n    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_3.xxx + u_xlat16_6.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_8.xyz + u_xlat16_4.xyz;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nbvec3 u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat16_2.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat16_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_4.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_4.x;\n    u_xlat16_3.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_4.y;\n    u_xlat16_3.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_4.z;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30)) + (-u_xlat16_4.xyz);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_31 = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30 * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat16_1.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_30) * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_2.yzw;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_30 / u_xlat0.x;\n    u_xlat16_30 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = min(u_xlat16_30, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _EmissionColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _EmissionMap;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nlowp vec4 u_xlat10_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nlowp vec4 u_xlat10_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat10_2.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat10_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat16_3.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);\n    u_xlat16_3.x = u_xlat16_3.x * unity_LightData.z;\n    u_xlat16_3.xyz = u_xlat16_3.xxx * _MainLightColor.xyz;\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30)) + (-u_xlat16_4.xyz);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_31 = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30 * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat10_1 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat10_1.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat10_2 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat10_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_30) * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_2.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_30 / u_xlat0.x;\n    u_xlat16_30 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = min(u_xlat16_30, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_3.xyz + u_xlat16_4.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nbvec3 u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nbool u_xlatb27;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat16_2.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat16_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_4.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_4.x;\n    u_xlat16_3.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_4.y;\n    u_xlat16_3.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_4.z;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30)) + (-u_xlat16_4.xyz);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_31 = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30 * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat16_1.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_30) * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_2.yzw;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat16_4.x * unity_LightData.z;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_30 / u_xlat0.x;\n    u_xlat16_30 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = min(u_xlat16_30, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    u_xlat16_3.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_3.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _EmissionColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _EmissionMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nmediump float u_xlat16_28;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD6.xy, _GlobalMipBias.x).x;\n    u_xlatb0 = u_xlat0.x<vs_TEXCOORD6.z;\n    u_xlat16_1.x = (u_xlatb0) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_10 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_10;\n    u_xlatb0 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb9 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0 = u_xlatb9 || u_xlatb0;\n    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;\n    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;\n    u_xlat0.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat2.x = vs_TEXCOORD3.x;\n    u_xlat2.z = vs_TEXCOORD2.x;\n    u_xlat9.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat9.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xzy * vs_TEXCOORD3.www;\n    u_xlat2.y = u_xlat9.x;\n    u_xlat10_3.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_1.xy = u_xlat10_3.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_1.xy, u_xlat16_1.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_28 = sqrt(u_xlat16_28);\n    u_xlat16_1.z = max(u_xlat16_28, 1.00000002e-16);\n    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);\n    u_xlat3.y = u_xlat9.z;\n    u_xlat3.x = vs_TEXCOORD3.y;\n    u_xlat3.z = vs_TEXCOORD2.y;\n    u_xlat2.y = dot(u_xlat16_1.xyz, u_xlat3.xyz);\n    u_xlat9.x = vs_TEXCOORD3.z;\n    u_xlat9.z = vs_TEXCOORD2.z;\n    u_xlat2.z = dot(u_xlat16_1.xyz, u_xlat9.xyz);\n    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9.x = inversesqrt(u_xlat9.x);\n    u_xlat9.xyz = u_xlat9.xxx * u_xlat2.xyz;\n    u_xlat16_1.x = dot(u_xlat9.xyz, _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;\n    u_xlatb0 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb0) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb0) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb0) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_28 = dot((-u_xlat16_4.xyz), u_xlat9.xyz);\n    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n    u_xlat16_5.xyz = u_xlat9.xyz * (-vec3(u_xlat16_28)) + (-u_xlat16_4.xyz);\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_31 = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_28 * u_xlat16_31;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat10_2.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat9.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat2.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat10_3.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_3.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;\n    u_xlat0.x = dot(u_xlat9.xyz, u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);\n    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9.x * u_xlat9.x;\n    u_xlat9.x = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9.x * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_5.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_1.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_3.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec3 u_xlat16_0;\nbool u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nbvec3 u_xlatb1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nfloat u_xlat9;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nfloat u_xlat27;\nmediump float u_xlat16_27;\nbool u_xlatb27;\nbool u_xlatb28;\nmediump float u_xlat16_30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = vs_TEXCOORD3.x;\n    u_xlat0.z = vs_TEXCOORD2.x;\n    u_xlat1.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat1.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat1.xyz);\n    u_xlat1.xyz = u_xlat1.xzy * vs_TEXCOORD3.www;\n    u_xlat0.y = u_xlat1.x;\n    u_xlat16_2.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat16_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_30 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_30 = min(u_xlat16_30, 1.0);\n    u_xlat16_30 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = sqrt(u_xlat16_30);\n    u_xlat16_3.z = max(u_xlat16_30, 1.00000002e-16);\n    u_xlat0.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);\n    u_xlat2.y = u_xlat1.z;\n    u_xlat2.x = vs_TEXCOORD3.y;\n    u_xlat2.z = vs_TEXCOORD2.y;\n    u_xlat0.y = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat1.x = vs_TEXCOORD3.z;\n    u_xlat1.z = vs_TEXCOORD2.z;\n    u_xlat0.z = dot(u_xlat16_3.xyz, u_xlat1.xyz);\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_4.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_4.xyz = exp2(u_xlat16_4.xyz);\n    u_xlat16_4.xyz = u_xlat16_4.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_5.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.x = (u_xlatb1.x) ? u_xlat16_5.x : u_xlat16_4.x;\n    u_xlat16_3.y = (u_xlatb1.y) ? u_xlat16_5.y : u_xlat16_4.y;\n    u_xlat16_3.z = (u_xlatb1.z) ? u_xlat16_5.z : u_xlat16_4.z;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb27) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb27) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb27) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_30 = dot((-u_xlat16_4.xyz), u_xlat0.xyz);\n    u_xlat16_30 = u_xlat16_30 + u_xlat16_30;\n    u_xlat16_5.xyz = u_xlat0.xyz * (-vec3(u_xlat16_30)) + (-u_xlat16_4.xyz);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_31 = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_30 * u_xlat16_31;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_30 = max(u_xlat16_30, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat16_1.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat16_1.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat0.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_30) * vec2(u_xlat16_30) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_2.yzw;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat16_4.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n    u_xlat16_27 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlat16_13 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_13 = u_xlat16_27 * _MainLightShadowParams.x + u_xlat16_13;\n    u_xlatb27 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb28 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb27 = u_xlatb27 || u_xlatb28;\n    u_xlat16_13 = (u_xlatb27) ? 1.0 : u_xlat16_13;\n    u_xlat16_22 = (-u_xlat16_13) + 1.0;\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat27 = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlat27 = u_xlat27 * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat16_13 = u_xlat27 * u_xlat16_22 + u_xlat16_13;\n    u_xlat27 = u_xlat16_13 * unity_LightData.z;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat27;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat27 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat1.xyz = vec3(u_xlat27) * u_xlat1.xyz;\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_30 * 4.0 + 2.0;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_30;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_30 / u_xlat0.x;\n    u_xlat16_30 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = min(u_xlat16_30, 100.0);\n    u_xlat16_5.xyz = u_xlat16_6.xyz * vec3(u_xlat16_30) + u_xlat16_5.xyz;\n    u_xlat16_3.xyz = u_xlat16_5.xyz * u_xlat16_4.xyz + u_xlat16_3.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _EmissionColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _EmissionMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying highp vec4 vs_TEXCOORD6;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec3 u_xlat0;\nlowp vec3 u_xlat10_0;\nbool u_xlatb0;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nlowp vec4 u_xlat10_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nlowp vec4 u_xlat10_3;\nmediump vec4 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nvec3 u_xlat8;\nvec3 u_xlat9;\nbool u_xlatb9;\nmediump float u_xlat16_10;\nmediump float u_xlat16_13;\nmediump float u_xlat16_22;\nmediump float u_xlat16_28;\nmediump float u_xlat16_31;\nmediump float u_xlat16_32;\nvoid main()\n{\n    u_xlat0.x = texture2D(_MainLightShadowmapTexture, vs_TEXCOORD6.xy, _GlobalMipBias.x).x;\n    u_xlatb0 = u_xlat0.x<vs_TEXCOORD6.z;\n    u_xlat16_1.x = (u_xlatb0) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_10 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_1.x = u_xlat16_1.x + u_xlat16_10;\n    u_xlatb0 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb9 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0 = u_xlatb9 || u_xlatb0;\n    u_xlat16_1.x = (u_xlatb0) ? 1.0 : u_xlat16_1.x;\n    u_xlat16_10 = (-u_xlat16_1.x) + 1.0;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_10 + u_xlat16_1.x;\n    u_xlat0.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat2.x = vs_TEXCOORD3.x;\n    u_xlat2.z = vs_TEXCOORD2.x;\n    u_xlat9.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat9.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat9.xyz);\n    u_xlat9.xyz = u_xlat9.xzy * vs_TEXCOORD3.www;\n    u_xlat2.y = u_xlat9.x;\n    u_xlat10_3.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_1.xy = u_xlat10_3.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_28 = dot(u_xlat16_1.xy, u_xlat16_1.xy);\n    u_xlat16_28 = min(u_xlat16_28, 1.0);\n    u_xlat16_28 = (-u_xlat16_28) + 1.0;\n    u_xlat16_28 = sqrt(u_xlat16_28);\n    u_xlat16_1.z = max(u_xlat16_28, 1.00000002e-16);\n    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);\n    u_xlat3.y = u_xlat9.z;\n    u_xlat3.x = vs_TEXCOORD3.y;\n    u_xlat3.z = vs_TEXCOORD2.y;\n    u_xlat2.y = dot(u_xlat16_1.xyz, u_xlat3.xyz);\n    u_xlat9.x = vs_TEXCOORD3.z;\n    u_xlat9.z = vs_TEXCOORD2.z;\n    u_xlat2.z = dot(u_xlat16_1.xyz, u_xlat9.xyz);\n    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat9.x = inversesqrt(u_xlat9.x);\n    u_xlat9.xyz = u_xlat9.xxx * u_xlat2.xyz;\n    u_xlat16_1.x = dot(u_xlat9.xyz, _MainLightPosition.xyz);\n    u_xlat16_1.x = clamp(u_xlat16_1.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_1.x;\n    u_xlat16_1.xyz = u_xlat16_1.xxx * _MainLightColor.xyz;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;\n    u_xlatb0 = unity_OrthoParams.w==0.0;\n    u_xlat16_4.x = (u_xlatb0) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb0) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb0) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_28 = dot((-u_xlat16_4.xyz), u_xlat9.xyz);\n    u_xlat16_28 = u_xlat16_28 + u_xlat16_28;\n    u_xlat16_5.xyz = u_xlat9.xyz * (-vec3(u_xlat16_28)) + (-u_xlat16_4.xyz);\n    u_xlat16_28 = (-_Smoothness) + 1.0;\n    u_xlat16_31 = (-u_xlat16_28) * 0.699999988 + 1.70000005;\n    u_xlat16_31 = u_xlat16_28 * u_xlat16_31;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat16_28 = max(u_xlat16_28, 0.0078125);\n    u_xlat16_31 = u_xlat16_31 * 6.0;\n    u_xlat10_2 = textureCube(unity_SpecCube0, u_xlat16_5.xyz, u_xlat16_31);\n    u_xlat16_31 = u_xlat10_2.w + -1.0;\n    u_xlat16_31 = unity_SpecCube0_HDR.w * u_xlat16_31 + 1.0;\n    u_xlat16_31 = max(u_xlat16_31, 0.0);\n    u_xlat16_31 = log2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.y;\n    u_xlat16_31 = exp2(u_xlat16_31);\n    u_xlat16_31 = u_xlat16_31 * unity_SpecCube0_HDR.x;\n    u_xlat16_5.xyz = u_xlat10_2.xyz * vec3(u_xlat16_31);\n    u_xlat16_31 = dot(u_xlat9.xyz, u_xlat16_4.xyz);\n    u_xlat16_31 = clamp(u_xlat16_31, 0.0, 1.0);\n    u_xlat2.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat16_4.x = (-u_xlat16_31) + 1.0;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;\n    u_xlat16_13 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_22 = (-u_xlat16_13) + _Smoothness;\n    u_xlat16_22 = u_xlat16_22 + 1.0;\n    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);\n    u_xlat10_3 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_6.xyz = u_xlat10_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat10_3.wxyz * _BaseColor.wxyz;\n    u_xlat16_6.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_7.xyz = vec3(u_xlat16_22) + (-u_xlat16_6.xyz);\n    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;\n    u_xlat16_7.xy = vec2(u_xlat16_28) * vec2(u_xlat16_28) + vec2(-1.0, 1.0);\n    u_xlat16_32 = float(1.0) / u_xlat16_7.y;\n    u_xlat8.xyz = u_xlat16_4.xzw * vec3(u_xlat16_32);\n    u_xlat16_4.xzw = u_xlat16_5.xyz * u_xlat8.xyz;\n    u_xlat16_5.xyz = vec3(u_xlat16_13) * u_xlat16_3.yzw;\n    u_xlat16_4.xyz = vs_TEXCOORD8.xyz * u_xlat16_5.xyz + u_xlat16_4.xzw;\n    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat0.x = max(u_xlat0.x, 1.17549435e-38);\n    u_xlat0.x = inversesqrt(u_xlat0.x);\n    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;\n    u_xlat0.x = dot(u_xlat9.xyz, u_xlat2.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9.x = dot(_MainLightPosition.xyz, u_xlat2.xyz);\n    u_xlat9.x = clamp(u_xlat9.x, 0.0, 1.0);\n    u_xlat16_31 = u_xlat9.x * u_xlat9.x;\n    u_xlat9.x = max(u_xlat16_31, 0.100000001);\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat0.x * u_xlat16_7.x + 1.00001001;\n    u_xlat0.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9.x * u_xlat0.x;\n    u_xlat16_31 = u_xlat16_28 * 4.0 + 2.0;\n    u_xlat16_28 = u_xlat16_28 * u_xlat16_28;\n    u_xlat0.x = u_xlat0.x * u_xlat16_31;\n    u_xlat0.x = u_xlat16_28 / u_xlat0.x;\n    u_xlat16_28 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_28 = max(u_xlat16_28, 0.0);\n    u_xlat16_28 = min(u_xlat16_28, 100.0);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(u_xlat16_28) + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = u_xlat16_6.xyz * u_xlat16_1.xyz + u_xlat16_4.xyz;\n    u_xlat16_1.xyz = vs_TEXCOORD5.yzw * u_xlat16_5.xyz + u_xlat16_1.xyz;\n    u_xlat10_0.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).xyz;\n    SV_Target0.xyz = u_xlat10_0.xyz * _EmissionColor.xyz + u_xlat16_1.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_3.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec3 u_xlatb0;\nvec4 u_xlat1;\nmediump vec3 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec4 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec2 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec2 u_xlat16_9;\nvec3 u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_11;\nmediump vec3 u_xlat16_16;\nfloat u_xlat30;\nbool u_xlatb30;\nmediump float u_xlat16_31;\nmediump float u_xlat16_34;\nmediump float u_xlat16_35;\nvoid main()\n{\n    vec3 txVec0 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n    u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlat16_1.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_1.x = u_xlat16_0.x * _MainLightShadowParams.x + u_xlat16_1.x;\n    u_xlatb0.x = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb10 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0.x = u_xlatb10 || u_xlatb0.x;\n    u_xlat16_1.x = (u_xlatb0.x) ? 1.0 : u_xlat16_1.x;\n    u_xlat16_11 = (-u_xlat16_1.x) + 1.0;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_1.x = u_xlat0.x * u_xlat16_11 + u_xlat16_1.x;\n    u_xlat0.x = u_xlat16_1.x * unity_LightData.z;\n    u_xlat2.x = vs_TEXCOORD3.x;\n    u_xlat2.z = vs_TEXCOORD2.x;\n    u_xlat10.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat10.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat10.xyz);\n    u_xlat10.xyz = u_xlat10.xzy * vs_TEXCOORD3.www;\n    u_xlat2.y = u_xlat10.x;\n    u_xlat16_3.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_1.xy = u_xlat16_3.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_31 = dot(u_xlat16_1.xy, u_xlat16_1.xy);\n    u_xlat16_31 = min(u_xlat16_31, 1.0);\n    u_xlat16_31 = (-u_xlat16_31) + 1.0;\n    u_xlat16_31 = sqrt(u_xlat16_31);\n    u_xlat16_1.z = max(u_xlat16_31, 1.00000002e-16);\n    u_xlat2.x = dot(u_xlat16_1.xyz, u_xlat2.xyz);\n    u_xlat3.y = u_xlat10.z;\n    u_xlat3.x = vs_TEXCOORD3.y;\n    u_xlat3.z = vs_TEXCOORD2.y;\n    u_xlat2.y = dot(u_xlat16_1.xyz, u_xlat3.xyz);\n    u_xlat10.x = vs_TEXCOORD3.z;\n    u_xlat10.z = vs_TEXCOORD2.z;\n    u_xlat2.z = dot(u_xlat16_1.xyz, u_xlat10.xyz);\n    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat10.x = inversesqrt(u_xlat10.x);\n    u_xlat1.xyz = u_xlat10.xxx * u_xlat2.xyz;\n    u_xlat16_4.x = dot(u_xlat1.xyz, _MainLightPosition.xyz);\n    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);\n    u_xlat16_4.x = u_xlat0.x * u_xlat16_4.x;\n    u_xlat16_4.xyz = u_xlat16_4.xxx * _MainLightColor.xyz;\n    u_xlat1.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat1);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat1);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat1);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_6.xyz = log2(abs(u_xlat16_5.xyz));\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb0.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_5.xyzx).xyz;\n    u_xlat16_5.x = (u_xlatb0.x) ? u_xlat16_7.x : u_xlat16_6.x;\n    u_xlat16_5.y = (u_xlatb0.y) ? u_xlat16_7.y : u_xlat16_6.y;\n    u_xlat16_5.z = (u_xlatb0.z) ? u_xlat16_7.z : u_xlat16_6.z;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat0.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;\n    u_xlatb30 = unity_OrthoParams.w==0.0;\n    u_xlat16_6.x = (u_xlatb30) ? u_xlat0.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_6.y = (u_xlatb30) ? u_xlat0.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_6.z = (u_xlatb30) ? u_xlat0.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_34 = dot((-u_xlat16_6.xyz), u_xlat1.xyz);\n    u_xlat16_34 = u_xlat16_34 + u_xlat16_34;\n    u_xlat16_7.xyz = u_xlat1.xyz * (-vec3(u_xlat16_34)) + (-u_xlat16_6.xyz);\n    u_xlat16_34 = (-_Smoothness) + 1.0;\n    u_xlat16_35 = (-u_xlat16_34) * 0.699999988 + 1.70000005;\n    u_xlat16_35 = u_xlat16_34 * u_xlat16_35;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_34 = max(u_xlat16_34, 0.0078125);\n    u_xlat16_35 = u_xlat16_35 * 6.0;\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_35);\n    u_xlat16_35 = u_xlat16_0.w + -1.0;\n    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;\n    u_xlat16_35 = max(u_xlat16_35, 0.0);\n    u_xlat16_35 = log2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.y;\n    u_xlat16_35 = exp2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_35);\n    u_xlat16_35 = dot(u_xlat1.xyz, u_xlat16_6.xyz);\n    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);\n    u_xlat0.xyz = u_xlat16_6.xyz + _MainLightPosition.xyz;\n    u_xlat16_35 = (-u_xlat16_35) + 1.0;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_6.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_16.x = (-u_xlat16_6.x) + _Smoothness;\n    u_xlat16_16.x = u_xlat16_16.x + 1.0;\n    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);\n    u_xlat16_2 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_8.xyz = u_xlat16_2.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_2 = u_xlat16_2.wxyz * _BaseColor.wxyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_16.xyz = u_xlat16_16.xxx + (-u_xlat16_8.xyz);\n    u_xlat16_16.xyz = vec3(u_xlat16_35) * u_xlat16_16.xyz + u_xlat16_8.xyz;\n    u_xlat16_9.xy = vec2(u_xlat16_34) * vec2(u_xlat16_34) + vec2(-1.0, 1.0);\n    u_xlat16_35 = float(1.0) / u_xlat16_9.y;\n    u_xlat3.xyz = u_xlat16_16.xyz * vec3(u_xlat16_35);\n    u_xlat16_16.xyz = u_xlat3.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_6.xxx * u_xlat16_2.yzw;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_16.xyz;\n    u_xlat30 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat30 = max(u_xlat30, 1.17549435e-38);\n    u_xlat30 = inversesqrt(u_xlat30);\n    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;\n    u_xlat30 = dot(u_xlat1.xyz, u_xlat0.xyz);\n    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);\n    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_35 = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = max(u_xlat16_35, 0.100000001);\n    u_xlat10.x = u_xlat30 * u_xlat30;\n    u_xlat10.x = u_xlat10.x * u_xlat16_9.x + 1.00001001;\n    u_xlat10.x = u_xlat10.x * u_xlat10.x;\n    u_xlat0.x = u_xlat0.x * u_xlat10.x;\n    u_xlat16_35 = u_xlat16_34 * 4.0 + 2.0;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n    u_xlat0.x = u_xlat0.x * u_xlat16_35;\n    u_xlat0.x = u_xlat16_34 / u_xlat0.x;\n    u_xlat16_34 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_34 = max(u_xlat16_34, 0.0);\n    u_xlat16_34 = min(u_xlat16_34, 100.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_34) + u_xlat16_7.xyz;\n    u_xlat16_4.xyz = u_xlat16_6.xyz * u_xlat16_4.xyz + u_xlat16_5.xyz;\n    u_xlat16_4.xyz = vs_TEXCOORD5.yzw * u_xlat16_7.xyz + u_xlat16_4.xyz;\n    u_xlat16_0.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).xyz;\n    SV_Target0.xyz = u_xlat16_0.xyz * _EmissionColor.xyz + u_xlat16_4.xyz;\n    u_xlatb0.x = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0.x) ? u_xlat16_2.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _EmissionColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _EmissionMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nint u_xlati1;\nint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nlowp vec2 u_xlat10_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_14;\nmediump float u_xlat16_23;\nmediump float u_xlat16_29;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nint op_shl(int a, int b) { return int(floor(float(a) * pow(2.0, float(b)))); }\nivec2 op_shl(ivec2 a, ivec2 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); return a; }\nivec3 op_shl(ivec3 a, ivec3 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); return a; }\nivec4 op_shl(ivec4 a, ivec4 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); a.w = op_shl(a.w, b.w); return a; }\n\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\nvec4 hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return hlslcc_mtx4x4_MainLightWorldToShadow[i];\n#else\n#define d_ar hlslcc_mtx4x4_MainLightWorldToShadow\n    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = int(u_xlat16_2.x);\n    u_xlati1 = op_shl(int(u_xlatu1), 2);\n    u_xlat10.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 1)).xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(u_xlati1).xyz * vs_TEXCOORD1.xxx + u_xlat10.xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 2)).xyz * vs_TEXCOORD1.zzz + u_xlat10.xyz;\n    u_xlat1.xyz = u_xlat10.xyz + hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 3)).xyz;\n    u_xlat1.x = texture2D(_MainLightShadowmapTexture, u_xlat1.xy, _GlobalMipBias.x).x;\n    u_xlatb1 = u_xlat1.x<u_xlat1.z;\n    u_xlat16_2.x = (u_xlatb1) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_11 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_11;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb10 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb10 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_11 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat3.x = vs_TEXCOORD3.x;\n    u_xlat3.z = vs_TEXCOORD2.x;\n    u_xlat10.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat10.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat10.xyz);\n    u_xlat10.xyz = u_xlat10.xzy * vs_TEXCOORD3.www;\n    u_xlat3.y = u_xlat10.x;\n    u_xlat10_4.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_2.xy = u_xlat10_4.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_29 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_29 = min(u_xlat16_29, 1.0);\n    u_xlat16_29 = (-u_xlat16_29) + 1.0;\n    u_xlat16_29 = sqrt(u_xlat16_29);\n    u_xlat16_2.z = max(u_xlat16_29, 1.00000002e-16);\n    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat4.y = u_xlat10.z;\n    u_xlat4.x = vs_TEXCOORD3.y;\n    u_xlat4.z = vs_TEXCOORD2.y;\n    u_xlat3.y = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat10.x = vs_TEXCOORD3.z;\n    u_xlat10.z = vs_TEXCOORD2.z;\n    u_xlat3.z = dot(u_xlat16_2.xyz, u_xlat10.xyz);\n    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat10.x = inversesqrt(u_xlat10.x);\n    u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;\n    u_xlat16_2.x = dot(u_xlat10.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlatb1 = unity_OrthoParams.w==0.0;\n    u_xlat16_5.x = (u_xlatb1) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_5.y = (u_xlatb1) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_5.z = (u_xlatb1) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_29 = dot((-u_xlat16_5.xyz), u_xlat10.xyz);\n    u_xlat16_29 = u_xlat16_29 + u_xlat16_29;\n    u_xlat16_6.xyz = u_xlat10.xyz * (-vec3(u_xlat16_29)) + (-u_xlat16_5.xyz);\n    u_xlat16_29 = (-_Smoothness) + 1.0;\n    u_xlat16_32 = (-u_xlat16_29) * 0.699999988 + 1.70000005;\n    u_xlat16_32 = u_xlat16_29 * u_xlat16_32;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29 = max(u_xlat16_29, 0.0078125);\n    u_xlat16_32 = u_xlat16_32 * 6.0;\n    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_32);\n    u_xlat16_32 = u_xlat10_0.w + -1.0;\n    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = log2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.y;\n    u_xlat16_32 = exp2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;\n    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = dot(u_xlat10.xyz, u_xlat16_5.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_5.xyz + _MainLightPosition.xyz;\n    u_xlat16_5.x = (-u_xlat16_32) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_14 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_23 = (-u_xlat16_14) + _Smoothness;\n    u_xlat16_23 = u_xlat16_23 + 1.0;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_0 = u_xlat10_0.wxyz * _BaseColor.wxyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_8.xyz = vec3(u_xlat16_23) + (-u_xlat16_7.xyz);\n    u_xlat16_5.xzw = u_xlat16_5.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_29) * vec2(u_xlat16_29) + vec2(-1.0, 1.0);\n    u_xlat16_33 = float(1.0) / u_xlat16_8.y;\n    u_xlat4.xyz = u_xlat16_5.xzw * vec3(u_xlat16_33);\n    u_xlat16_5.xzw = u_xlat4.xyz * u_xlat16_6.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_14) * u_xlat16_0.yzw;\n    u_xlat16_5.xyz = vs_TEXCOORD8.xyz * u_xlat16_6.xyz + u_xlat16_5.xzw;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlat1.x = dot(u_xlat10.xyz, u_xlat3.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat10.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);\n    u_xlat16_32 = u_xlat10.x * u_xlat10.x;\n    u_xlat10.x = max(u_xlat16_32, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_8.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat10.x * u_xlat1.x;\n    u_xlat16_32 = u_xlat16_29 * 4.0 + 2.0;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat1.x = u_xlat1.x * u_xlat16_32;\n    u_xlat1.x = u_xlat16_29 / u_xlat1.x;\n    u_xlat16_29 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_29 = max(u_xlat16_29, 0.0);\n    u_xlat16_29 = min(u_xlat16_29, 100.0);\n    u_xlat16_6.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_0.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbvec3 u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nbool u_xlatb3;\nvec3 u_xlat4;\nmediump vec2 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec2 u_xlat16_9;\nvec3 u_xlat11;\nbool u_xlatb11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_16;\nfloat u_xlat31;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << 2);\n    u_xlat11.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat11.xyz;\n    u_xlat1.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlatb31 = 0.0>=u_xlat1.z;\n    u_xlatb3 = u_xlat1.z>=1.0;\n    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);\n    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlatb11 = u_xlatb31 || u_xlatb3;\n    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;\n    u_xlat16_2.x = (u_xlatb11) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_12 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_12 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat3.x = vs_TEXCOORD3.x;\n    u_xlat3.z = vs_TEXCOORD2.x;\n    u_xlat11.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat11.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat11.xyz);\n    u_xlat11.xyz = u_xlat11.xzy * vs_TEXCOORD3.www;\n    u_xlat3.y = u_xlat11.x;\n    u_xlat16_4.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_2.xy = u_xlat16_4.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_32 = min(u_xlat16_32, 1.0);\n    u_xlat16_32 = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = sqrt(u_xlat16_32);\n    u_xlat16_2.z = max(u_xlat16_32, 1.00000002e-16);\n    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat4.y = u_xlat11.z;\n    u_xlat4.x = vs_TEXCOORD3.y;\n    u_xlat4.z = vs_TEXCOORD2.y;\n    u_xlat3.y = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat11.x = vs_TEXCOORD3.z;\n    u_xlat11.z = vs_TEXCOORD2.z;\n    u_xlat3.z = dot(u_xlat16_2.xyz, u_xlat11.xyz);\n    u_xlat11.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat11.x = inversesqrt(u_xlat11.x);\n    u_xlat0.xyz = u_xlat11.xxx * u_xlat3.xyz;\n    u_xlat16_2.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_6.xyz = log2(abs(u_xlat16_5.xyz));\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_5.xyzx).xyz;\n    u_xlat16_5.x = (u_xlatb1.x) ? u_xlat16_7.x : u_xlat16_6.x;\n    u_xlat16_5.y = (u_xlatb1.y) ? u_xlat16_7.y : u_xlat16_6.y;\n    u_xlat16_5.z = (u_xlatb1.z) ? u_xlat16_7.z : u_xlat16_6.z;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;\n    u_xlatb31 = unity_OrthoParams.w==0.0;\n    u_xlat16_6.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_6.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_6.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_32 = dot((-u_xlat16_6.xyz), u_xlat0.xyz);\n    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;\n    u_xlat16_7.xyz = u_xlat0.xyz * (-vec3(u_xlat16_32)) + (-u_xlat16_6.xyz);\n    u_xlat16_32 = (-_Smoothness) + 1.0;\n    u_xlat16_35 = (-u_xlat16_32) * 0.699999988 + 1.70000005;\n    u_xlat16_35 = u_xlat16_32 * u_xlat16_35;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = max(u_xlat16_32, 0.0078125);\n    u_xlat16_35 = u_xlat16_35 * 6.0;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_35);\n    u_xlat16_35 = u_xlat16_1.w + -1.0;\n    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;\n    u_xlat16_35 = max(u_xlat16_35, 0.0);\n    u_xlat16_35 = log2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.y;\n    u_xlat16_35 = exp2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_35);\n    u_xlat16_35 = dot(u_xlat0.xyz, u_xlat16_6.xyz);\n    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_6.xyz + _MainLightPosition.xyz;\n    u_xlat16_35 = (-u_xlat16_35) + 1.0;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_6.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_16.x = (-u_xlat16_6.x) + _Smoothness;\n    u_xlat16_16.x = u_xlat16_16.x + 1.0;\n    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);\n    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_8.xyz = u_xlat16_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat16_3.wxyz * _BaseColor.wxyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_16.xyz = u_xlat16_16.xxx + (-u_xlat16_8.xyz);\n    u_xlat16_16.xyz = vec3(u_xlat16_35) * u_xlat16_16.xyz + u_xlat16_8.xyz;\n    u_xlat16_9.xy = vec2(u_xlat16_32) * vec2(u_xlat16_32) + vec2(-1.0, 1.0);\n    u_xlat16_35 = float(1.0) / u_xlat16_9.y;\n    u_xlat4.xyz = u_xlat16_16.xyz * vec3(u_xlat16_35);\n    u_xlat16_16.xyz = u_xlat4.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_6.xxx * u_xlat16_3.yzw;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_16.xyz;\n    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat31 = max(u_xlat31, 1.17549435e-38);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;\n    u_xlat31 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);\n    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_35 = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_35, 0.100000001);\n    u_xlat11.x = u_xlat31 * u_xlat31;\n    u_xlat11.x = u_xlat11.x * u_xlat16_9.x + 1.00001001;\n    u_xlat11.x = u_xlat11.x * u_xlat11.x;\n    u_xlat1.x = u_xlat1.x * u_xlat11.x;\n    u_xlat16_35 = u_xlat16_32 * 4.0 + 2.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat1.x = u_xlat1.x * u_xlat16_35;\n    u_xlat1.x = u_xlat16_32 / u_xlat1.x;\n    u_xlat16_32 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = min(u_xlat16_32, 100.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_32) + u_xlat16_7.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    u_xlatb1.x = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_3.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tmediump vec4 unity_LightData;\nuniform \tmediump vec4 unity_SpecCube0_HDR;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _BaseColor;\nuniform \tmediump vec4 _EmissionColor;\nuniform \tmediump float _Smoothness;\nuniform \tmediump float _Metallic;\nuniform \tmediump float _Surface;\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\nuniform lowp sampler2D _BaseMap;\nuniform lowp sampler2D _BumpMap;\nuniform lowp sampler2D _EmissionMap;\nuniform highp sampler2D _MainLightShadowmapTexture;\nuniform lowp samplerCube unity_SpecCube0;\nvarying highp vec2 vs_TEXCOORD0;\nvarying highp vec3 vs_TEXCOORD1;\nvarying highp vec3 vs_TEXCOORD2;\nvarying mediump vec4 vs_TEXCOORD3;\nvarying mediump vec4 vs_TEXCOORD5;\nvarying mediump vec3 vs_TEXCOORD8;\n#define SV_Target0 gl_FragData[0]\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nlowp vec4 u_xlat10_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nlowp vec3 u_xlat10_1;\nint u_xlati1;\nint u_xlatu1;\nbool u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nvec3 u_xlat4;\nlowp vec2 u_xlat10_4;\nmediump vec4 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nvec3 u_xlat10;\nbool u_xlatb10;\nmediump float u_xlat16_11;\nmediump float u_xlat16_14;\nmediump float u_xlat16_23;\nmediump float u_xlat16_29;\nmediump float u_xlat16_32;\nmediump float u_xlat16_33;\nint op_shl(int a, int b) { return int(floor(float(a) * pow(2.0, float(b)))); }\nivec2 op_shl(ivec2 a, ivec2 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); return a; }\nivec3 op_shl(ivec3 a, ivec3 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); return a; }\nivec4 op_shl(ivec4 a, ivec4 b) { a.x = op_shl(a.x, b.x); a.y = op_shl(a.y, b.y); a.z = op_shl(a.z, b.z); a.w = op_shl(a.w, b.w); return a; }\n\n#define UNITY_DYNAMIC_INDEX_ES2 0\n\n\n\nvec4 hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(int i){\n#if UNITY_DYNAMIC_INDEX_ES2\n    return hlslcc_mtx4x4_MainLightWorldToShadow[i];\n#else\n#define d_ar hlslcc_mtx4x4_MainLightWorldToShadow\n    if (i <= 0) return d_ar[0]; else if (i == 1) return d_ar[1]; else if (i == 2) return d_ar[2]; else if (i == 3) return d_ar[3]; else if (i == 4) return d_ar[4]; else if (i == 5) return d_ar[5]; else if (i == 6) return d_ar[6]; else if (i == 7) return d_ar[7]; else if (i == 8) return d_ar[8]; else if (i == 9) return d_ar[9]; else if (i == 10) return d_ar[10]; else if (i == 11) return d_ar[11]; else if (i == 12) return d_ar[12]; else if (i == 13) return d_ar[13]; else if (i == 14) return d_ar[14]; else if (i == 15) return d_ar[15]; else if (i == 16) return d_ar[16]; else if (i == 17) return d_ar[17]; else if (i == 18) return d_ar[18]; else if (i == 19) return d_ar[19];\n    return d_ar[0];\n#undef d_ar\n#endif\n}\n\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = int(u_xlat16_2.x);\n    u_xlati1 = op_shl(int(u_xlatu1), 2);\n    u_xlat10.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 1)).xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex(u_xlati1).xyz * vs_TEXCOORD1.xxx + u_xlat10.xyz;\n    u_xlat10.xyz = hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 2)).xyz * vs_TEXCOORD1.zzz + u_xlat10.xyz;\n    u_xlat1.xyz = u_xlat10.xyz + hlslcc_mtx4x4_MainLightWorldToShadowDynamicIndex((u_xlati1 + 3)).xyz;\n    u_xlat1.x = texture2D(_MainLightShadowmapTexture, u_xlat1.xy, _GlobalMipBias.x).x;\n    u_xlatb1 = u_xlat1.x<u_xlat1.z;\n    u_xlat16_2.x = (u_xlatb1) ? 0.0 : _MainLightShadowParams.x;\n    u_xlat16_11 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_2.x + u_xlat16_11;\n    u_xlatb1 = 0.0>=u_xlat1.z;\n    u_xlatb10 = u_xlat1.z>=1.0;\n    u_xlatb1 = u_xlatb10 || u_xlatb1;\n    u_xlat16_2.x = (u_xlatb1) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_11 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_11 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat3.x = vs_TEXCOORD3.x;\n    u_xlat3.z = vs_TEXCOORD2.x;\n    u_xlat10.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat10.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat10.xyz);\n    u_xlat10.xyz = u_xlat10.xzy * vs_TEXCOORD3.www;\n    u_xlat3.y = u_xlat10.x;\n    u_xlat10_4.xy = texture2D(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_2.xy = u_xlat10_4.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_29 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_29 = min(u_xlat16_29, 1.0);\n    u_xlat16_29 = (-u_xlat16_29) + 1.0;\n    u_xlat16_29 = sqrt(u_xlat16_29);\n    u_xlat16_2.z = max(u_xlat16_29, 1.00000002e-16);\n    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat4.y = u_xlat10.z;\n    u_xlat4.x = vs_TEXCOORD3.y;\n    u_xlat4.z = vs_TEXCOORD2.y;\n    u_xlat3.y = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat10.x = vs_TEXCOORD3.z;\n    u_xlat10.z = vs_TEXCOORD2.z;\n    u_xlat3.z = dot(u_xlat16_2.xyz, u_xlat10.xyz);\n    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat10.x = inversesqrt(u_xlat10.x);\n    u_xlat10.xyz = u_xlat10.xxx * u_xlat3.xyz;\n    u_xlat16_2.x = dot(u_xlat10.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat3.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlatb1 = unity_OrthoParams.w==0.0;\n    u_xlat16_5.x = (u_xlatb1) ? u_xlat3.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_5.y = (u_xlatb1) ? u_xlat3.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_5.z = (u_xlatb1) ? u_xlat3.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_29 = dot((-u_xlat16_5.xyz), u_xlat10.xyz);\n    u_xlat16_29 = u_xlat16_29 + u_xlat16_29;\n    u_xlat16_6.xyz = u_xlat10.xyz * (-vec3(u_xlat16_29)) + (-u_xlat16_5.xyz);\n    u_xlat16_29 = (-_Smoothness) + 1.0;\n    u_xlat16_32 = (-u_xlat16_29) * 0.699999988 + 1.70000005;\n    u_xlat16_32 = u_xlat16_29 * u_xlat16_32;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat16_29 = max(u_xlat16_29, 0.0078125);\n    u_xlat16_32 = u_xlat16_32 * 6.0;\n    u_xlat10_0 = textureCube(unity_SpecCube0, u_xlat16_6.xyz, u_xlat16_32);\n    u_xlat16_32 = u_xlat10_0.w + -1.0;\n    u_xlat16_32 = unity_SpecCube0_HDR.w * u_xlat16_32 + 1.0;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = log2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.y;\n    u_xlat16_32 = exp2(u_xlat16_32);\n    u_xlat16_32 = u_xlat16_32 * unity_SpecCube0_HDR.x;\n    u_xlat16_6.xyz = u_xlat10_0.xyz * vec3(u_xlat16_32);\n    u_xlat16_32 = dot(u_xlat10.xyz, u_xlat16_5.xyz);\n    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);\n    u_xlat3.xyz = u_xlat16_5.xyz + _MainLightPosition.xyz;\n    u_xlat16_5.x = (-u_xlat16_32) + 1.0;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;\n    u_xlat16_14 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_23 = (-u_xlat16_14) + _Smoothness;\n    u_xlat16_23 = u_xlat16_23 + 1.0;\n    u_xlat16_23 = clamp(u_xlat16_23, 0.0, 1.0);\n    u_xlat10_0 = texture2D(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_7.xyz = u_xlat10_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_0 = u_xlat10_0.wxyz * _BaseColor.wxyz;\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_8.xyz = vec3(u_xlat16_23) + (-u_xlat16_7.xyz);\n    u_xlat16_5.xzw = u_xlat16_5.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;\n    u_xlat16_8.xy = vec2(u_xlat16_29) * vec2(u_xlat16_29) + vec2(-1.0, 1.0);\n    u_xlat16_33 = float(1.0) / u_xlat16_8.y;\n    u_xlat4.xyz = u_xlat16_5.xzw * vec3(u_xlat16_33);\n    u_xlat16_5.xzw = u_xlat4.xyz * u_xlat16_6.xyz;\n    u_xlat16_6.xyz = vec3(u_xlat16_14) * u_xlat16_0.yzw;\n    u_xlat16_5.xyz = vs_TEXCOORD8.xyz * u_xlat16_6.xyz + u_xlat16_5.xzw;\n    u_xlat1.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat1.x = max(u_xlat1.x, 1.17549435e-38);\n    u_xlat1.x = inversesqrt(u_xlat1.x);\n    u_xlat3.xyz = u_xlat1.xxx * u_xlat3.xyz;\n    u_xlat1.x = dot(u_xlat10.xyz, u_xlat3.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat10.x = dot(_MainLightPosition.xyz, u_xlat3.xyz);\n    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);\n    u_xlat16_32 = u_xlat10.x * u_xlat10.x;\n    u_xlat10.x = max(u_xlat16_32, 0.100000001);\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat1.x * u_xlat16_8.x + 1.00001001;\n    u_xlat1.x = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = u_xlat10.x * u_xlat1.x;\n    u_xlat16_32 = u_xlat16_29 * 4.0 + 2.0;\n    u_xlat16_29 = u_xlat16_29 * u_xlat16_29;\n    u_xlat1.x = u_xlat1.x * u_xlat16_32;\n    u_xlat1.x = u_xlat16_29 / u_xlat1.x;\n    u_xlat16_29 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_29 = max(u_xlat16_29, 0.0);\n    u_xlat16_29 = min(u_xlat16_29, 100.0);\n    u_xlat16_7.xyz = u_xlat16_7.xyz * vec3(u_xlat16_29) + u_xlat16_6.xyz;\n    u_xlat16_2.xyz = u_xlat16_7.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD5.yzw * u_xlat16_6.xyz + u_xlat16_2.xyz;\n    u_xlat10_1.xyz = texture2D(_EmissionMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).xyz;\n    SV_Target0.xyz = u_xlat10_1.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    u_xlatb1 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1) ? u_xlat16_0.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _EmissionMap;\nUNITY_LOCATION(4) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(5) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec4 u_xlat0;\nmediump vec4 u_xlat16_0;\nbvec4 u_xlatb0;\nvec3 u_xlat1;\nmediump vec4 u_xlat16_1;\nint u_xlati1;\nuint u_xlatu1;\nbvec3 u_xlatb1;\nmediump vec3 u_xlat16_2;\nvec3 u_xlat3;\nmediump vec4 u_xlat16_3;\nbool u_xlatb3;\nvec3 u_xlat4;\nmediump vec2 u_xlat16_4;\nmediump vec3 u_xlat16_5;\nmediump vec3 u_xlat16_6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec2 u_xlat16_9;\nvec3 u_xlat11;\nbool u_xlatb11;\nmediump float u_xlat16_12;\nmediump vec3 u_xlat16_16;\nfloat u_xlat31;\nbool u_xlatb31;\nmediump float u_xlat16_32;\nmediump float u_xlat16_35;\nvoid main()\n{\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat0.y = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat0.z = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat0.w = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlatb0 = lessThan(u_xlat0, _CascadeShadowSplitSphereRadii);\n    u_xlat16_2.x = (u_xlatb0.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.y = (u_xlatb0.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_2.z = (u_xlatb0.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_0.x = (u_xlatb0.x) ? float(1.0) : float(0.0);\n    u_xlat16_0.y = (u_xlatb0.y) ? float(1.0) : float(0.0);\n    u_xlat16_0.z = (u_xlatb0.z) ? float(1.0) : float(0.0);\n    u_xlat16_0.w = (u_xlatb0.w) ? float(1.0) : float(0.0);\n    u_xlat16_2.xyz = u_xlat16_2.xyz + u_xlat16_0.yzw;\n    u_xlat16_0.yzw = max(u_xlat16_2.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_2.x = dot(u_xlat16_0, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_2.x = (-u_xlat16_2.x) + 4.0;\n    u_xlatu1 = uint(u_xlat16_2.x);\n    u_xlati1 = int(int(u_xlatu1) << 2);\n    u_xlat11.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 1)].xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati1].xyz * vs_TEXCOORD1.xxx + u_xlat11.xyz;\n    u_xlat11.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat11.xyz;\n    u_xlat1.xyz = u_xlat11.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati1 + 3)].xyz;\n    u_xlatb31 = 0.0>=u_xlat1.z;\n    u_xlatb3 = u_xlat1.z>=1.0;\n    vec3 txVec0 = vec3(u_xlat1.xy,u_xlat1.z);\n    u_xlat16_1.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n    u_xlatb11 = u_xlatb31 || u_xlatb3;\n    u_xlat16_2.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_2.x = u_xlat16_1.x * _MainLightShadowParams.x + u_xlat16_2.x;\n    u_xlat16_2.x = (u_xlatb11) ? 1.0 : u_xlat16_2.x;\n    u_xlat16_12 = (-u_xlat16_2.x) + 1.0;\n    u_xlat1.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat1.x = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat1.x = u_xlat1.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_12 + u_xlat16_2.x;\n    u_xlat1.x = u_xlat16_2.x * unity_LightData.z;\n    u_xlat3.x = vs_TEXCOORD3.x;\n    u_xlat3.z = vs_TEXCOORD2.x;\n    u_xlat11.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat11.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat11.xyz);\n    u_xlat11.xyz = u_xlat11.xzy * vs_TEXCOORD3.www;\n    u_xlat3.y = u_xlat11.x;\n    u_xlat16_4.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_2.xy = u_xlat16_4.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_32 = dot(u_xlat16_2.xy, u_xlat16_2.xy);\n    u_xlat16_32 = min(u_xlat16_32, 1.0);\n    u_xlat16_32 = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = sqrt(u_xlat16_32);\n    u_xlat16_2.z = max(u_xlat16_32, 1.00000002e-16);\n    u_xlat3.x = dot(u_xlat16_2.xyz, u_xlat3.xyz);\n    u_xlat4.y = u_xlat11.z;\n    u_xlat4.x = vs_TEXCOORD3.y;\n    u_xlat4.z = vs_TEXCOORD2.y;\n    u_xlat3.y = dot(u_xlat16_2.xyz, u_xlat4.xyz);\n    u_xlat11.x = vs_TEXCOORD3.z;\n    u_xlat11.z = vs_TEXCOORD2.z;\n    u_xlat3.z = dot(u_xlat16_2.xyz, u_xlat11.xyz);\n    u_xlat11.x = dot(u_xlat3.xyz, u_xlat3.xyz);\n    u_xlat11.x = inversesqrt(u_xlat11.x);\n    u_xlat0.xyz = u_xlat11.xxx * u_xlat3.xyz;\n    u_xlat16_2.x = dot(u_xlat0.xyz, _MainLightPosition.xyz);\n    u_xlat16_2.x = clamp(u_xlat16_2.x, 0.0, 1.0);\n    u_xlat16_2.x = u_xlat1.x * u_xlat16_2.x;\n    u_xlat16_2.xyz = u_xlat16_2.xxx * _MainLightColor.xyz;\n    u_xlat0.w = 1.0;\n    u_xlat16_5.x = dot(unity_SHAr, u_xlat0);\n    u_xlat16_5.y = dot(unity_SHAg, u_xlat0);\n    u_xlat16_5.z = dot(unity_SHAb, u_xlat0);\n    u_xlat16_5.xyz = u_xlat16_5.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_6.xyz = log2(abs(u_xlat16_5.xyz));\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_6.xyz = exp2(u_xlat16_6.xyz);\n    u_xlat16_6.xyz = u_xlat16_6.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlat16_7.xyz = u_xlat16_5.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlatb1.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_5.xyzx).xyz;\n    u_xlat16_5.x = (u_xlatb1.x) ? u_xlat16_7.x : u_xlat16_6.x;\n    u_xlat16_5.y = (u_xlatb1.y) ? u_xlat16_7.y : u_xlat16_6.y;\n    u_xlat16_5.z = (u_xlatb1.z) ? u_xlat16_7.z : u_xlat16_6.z;\n    u_xlat16_5.xyz = max(u_xlat16_5.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat1.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;\n    u_xlatb31 = unity_OrthoParams.w==0.0;\n    u_xlat16_6.x = (u_xlatb31) ? u_xlat1.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_6.y = (u_xlatb31) ? u_xlat1.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_6.z = (u_xlatb31) ? u_xlat1.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat16_32 = dot((-u_xlat16_6.xyz), u_xlat0.xyz);\n    u_xlat16_32 = u_xlat16_32 + u_xlat16_32;\n    u_xlat16_7.xyz = u_xlat0.xyz * (-vec3(u_xlat16_32)) + (-u_xlat16_6.xyz);\n    u_xlat16_32 = (-_Smoothness) + 1.0;\n    u_xlat16_35 = (-u_xlat16_32) * 0.699999988 + 1.70000005;\n    u_xlat16_35 = u_xlat16_32 * u_xlat16_35;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat16_32 = max(u_xlat16_32, 0.0078125);\n    u_xlat16_35 = u_xlat16_35 * 6.0;\n    u_xlat16_1 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_35);\n    u_xlat16_35 = u_xlat16_1.w + -1.0;\n    u_xlat16_35 = unity_SpecCube0_HDR.w * u_xlat16_35 + 1.0;\n    u_xlat16_35 = max(u_xlat16_35, 0.0);\n    u_xlat16_35 = log2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.y;\n    u_xlat16_35 = exp2(u_xlat16_35);\n    u_xlat16_35 = u_xlat16_35 * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz = u_xlat16_1.xyz * vec3(u_xlat16_35);\n    u_xlat16_35 = dot(u_xlat0.xyz, u_xlat16_6.xyz);\n    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);\n    u_xlat1.xyz = u_xlat16_6.xyz + _MainLightPosition.xyz;\n    u_xlat16_35 = (-u_xlat16_35) + 1.0;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_35 = u_xlat16_35 * u_xlat16_35;\n    u_xlat16_6.x = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_16.x = (-u_xlat16_6.x) + _Smoothness;\n    u_xlat16_16.x = u_xlat16_16.x + 1.0;\n    u_xlat16_16.x = clamp(u_xlat16_16.x, 0.0, 1.0);\n    u_xlat16_3 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_8.xyz = u_xlat16_3.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_3 = u_xlat16_3.wxyz * _BaseColor.wxyz;\n    u_xlat16_8.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_8.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_16.xyz = u_xlat16_16.xxx + (-u_xlat16_8.xyz);\n    u_xlat16_16.xyz = vec3(u_xlat16_35) * u_xlat16_16.xyz + u_xlat16_8.xyz;\n    u_xlat16_9.xy = vec2(u_xlat16_32) * vec2(u_xlat16_32) + vec2(-1.0, 1.0);\n    u_xlat16_35 = float(1.0) / u_xlat16_9.y;\n    u_xlat4.xyz = u_xlat16_16.xyz * vec3(u_xlat16_35);\n    u_xlat16_16.xyz = u_xlat4.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = u_xlat16_6.xxx * u_xlat16_3.yzw;\n    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz + u_xlat16_16.xyz;\n    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat31 = max(u_xlat31, 1.17549435e-38);\n    u_xlat31 = inversesqrt(u_xlat31);\n    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;\n    u_xlat31 = dot(u_xlat0.xyz, u_xlat1.xyz);\n    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);\n    u_xlat1.x = dot(_MainLightPosition.xyz, u_xlat1.xyz);\n    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);\n    u_xlat16_35 = u_xlat1.x * u_xlat1.x;\n    u_xlat1.x = max(u_xlat16_35, 0.100000001);\n    u_xlat11.x = u_xlat31 * u_xlat31;\n    u_xlat11.x = u_xlat11.x * u_xlat16_9.x + 1.00001001;\n    u_xlat11.x = u_xlat11.x * u_xlat11.x;\n    u_xlat1.x = u_xlat1.x * u_xlat11.x;\n    u_xlat16_35 = u_xlat16_32 * 4.0 + 2.0;\n    u_xlat16_32 = u_xlat16_32 * u_xlat16_32;\n    u_xlat1.x = u_xlat1.x * u_xlat16_35;\n    u_xlat1.x = u_xlat16_32 / u_xlat1.x;\n    u_xlat16_32 = u_xlat1.x + -6.10351563e-05;\n    u_xlat16_32 = max(u_xlat16_32, 0.0);\n    u_xlat16_32 = min(u_xlat16_32, 100.0);\n    u_xlat16_6.xyz = u_xlat16_8.xyz * vec3(u_xlat16_32) + u_xlat16_7.xyz;\n    u_xlat16_2.xyz = u_xlat16_6.xyz * u_xlat16_2.xyz + u_xlat16_5.xyz;\n    u_xlat16_2.xyz = vs_TEXCOORD5.yzw * u_xlat16_7.xyz + u_xlat16_2.xyz;\n    u_xlat16_1.xyz = texture(_EmissionMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).xyz;\n    SV_Target0.xyz = u_xlat16_1.xyz * _EmissionColor.xyz + u_xlat16_2.xyz;\n    u_xlatb1.x = _Surface==1.0;\n    SV_Target0.w = (u_xlatb1.x) ? u_xlat16_3.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _MainLightShadowOffset0;\nuniform \tmediump vec4 _MainLightShadowOffset1;\nuniform \tmediump vec4 _MainLightShadowOffset2;\nuniform \tmediump vec4 _MainLightShadowOffset3;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin highp vec4 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_4;\nmediump float u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nfloat u_xlat9;\nbool u_xlatb9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_14;\nmediump vec3 u_xlat16_17;\nmediump float u_xlat16_23;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_1 = u_xlat16_0.wxyz * _BaseColor.wxyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;\n    u_xlat16_30 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_4 = (-u_xlat16_30) + _Smoothness;\n    u_xlat16_10.xyz = u_xlat16_1.yzw * vec3(u_xlat16_30);\n    u_xlat16_13.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_5 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_5 = max(u_xlat16_5, 0.0078125);\n    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;\n    u_xlat16_4 = u_xlat16_4 + 1.0;\n    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);\n    u_xlat16_23 = u_xlat16_5 * 4.0 + 2.0;\n    u_xlatb0 = _MainLightShadowParams.y!=0.0;\n    if(u_xlatb0){\n        u_xlat0.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset0.xyz;\n        vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);\n        u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n        u_xlat6.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset1.xyz;\n        vec3 txVec1 = vec3(u_xlat6.xy,u_xlat6.z);\n        u_xlat16_0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n        u_xlat6.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset2.xyz;\n        vec3 txVec2 = vec3(u_xlat6.xy,u_xlat6.z);\n        u_xlat16_0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n        u_xlat6.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset3.xyz;\n        vec3 txVec3 = vec3(u_xlat6.xy,u_xlat6.z);\n        u_xlat16_0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n        u_xlat16_32 = dot(u_xlat16_0, vec4(0.25, 0.25, 0.25, 0.25));\n    } else {\n        vec3 txVec4 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n        u_xlat16_32 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n        u_xlat16_32 = u_xlat16_32;\n    }\n    u_xlat16_7.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_32 = u_xlat16_32 * _MainLightShadowParams.x + u_xlat16_7.x;\n    u_xlatb0 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb9 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0 = u_xlatb9 || u_xlatb0;\n    u_xlat16_32 = (u_xlatb0) ? 1.0 : u_xlat16_32;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_7.x = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = u_xlat0.x * u_xlat16_7.x + u_xlat16_32;\n    u_xlat16_7.x = dot((-u_xlat16_3.xyz), u_xlat2.xyz);\n    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;\n    u_xlat16_7.xyz = u_xlat2.xyz * (-u_xlat16_7.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat16_3.xyz);\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_34 = (-u_xlat16_34) + 1.0;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_8.x;\n    u_xlat16_30 = u_xlat16_30 * 6.0;\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_30);\n    u_xlat16_30 = u_xlat16_0.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_30);\n    u_xlat16_8.xy = vec2(u_xlat16_5) * vec2(u_xlat16_5) + vec2(-1.0, 1.0);\n    u_xlat16_30 = float(1.0) / u_xlat16_8.y;\n    u_xlat16_17.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_4);\n    u_xlat16_17.xyz = vec3(u_xlat16_34) * u_xlat16_17.xyz + u_xlat16_13.xyz;\n    u_xlat0.xyz = vec3(u_xlat16_30) * u_xlat16_17.xyz;\n    u_xlat16_7.xyz = u_xlat0.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = vs_TEXCOORD8.xyz * u_xlat16_10.xyz + u_xlat16_7.xyz;\n    u_xlat0.x = u_xlat16_32 * unity_LightData.z;\n    u_xlat16_30 = dot(u_xlat2.xyz, _MainLightPosition.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_30 = u_xlat0.x * u_xlat16_30;\n    u_xlat16_17.xyz = vec3(u_xlat16_30) * _MainLightColor.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = u_xlat27 * u_xlat27;\n    u_xlat9 = u_xlat9 * u_xlat16_8.x + 1.00001001;\n    u_xlat16_3.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_3.x, 0.100000001);\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_23 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_14 / u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);\n    u_xlat16_3.x = min(u_xlat16_3.x, 100.0);\n    u_xlat16_10.xyz = u_xlat16_13.xyz * u_xlat16_3.xxx + u_xlat16_10.xyz;\n    SV_Target0.xyz = u_xlat16_10.xyz * u_xlat16_17.xyz + u_xlat16_7.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_1.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _MainLightShadowOffset0;\nuniform \tmediump vec4 _MainLightShadowOffset1;\nuniform \tmediump vec4 _MainLightShadowOffset2;\nuniform \tmediump vec4 _MainLightShadowOffset3;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin highp vec4 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nbvec3 u_xlatb5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec2 u_xlat16_10;\nfloat u_xlat11;\nbool u_xlatb11;\nmediump vec3 u_xlat16_12;\nmediump float u_xlat16_19;\nmediump vec3 u_xlat16_21;\nmediump float u_xlat16_30;\nfloat u_xlat33;\nbool u_xlatb33;\nfloat u_xlat35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nvoid main()\n{\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_1 = u_xlat16_0.wxyz * _BaseColor.wxyz;\n    u_xlat16_2.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat16_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_36 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_36 = min(u_xlat16_36, 1.0);\n    u_xlat16_36 = (-u_xlat16_36) + 1.0;\n    u_xlat16_36 = sqrt(u_xlat16_36);\n    u_xlat16_3.z = max(u_xlat16_36, 1.00000002e-16);\n    u_xlatb33 = unity_OrthoParams.w==0.0;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat35 = inversesqrt(u_xlat35);\n    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz;\n    u_xlat16_4.x = (u_xlatb33) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb33) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb33) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat2.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat2.xzy * vs_TEXCOORD3.www;\n    u_xlat5.x = vs_TEXCOORD3.x;\n    u_xlat5.y = u_xlat2.x;\n    u_xlat5.z = vs_TEXCOORD2.x;\n    u_xlat5.x = dot(u_xlat16_3.xyz, u_xlat5.xyz);\n    u_xlat6.x = vs_TEXCOORD3.y;\n    u_xlat6.y = u_xlat2.z;\n    u_xlat6.z = vs_TEXCOORD2.y;\n    u_xlat5.y = dot(u_xlat16_3.xyz, u_xlat6.xyz);\n    u_xlat2.x = vs_TEXCOORD3.z;\n    u_xlat2.z = vs_TEXCOORD2.z;\n    u_xlat5.z = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat2.xyz = vec3(u_xlat33) * u_xlat5.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_7.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlat16_8.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlatb5.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.x = (u_xlatb5.x) ? u_xlat16_7.x : u_xlat16_8.x;\n    u_xlat16_3.y = (u_xlatb5.y) ? u_xlat16_7.y : u_xlat16_8.y;\n    u_xlat16_3.z = (u_xlatb5.z) ? u_xlat16_7.z : u_xlat16_8.z;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_36 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_37 = (-u_xlat16_36) + _Smoothness;\n    u_xlat16_12.xyz = u_xlat16_1.yzw * vec3(u_xlat16_36);\n    u_xlat16_7.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_36 = (-_Smoothness) + 1.0;\n    u_xlat16_40 = u_xlat16_36 * u_xlat16_36;\n    u_xlat16_40 = max(u_xlat16_40, 0.0078125);\n    u_xlat16_8.x = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_37 = u_xlat16_37 + 1.0;\n    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);\n    u_xlat16_19 = u_xlat16_40 * 4.0 + 2.0;\n    u_xlatb0 = _MainLightShadowParams.y!=0.0;\n    if(u_xlatb0){\n        u_xlat0.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset0.xyz;\n        vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);\n        u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n        u_xlat5.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset1.xyz;\n        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);\n        u_xlat16_0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n        u_xlat5.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset2.xyz;\n        vec3 txVec2 = vec3(u_xlat5.xy,u_xlat5.z);\n        u_xlat16_0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n        u_xlat5.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset3.xyz;\n        vec3 txVec3 = vec3(u_xlat5.xy,u_xlat5.z);\n        u_xlat16_0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n        u_xlat16_30 = dot(u_xlat16_0, vec4(0.25, 0.25, 0.25, 0.25));\n    } else {\n        vec3 txVec4 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n        u_xlat16_30 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n        u_xlat16_30 = u_xlat16_30;\n    }\n    u_xlat16_41 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_30 = u_xlat16_30 * _MainLightShadowParams.x + u_xlat16_41;\n    u_xlatb0 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb11 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0 = u_xlatb11 || u_xlatb0;\n    u_xlat16_30 = (u_xlatb0) ? 1.0 : u_xlat16_30;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_41 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat0.x * u_xlat16_41 + u_xlat16_30;\n    u_xlat16_41 = dot((-u_xlat16_4.xyz), u_xlat2.xyz);\n    u_xlat16_41 = u_xlat16_41 + u_xlat16_41;\n    u_xlat16_9.xyz = u_xlat2.xyz * (-vec3(u_xlat16_41)) + (-u_xlat16_4.xyz);\n    u_xlat16_41 = dot(u_xlat2.xyz, u_xlat16_4.xyz);\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_42 = (-u_xlat16_36) * 0.699999988 + 1.70000005;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_42;\n    u_xlat16_36 = u_xlat16_36 * 6.0;\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_36);\n    u_xlat16_36 = u_xlat16_0.w + -1.0;\n    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;\n    u_xlat16_36 = max(u_xlat16_36, 0.0);\n    u_xlat16_36 = log2(u_xlat16_36);\n    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.y;\n    u_xlat16_36 = exp2(u_xlat16_36);\n    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(u_xlat16_36);\n    u_xlat16_10.xy = vec2(u_xlat16_40) * vec2(u_xlat16_40) + vec2(-1.0, 1.0);\n    u_xlat16_36 = float(1.0) / u_xlat16_10.y;\n    u_xlat16_21.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);\n    u_xlat16_21.xyz = vec3(u_xlat16_41) * u_xlat16_21.xyz + u_xlat16_7.xyz;\n    u_xlat0.xyz = vec3(u_xlat16_36) * u_xlat16_21.xyz;\n    u_xlat16_9.xyz = u_xlat0.xyz * u_xlat16_9.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz + u_xlat16_9.xyz;\n    u_xlat0.x = u_xlat16_30 * unity_LightData.z;\n    u_xlat16_36 = dot(u_xlat2.xyz, _MainLightPosition.xyz);\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_36 = u_xlat0.x * u_xlat16_36;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * _MainLightColor.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat33 = max(u_xlat33, 1.17549435e-38);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;\n    u_xlat33 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);\n    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat11 = u_xlat33 * u_xlat33;\n    u_xlat11 = u_xlat11 * u_xlat16_10.x + 1.00001001;\n    u_xlat16_36 = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat11 * u_xlat11;\n    u_xlat11 = max(u_xlat16_36, 0.100000001);\n    u_xlat0.x = u_xlat11 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_19 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_8.x / u_xlat0.x;\n    u_xlat16_36 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_36 = max(u_xlat16_36, 0.0);\n    u_xlat16_36 = min(u_xlat16_36, 100.0);\n    u_xlat16_12.xyz = u_xlat16_7.xyz * vec3(u_xlat16_36) + u_xlat16_12.xyz;\n    SV_Target0.xyz = u_xlat16_12.xyz * u_xlat16_9.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_1.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _MainLightShadowOffset0;\nuniform \tmediump vec4 _MainLightShadowOffset1;\nuniform \tmediump vec4 _MainLightShadowOffset2;\nuniform \tmediump vec4 _MainLightShadowOffset3;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nmediump float u_xlat16_4;\nmediump float u_xlat16_5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec2 u_xlat16_8;\nfloat u_xlat9;\nbool u_xlatb9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_13;\nmediump float u_xlat16_14;\nmediump vec3 u_xlat16_17;\nmediump float u_xlat16_23;\nfloat u_xlat27;\nbool u_xlatb27;\nfloat u_xlat29;\nmediump float u_xlat16_30;\nmediump float u_xlat16_32;\nmediump float u_xlat16_34;\nvoid main()\n{\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_1 = u_xlat16_0.wxyz * _BaseColor.wxyz;\n    u_xlatb27 = unity_OrthoParams.w==0.0;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat29 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat29 = inversesqrt(u_xlat29);\n    u_xlat2.xyz = vec3(u_xlat29) * u_xlat2.xyz;\n    u_xlat16_3.x = (u_xlatb27) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb27) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb27) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat27 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat2.xyz = vec3(u_xlat27) * vs_TEXCOORD2.xyz;\n    u_xlat16_30 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_4 = (-u_xlat16_30) + _Smoothness;\n    u_xlat16_10.xyz = u_xlat16_1.yzw * vec3(u_xlat16_30);\n    u_xlat16_13.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_13.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_13.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_30 = (-_Smoothness) + 1.0;\n    u_xlat16_5 = u_xlat16_30 * u_xlat16_30;\n    u_xlat16_5 = max(u_xlat16_5, 0.0078125);\n    u_xlat16_14 = u_xlat16_5 * u_xlat16_5;\n    u_xlat16_4 = u_xlat16_4 + 1.0;\n    u_xlat16_4 = clamp(u_xlat16_4, 0.0, 1.0);\n    u_xlat16_23 = u_xlat16_5 * 4.0 + 2.0;\n    u_xlatb0 = _MainLightShadowParams.y!=0.0;\n    if(u_xlatb0){\n        u_xlat0.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset0.xyz;\n        vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);\n        u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n        u_xlat6.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset1.xyz;\n        vec3 txVec1 = vec3(u_xlat6.xy,u_xlat6.z);\n        u_xlat16_0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n        u_xlat6.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset2.xyz;\n        vec3 txVec2 = vec3(u_xlat6.xy,u_xlat6.z);\n        u_xlat16_0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n        u_xlat6.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset3.xyz;\n        vec3 txVec3 = vec3(u_xlat6.xy,u_xlat6.z);\n        u_xlat16_0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n        u_xlat16_32 = dot(u_xlat16_0, vec4(0.25, 0.25, 0.25, 0.25));\n    } else {\n        vec3 txVec4 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n        u_xlat16_32 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n        u_xlat16_32 = u_xlat16_32;\n    }\n    u_xlat16_7.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_32 = u_xlat16_32 * _MainLightShadowParams.x + u_xlat16_7.x;\n    u_xlatb0 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb9 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0 = u_xlatb9 || u_xlatb0;\n    u_xlat16_32 = (u_xlatb0) ? 1.0 : u_xlat16_32;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_7.x = (-u_xlat16_32) + 1.0;\n    u_xlat16_32 = u_xlat0.x * u_xlat16_7.x + u_xlat16_32;\n    u_xlat16_7.x = dot((-u_xlat16_3.xyz), u_xlat2.xyz);\n    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;\n    u_xlat16_7.xyz = u_xlat2.xyz * (-u_xlat16_7.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_34 = dot(u_xlat2.xyz, u_xlat16_3.xyz);\n    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);\n    u_xlat16_34 = (-u_xlat16_34) + 1.0;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;\n    u_xlat16_8.x = (-u_xlat16_30) * 0.699999988 + 1.70000005;\n    u_xlat16_30 = u_xlat16_30 * u_xlat16_8.x;\n    u_xlat16_30 = u_xlat16_30 * 6.0;\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_7.xyz, u_xlat16_30);\n    u_xlat16_30 = u_xlat16_0.w + -1.0;\n    u_xlat16_30 = unity_SpecCube0_HDR.w * u_xlat16_30 + 1.0;\n    u_xlat16_30 = max(u_xlat16_30, 0.0);\n    u_xlat16_30 = log2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.y;\n    u_xlat16_30 = exp2(u_xlat16_30);\n    u_xlat16_30 = u_xlat16_30 * unity_SpecCube0_HDR.x;\n    u_xlat16_7.xyz = u_xlat16_0.xyz * vec3(u_xlat16_30);\n    u_xlat16_8.xy = vec2(u_xlat16_5) * vec2(u_xlat16_5) + vec2(-1.0, 1.0);\n    u_xlat16_30 = float(1.0) / u_xlat16_8.y;\n    u_xlat16_17.xyz = (-u_xlat16_13.xyz) + vec3(u_xlat16_4);\n    u_xlat16_17.xyz = vec3(u_xlat16_34) * u_xlat16_17.xyz + u_xlat16_13.xyz;\n    u_xlat0.xyz = vec3(u_xlat16_30) * u_xlat16_17.xyz;\n    u_xlat16_7.xyz = u_xlat0.xyz * u_xlat16_7.xyz;\n    u_xlat16_7.xyz = vs_TEXCOORD8.xyz * u_xlat16_10.xyz + u_xlat16_7.xyz;\n    u_xlat0.x = u_xlat16_32 * unity_LightData.z;\n    u_xlat16_30 = dot(u_xlat2.xyz, _MainLightPosition.xyz);\n    u_xlat16_30 = clamp(u_xlat16_30, 0.0, 1.0);\n    u_xlat16_30 = u_xlat0.x * u_xlat16_30;\n    u_xlat16_17.xyz = vec3(u_xlat16_30) * _MainLightColor.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat27 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat27 = max(u_xlat27, 1.17549435e-38);\n    u_xlat27 = inversesqrt(u_xlat27);\n    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;\n    u_xlat27 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat27 = clamp(u_xlat27, 0.0, 1.0);\n    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat9 = u_xlat27 * u_xlat27;\n    u_xlat9 = u_xlat9 * u_xlat16_8.x + 1.00001001;\n    u_xlat16_3.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat9 * u_xlat9;\n    u_xlat9 = max(u_xlat16_3.x, 0.100000001);\n    u_xlat0.x = u_xlat9 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_23 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_14 / u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);\n    u_xlat16_3.x = min(u_xlat16_3.x, 100.0);\n    u_xlat16_3.xyz = u_xlat16_13.xyz * u_xlat16_3.xxx + u_xlat16_10.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_17.xyz + u_xlat16_7.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_10.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_1.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tmediump vec4 _MainLightShadowOffset0;\nuniform \tmediump vec4 _MainLightShadowOffset1;\nuniform \tmediump vec4 _MainLightShadowOffset2;\nuniform \tmediump vec4 _MainLightShadowOffset3;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD5;\nin highp vec4 vs_TEXCOORD6;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec2 u_xlat16_2;\nmediump vec3 u_xlat16_3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nbvec3 u_xlatb5;\nvec3 u_xlat6;\nmediump vec3 u_xlat16_7;\nmediump vec3 u_xlat16_8;\nmediump vec3 u_xlat16_9;\nmediump vec2 u_xlat16_10;\nfloat u_xlat11;\nbool u_xlatb11;\nmediump vec3 u_xlat16_12;\nmediump float u_xlat16_19;\nmediump vec3 u_xlat16_21;\nmediump float u_xlat16_30;\nfloat u_xlat33;\nbool u_xlatb33;\nfloat u_xlat35;\nmediump float u_xlat16_36;\nmediump float u_xlat16_37;\nmediump float u_xlat16_40;\nmediump float u_xlat16_41;\nmediump float u_xlat16_42;\nvoid main()\n{\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_1 = u_xlat16_0.wxyz * _BaseColor.wxyz;\n    u_xlat16_2.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat16_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_36 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_36 = min(u_xlat16_36, 1.0);\n    u_xlat16_36 = (-u_xlat16_36) + 1.0;\n    u_xlat16_36 = sqrt(u_xlat16_36);\n    u_xlat16_3.z = max(u_xlat16_36, 1.00000002e-16);\n    u_xlatb33 = unity_OrthoParams.w==0.0;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat35 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat35 = inversesqrt(u_xlat35);\n    u_xlat2.xyz = vec3(u_xlat35) * u_xlat2.xyz;\n    u_xlat16_4.x = (u_xlatb33) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb33) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb33) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat2.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat2.xzy * vs_TEXCOORD3.www;\n    u_xlat5.x = vs_TEXCOORD3.x;\n    u_xlat5.y = u_xlat2.x;\n    u_xlat5.z = vs_TEXCOORD2.x;\n    u_xlat5.x = dot(u_xlat16_3.xyz, u_xlat5.xyz);\n    u_xlat6.x = vs_TEXCOORD3.y;\n    u_xlat6.y = u_xlat2.z;\n    u_xlat6.z = vs_TEXCOORD2.y;\n    u_xlat5.y = dot(u_xlat16_3.xyz, u_xlat6.xyz);\n    u_xlat2.x = vs_TEXCOORD3.z;\n    u_xlat2.z = vs_TEXCOORD2.z;\n    u_xlat5.z = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat33 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat2.xyz = vec3(u_xlat33) * u_xlat5.xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_3.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_3.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_3.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_3.xyz = u_xlat16_3.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_7.xyz = u_xlat16_3.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlat16_8.xyz = log2(abs(u_xlat16_3.xyz));\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_8.xyz = exp2(u_xlat16_8.xyz);\n    u_xlat16_8.xyz = u_xlat16_8.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlatb5.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_3.xyzx).xyz;\n    u_xlat16_3.x = (u_xlatb5.x) ? u_xlat16_7.x : u_xlat16_8.x;\n    u_xlat16_3.y = (u_xlatb5.y) ? u_xlat16_7.y : u_xlat16_8.y;\n    u_xlat16_3.z = (u_xlatb5.z) ? u_xlat16_7.z : u_xlat16_8.z;\n    u_xlat16_3.xyz = max(u_xlat16_3.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_36 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_37 = (-u_xlat16_36) + _Smoothness;\n    u_xlat16_12.xyz = u_xlat16_1.yzw * vec3(u_xlat16_36);\n    u_xlat16_7.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_7.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_7.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_36 = (-_Smoothness) + 1.0;\n    u_xlat16_40 = u_xlat16_36 * u_xlat16_36;\n    u_xlat16_40 = max(u_xlat16_40, 0.0078125);\n    u_xlat16_8.x = u_xlat16_40 * u_xlat16_40;\n    u_xlat16_37 = u_xlat16_37 + 1.0;\n    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);\n    u_xlat16_19 = u_xlat16_40 * 4.0 + 2.0;\n    u_xlatb0 = _MainLightShadowParams.y!=0.0;\n    if(u_xlatb0){\n        u_xlat0.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset0.xyz;\n        vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);\n        u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n        u_xlat5.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset1.xyz;\n        vec3 txVec1 = vec3(u_xlat5.xy,u_xlat5.z);\n        u_xlat16_0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n        u_xlat5.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset2.xyz;\n        vec3 txVec2 = vec3(u_xlat5.xy,u_xlat5.z);\n        u_xlat16_0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n        u_xlat5.xyz = vs_TEXCOORD6.xyz + _MainLightShadowOffset3.xyz;\n        vec3 txVec3 = vec3(u_xlat5.xy,u_xlat5.z);\n        u_xlat16_0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n        u_xlat16_30 = dot(u_xlat16_0, vec4(0.25, 0.25, 0.25, 0.25));\n    } else {\n        vec3 txVec4 = vec3(vs_TEXCOORD6.xy,vs_TEXCOORD6.z);\n        u_xlat16_30 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n        u_xlat16_30 = u_xlat16_30;\n    }\n    u_xlat16_41 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_30 = u_xlat16_30 * _MainLightShadowParams.x + u_xlat16_41;\n    u_xlatb0 = 0.0>=vs_TEXCOORD6.z;\n    u_xlatb11 = vs_TEXCOORD6.z>=1.0;\n    u_xlatb0 = u_xlatb11 || u_xlatb0;\n    u_xlat16_30 = (u_xlatb0) ? 1.0 : u_xlat16_30;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_41 = (-u_xlat16_30) + 1.0;\n    u_xlat16_30 = u_xlat0.x * u_xlat16_41 + u_xlat16_30;\n    u_xlat16_41 = dot((-u_xlat16_4.xyz), u_xlat2.xyz);\n    u_xlat16_41 = u_xlat16_41 + u_xlat16_41;\n    u_xlat16_9.xyz = u_xlat2.xyz * (-vec3(u_xlat16_41)) + (-u_xlat16_4.xyz);\n    u_xlat16_41 = dot(u_xlat2.xyz, u_xlat16_4.xyz);\n    u_xlat16_41 = clamp(u_xlat16_41, 0.0, 1.0);\n    u_xlat16_41 = (-u_xlat16_41) + 1.0;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_41 = u_xlat16_41 * u_xlat16_41;\n    u_xlat16_42 = (-u_xlat16_36) * 0.699999988 + 1.70000005;\n    u_xlat16_36 = u_xlat16_36 * u_xlat16_42;\n    u_xlat16_36 = u_xlat16_36 * 6.0;\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_9.xyz, u_xlat16_36);\n    u_xlat16_36 = u_xlat16_0.w + -1.0;\n    u_xlat16_36 = unity_SpecCube0_HDR.w * u_xlat16_36 + 1.0;\n    u_xlat16_36 = max(u_xlat16_36, 0.0);\n    u_xlat16_36 = log2(u_xlat16_36);\n    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.y;\n    u_xlat16_36 = exp2(u_xlat16_36);\n    u_xlat16_36 = u_xlat16_36 * unity_SpecCube0_HDR.x;\n    u_xlat16_9.xyz = u_xlat16_0.xyz * vec3(u_xlat16_36);\n    u_xlat16_10.xy = vec2(u_xlat16_40) * vec2(u_xlat16_40) + vec2(-1.0, 1.0);\n    u_xlat16_36 = float(1.0) / u_xlat16_10.y;\n    u_xlat16_21.xyz = (-u_xlat16_7.xyz) + vec3(u_xlat16_37);\n    u_xlat16_21.xyz = vec3(u_xlat16_41) * u_xlat16_21.xyz + u_xlat16_7.xyz;\n    u_xlat0.xyz = vec3(u_xlat16_36) * u_xlat16_21.xyz;\n    u_xlat16_9.xyz = u_xlat0.xyz * u_xlat16_9.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_12.xyz + u_xlat16_9.xyz;\n    u_xlat0.x = u_xlat16_30 * unity_LightData.z;\n    u_xlat16_36 = dot(u_xlat2.xyz, _MainLightPosition.xyz);\n    u_xlat16_36 = clamp(u_xlat16_36, 0.0, 1.0);\n    u_xlat16_36 = u_xlat0.x * u_xlat16_36;\n    u_xlat16_9.xyz = vec3(u_xlat16_36) * _MainLightColor.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat33 = max(u_xlat33, 1.17549435e-38);\n    u_xlat33 = inversesqrt(u_xlat33);\n    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;\n    u_xlat33 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);\n    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat11 = u_xlat33 * u_xlat33;\n    u_xlat11 = u_xlat11 * u_xlat16_10.x + 1.00001001;\n    u_xlat16_36 = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat11 * u_xlat11;\n    u_xlat11 = max(u_xlat16_36, 0.100000001);\n    u_xlat0.x = u_xlat11 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_19 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_8.x / u_xlat0.x;\n    u_xlat16_36 = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_36 = max(u_xlat16_36, 0.0);\n    u_xlat16_36 = min(u_xlat16_36, 100.0);\n    u_xlat16_4.xyz = u_xlat16_7.xyz * vec3(u_xlat16_36) + u_xlat16_12.xyz;\n    u_xlat16_3.xyz = u_xlat16_4.xyz * u_xlat16_9.xyz + u_xlat16_3.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_12.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_1.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowOffset0;\nuniform \tmediump vec4 _MainLightShadowOffset1;\nuniform \tmediump vec4 _MainLightShadowOffset2;\nuniform \tmediump vec4 _MainLightShadowOffset3;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nbvec4 u_xlatb4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec2 u_xlat16_11;\nfloat u_xlat12;\nbool u_xlatb12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_20;\nmediump float u_xlat16_21;\nmediump vec3 u_xlat16_23;\nmediump float u_xlat16_33;\nfloat u_xlat36;\nint u_xlati36;\nuint u_xlatu36;\nbool u_xlatb36;\nfloat u_xlat38;\nmediump float u_xlat16_39;\nmediump float u_xlat16_45;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_1 = u_xlat16_0.wxyz * _BaseColor.wxyz;\n    u_xlatb36 = unity_OrthoParams.w==0.0;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat38 = inversesqrt(u_xlat38);\n    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz;\n    u_xlat16_3.x = (u_xlatb36) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb36) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb36) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat36 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat2.xyz = vec3(u_xlat36) * vs_TEXCOORD2.xyz;\n    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.y = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat4.z = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat4.w = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlatb4 = lessThan(u_xlat4, _CascadeShadowSplitSphereRadii);\n    u_xlat16_5.x = (u_xlatb4.x) ? float(1.0) : float(0.0);\n    u_xlat16_5.y = (u_xlatb4.y) ? float(1.0) : float(0.0);\n    u_xlat16_5.z = (u_xlatb4.z) ? float(1.0) : float(0.0);\n    u_xlat16_5.w = (u_xlatb4.w) ? float(1.0) : float(0.0);\n    u_xlat16_8.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_8.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_8.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_8.xyz = u_xlat16_5.yzw + u_xlat16_8.xyz;\n    u_xlat16_5.yzw = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_39 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_39 = (-u_xlat16_39) + 4.0;\n    u_xlatu36 = uint(u_xlat16_39);\n    u_xlati36 = int(int(u_xlatu36) << 2);\n    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 1)].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati36].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;\n    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 3)].xyz;\n    u_xlat16_39 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_8.x = (-u_xlat16_39) + _Smoothness;\n    u_xlat16_13.xyz = u_xlat16_1.yzw * vec3(u_xlat16_39);\n    u_xlat16_20.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_20.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_20.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_39 = (-_Smoothness) + 1.0;\n    u_xlat16_9 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_9 = max(u_xlat16_9, 0.0078125);\n    u_xlat16_21 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_8.x = u_xlat16_8.x + 1.0;\n    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_9 * 4.0 + 2.0;\n    u_xlatb0 = _MainLightShadowParams.y!=0.0;\n    if(u_xlatb0){\n        u_xlat0.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;\n        vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);\n        u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n        u_xlat6.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;\n        vec3 txVec1 = vec3(u_xlat6.xy,u_xlat6.z);\n        u_xlat16_0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n        u_xlat6.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;\n        vec3 txVec2 = vec3(u_xlat6.xy,u_xlat6.z);\n        u_xlat16_0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n        u_xlat6.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;\n        vec3 txVec3 = vec3(u_xlat6.xy,u_xlat6.z);\n        u_xlat16_0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n        u_xlat16_45 = dot(u_xlat16_0, vec4(0.25, 0.25, 0.25, 0.25));\n    } else {\n        vec3 txVec4 = vec3(u_xlat4.xy,u_xlat4.z);\n        u_xlat16_45 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n        u_xlat16_45 = u_xlat16_45;\n    }\n    u_xlat16_10.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_45 = u_xlat16_45 * _MainLightShadowParams.x + u_xlat16_10.x;\n    u_xlatb0 = 0.0>=u_xlat4.z;\n    u_xlatb12 = u_xlat4.z>=1.0;\n    u_xlatb0 = u_xlatb12 || u_xlatb0;\n    u_xlat16_45 = (u_xlatb0) ? 1.0 : u_xlat16_45;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_10.x = (-u_xlat16_45) + 1.0;\n    u_xlat16_45 = u_xlat0.x * u_xlat16_10.x + u_xlat16_45;\n    u_xlat16_10.x = dot((-u_xlat16_3.xyz), u_xlat2.xyz);\n    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;\n    u_xlat16_10.xyz = u_xlat2.xyz * (-u_xlat16_10.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_46 = dot(u_xlat2.xyz, u_xlat16_3.xyz);\n    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);\n    u_xlat16_46 = (-u_xlat16_46) + 1.0;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_11.x = (-u_xlat16_39) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_11.x;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_39);\n    u_xlat16_39 = u_xlat16_0.w + -1.0;\n    u_xlat16_39 = unity_SpecCube0_HDR.w * u_xlat16_39 + 1.0;\n    u_xlat16_39 = max(u_xlat16_39, 0.0);\n    u_xlat16_39 = log2(u_xlat16_39);\n    u_xlat16_39 = u_xlat16_39 * unity_SpecCube0_HDR.y;\n    u_xlat16_39 = exp2(u_xlat16_39);\n    u_xlat16_39 = u_xlat16_39 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_0.xyz * vec3(u_xlat16_39);\n    u_xlat16_11.xy = vec2(u_xlat16_9) * vec2(u_xlat16_9) + vec2(-1.0, 1.0);\n    u_xlat16_39 = float(1.0) / u_xlat16_11.y;\n    u_xlat16_23.xyz = (-u_xlat16_20.xyz) + u_xlat16_8.xxx;\n    u_xlat16_23.xyz = vec3(u_xlat16_46) * u_xlat16_23.xyz + u_xlat16_20.xyz;\n    u_xlat0.xyz = vec3(u_xlat16_39) * u_xlat16_23.xyz;\n    u_xlat16_10.xyz = u_xlat0.xyz * u_xlat16_10.xyz;\n    u_xlat16_10.xyz = vs_TEXCOORD8.xyz * u_xlat16_13.xyz + u_xlat16_10.xyz;\n    u_xlat0.x = u_xlat16_45 * unity_LightData.z;\n    u_xlat16_39 = dot(u_xlat2.xyz, _MainLightPosition.xyz);\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_39 = u_xlat0.x * u_xlat16_39;\n    u_xlat16_23.xyz = vec3(u_xlat16_39) * _MainLightColor.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = max(u_xlat36, 1.17549435e-38);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;\n    u_xlat36 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);\n    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = u_xlat36 * u_xlat36;\n    u_xlat12 = u_xlat12 * u_xlat16_11.x + 1.00001001;\n    u_xlat16_3.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat12 * u_xlat12;\n    u_xlat12 = max(u_xlat16_3.x, 0.100000001);\n    u_xlat0.x = u_xlat12 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_33 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_21 / u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);\n    u_xlat16_3.x = min(u_xlat16_3.x, 100.0);\n    u_xlat16_13.xyz = u_xlat16_20.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;\n    SV_Target0.xyz = u_xlat16_13.xyz * u_xlat16_23.xyz + u_xlat16_10.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_1.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowOffset0;\nuniform \tmediump vec4 _MainLightShadowOffset1;\nuniform \tmediump vec4 _MainLightShadowOffset2;\nuniform \tmediump vec4 _MainLightShadowOffset3;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec2 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec3 u_xlat16_3;\nbvec4 u_xlatb3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nbvec3 u_xlatb7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec2 u_xlat16_13;\nfloat u_xlat14;\nbool u_xlatb14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_25;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_39;\nfloat u_xlat42;\nint u_xlati42;\nuint u_xlatu42;\nbool u_xlatb42;\nfloat u_xlat44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_46;\nmediump float u_xlat16_51;\nmediump float u_xlat16_52;\nmediump float u_xlat16_53;\nmediump float u_xlat16_54;\nvoid main()\n{\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_1 = u_xlat16_0.wxyz * _BaseColor.wxyz;\n    u_xlat16_2.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat16_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_45 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_45 = min(u_xlat16_45, 1.0);\n    u_xlat16_45 = (-u_xlat16_45) + 1.0;\n    u_xlat16_45 = sqrt(u_xlat16_45);\n    u_xlat16_3.z = max(u_xlat16_45, 1.00000002e-16);\n    u_xlatb42 = unity_OrthoParams.w==0.0;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat44 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat44 = inversesqrt(u_xlat44);\n    u_xlat2.xyz = vec3(u_xlat44) * u_xlat2.xyz;\n    u_xlat16_4.x = (u_xlatb42) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb42) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb42) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat2.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat2.xzy * vs_TEXCOORD3.www;\n    u_xlat5.x = vs_TEXCOORD3.x;\n    u_xlat5.y = u_xlat2.x;\n    u_xlat5.z = vs_TEXCOORD2.x;\n    u_xlat5.x = dot(u_xlat16_3.xyz, u_xlat5.xyz);\n    u_xlat6.x = vs_TEXCOORD3.y;\n    u_xlat6.y = u_xlat2.z;\n    u_xlat6.z = vs_TEXCOORD2.y;\n    u_xlat5.y = dot(u_xlat16_3.xyz, u_xlat6.xyz);\n    u_xlat2.x = vs_TEXCOORD3.z;\n    u_xlat2.z = vs_TEXCOORD2.z;\n    u_xlat5.z = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat42 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat2.xyz = vec3(u_xlat42) * u_xlat5.xyz;\n    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat3.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat3.y = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat3.z = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat3.w = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlatb3 = lessThan(u_xlat3, _CascadeShadowSplitSphereRadii);\n    u_xlat16_5.x = (u_xlatb3.x) ? float(1.0) : float(0.0);\n    u_xlat16_5.y = (u_xlatb3.y) ? float(1.0) : float(0.0);\n    u_xlat16_5.z = (u_xlatb3.z) ? float(1.0) : float(0.0);\n    u_xlat16_5.w = (u_xlatb3.w) ? float(1.0) : float(0.0);\n    u_xlat16_9.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_9.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_9.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_9.xyz = u_xlat16_5.yzw + u_xlat16_9.xyz;\n    u_xlat16_5.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_46 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_46 = (-u_xlat16_46) + 4.0;\n    u_xlatu42 = uint(u_xlat16_46);\n    u_xlati42 = int(int(u_xlatu42) << 2);\n    u_xlat6.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati42 + 1)].xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati42].xyz * vs_TEXCOORD1.xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati42 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat6.xyz;\n    u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati42 + 3)].xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_10.xyz = u_xlat16_9.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlat16_11.xyz = log2(abs(u_xlat16_9.xyz));\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_11.xyz = exp2(u_xlat16_11.xyz);\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlatb7.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_9.xyzx).xyz;\n    u_xlat16_9.x = (u_xlatb7.x) ? u_xlat16_10.x : u_xlat16_11.x;\n    u_xlat16_9.y = (u_xlatb7.y) ? u_xlat16_10.y : u_xlat16_11.y;\n    u_xlat16_9.z = (u_xlatb7.z) ? u_xlat16_10.z : u_xlat16_11.z;\n    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_46 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_51 = (-u_xlat16_46) + _Smoothness;\n    u_xlat16_15.xyz = u_xlat16_1.yzw * vec3(u_xlat16_46);\n    u_xlat16_10.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_10.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_46 = (-_Smoothness) + 1.0;\n    u_xlat16_52 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_52 = max(u_xlat16_52, 0.0078125);\n    u_xlat16_11.x = u_xlat16_52 * u_xlat16_52;\n    u_xlat16_51 = u_xlat16_51 + 1.0;\n    u_xlat16_51 = clamp(u_xlat16_51, 0.0, 1.0);\n    u_xlat16_25 = u_xlat16_52 * 4.0 + 2.0;\n    u_xlatb0 = _MainLightShadowParams.y!=0.0;\n    if(u_xlatb0){\n        u_xlat0.xyz = u_xlat6.xyz + _MainLightShadowOffset0.xyz;\n        vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);\n        u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n        u_xlat7.xyz = u_xlat6.xyz + _MainLightShadowOffset1.xyz;\n        vec3 txVec1 = vec3(u_xlat7.xy,u_xlat7.z);\n        u_xlat16_0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n        u_xlat7.xyz = u_xlat6.xyz + _MainLightShadowOffset2.xyz;\n        vec3 txVec2 = vec3(u_xlat7.xy,u_xlat7.z);\n        u_xlat16_0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n        u_xlat7.xyz = u_xlat6.xyz + _MainLightShadowOffset3.xyz;\n        vec3 txVec3 = vec3(u_xlat7.xy,u_xlat7.z);\n        u_xlat16_0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n        u_xlat16_39 = dot(u_xlat16_0, vec4(0.25, 0.25, 0.25, 0.25));\n    } else {\n        vec3 txVec4 = vec3(u_xlat6.xy,u_xlat6.z);\n        u_xlat16_39 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n        u_xlat16_39 = u_xlat16_39;\n    }\n    u_xlat16_53 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_39 = u_xlat16_39 * _MainLightShadowParams.x + u_xlat16_53;\n    u_xlatb0 = 0.0>=u_xlat6.z;\n    u_xlatb14 = u_xlat6.z>=1.0;\n    u_xlatb0 = u_xlatb14 || u_xlatb0;\n    u_xlat16_39 = (u_xlatb0) ? 1.0 : u_xlat16_39;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_53 = (-u_xlat16_39) + 1.0;\n    u_xlat16_39 = u_xlat0.x * u_xlat16_53 + u_xlat16_39;\n    u_xlat16_53 = dot((-u_xlat16_4.xyz), u_xlat2.xyz);\n    u_xlat16_53 = u_xlat16_53 + u_xlat16_53;\n    u_xlat16_12.xyz = u_xlat2.xyz * (-vec3(u_xlat16_53)) + (-u_xlat16_4.xyz);\n    u_xlat16_53 = dot(u_xlat2.xyz, u_xlat16_4.xyz);\n    u_xlat16_53 = clamp(u_xlat16_53, 0.0, 1.0);\n    u_xlat16_53 = (-u_xlat16_53) + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_54 = (-u_xlat16_46) * 0.699999988 + 1.70000005;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_54;\n    u_xlat16_46 = u_xlat16_46 * 6.0;\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_46);\n    u_xlat16_46 = u_xlat16_0.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = max(u_xlat16_46, 0.0);\n    u_xlat16_46 = log2(u_xlat16_46);\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.y;\n    u_xlat16_46 = exp2(u_xlat16_46);\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_12.xyz = u_xlat16_0.xyz * vec3(u_xlat16_46);\n    u_xlat16_13.xy = vec2(u_xlat16_52) * vec2(u_xlat16_52) + vec2(-1.0, 1.0);\n    u_xlat16_46 = float(1.0) / u_xlat16_13.y;\n    u_xlat16_27.xyz = (-u_xlat16_10.xyz) + vec3(u_xlat16_51);\n    u_xlat16_27.xyz = vec3(u_xlat16_53) * u_xlat16_27.xyz + u_xlat16_10.xyz;\n    u_xlat0.xyz = vec3(u_xlat16_46) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat16_12.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_15.xyz + u_xlat16_12.xyz;\n    u_xlat0.x = u_xlat16_39 * unity_LightData.z;\n    u_xlat16_46 = dot(u_xlat2.xyz, _MainLightPosition.xyz);\n    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);\n    u_xlat16_46 = u_xlat0.x * u_xlat16_46;\n    u_xlat16_12.xyz = vec3(u_xlat16_46) * _MainLightColor.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat42 = max(u_xlat42, 1.17549435e-38);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;\n    u_xlat42 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);\n    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = u_xlat42 * u_xlat42;\n    u_xlat14 = u_xlat14 * u_xlat16_13.x + 1.00001001;\n    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat14 * u_xlat14;\n    u_xlat14 = max(u_xlat16_4.x, 0.100000001);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_25 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_11.x / u_xlat0.x;\n    u_xlat16_4.x = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = min(u_xlat16_4.x, 100.0);\n    u_xlat16_15.xyz = u_xlat16_10.xyz * u_xlat16_4.xxx + u_xlat16_15.xyz;\n    SV_Target0.xyz = u_xlat16_15.xyz * u_xlat16_12.xyz + u_xlat16_9.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_1.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowOffset0;\nuniform \tmediump vec4 _MainLightShadowOffset1;\nuniform \tmediump vec4 _MainLightShadowOffset2;\nuniform \tmediump vec4 _MainLightShadowOffset3;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(3) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nvec3 u_xlat2;\nmediump vec3 u_xlat16_3;\nvec4 u_xlat4;\nbvec4 u_xlatb4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nmediump vec3 u_xlat16_8;\nmediump float u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec2 u_xlat16_11;\nfloat u_xlat12;\nbool u_xlatb12;\nmediump vec3 u_xlat16_13;\nmediump vec3 u_xlat16_20;\nmediump float u_xlat16_21;\nmediump vec3 u_xlat16_23;\nmediump float u_xlat16_33;\nfloat u_xlat36;\nint u_xlati36;\nuint u_xlatu36;\nbool u_xlatb36;\nfloat u_xlat38;\nmediump float u_xlat16_39;\nmediump float u_xlat16_45;\nmediump float u_xlat16_46;\nvoid main()\n{\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_1 = u_xlat16_0.wxyz * _BaseColor.wxyz;\n    u_xlatb36 = unity_OrthoParams.w==0.0;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat38 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat38 = inversesqrt(u_xlat38);\n    u_xlat2.xyz = vec3(u_xlat38) * u_xlat2.xyz;\n    u_xlat16_3.x = (u_xlatb36) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_3.y = (u_xlatb36) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_3.z = (u_xlatb36) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat36 = dot(vs_TEXCOORD2.xyz, vs_TEXCOORD2.xyz);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat2.xyz = vec3(u_xlat36) * vs_TEXCOORD2.xyz;\n    u_xlat4.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat4.x = dot(u_xlat4.xyz, u_xlat4.xyz);\n    u_xlat4.y = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat4.z = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat4.w = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlatb4 = lessThan(u_xlat4, _CascadeShadowSplitSphereRadii);\n    u_xlat16_5.x = (u_xlatb4.x) ? float(1.0) : float(0.0);\n    u_xlat16_5.y = (u_xlatb4.y) ? float(1.0) : float(0.0);\n    u_xlat16_5.z = (u_xlatb4.z) ? float(1.0) : float(0.0);\n    u_xlat16_5.w = (u_xlatb4.w) ? float(1.0) : float(0.0);\n    u_xlat16_8.x = (u_xlatb4.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_8.y = (u_xlatb4.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_8.z = (u_xlatb4.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_8.xyz = u_xlat16_5.yzw + u_xlat16_8.xyz;\n    u_xlat16_5.yzw = max(u_xlat16_8.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_39 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_39 = (-u_xlat16_39) + 4.0;\n    u_xlatu36 = uint(u_xlat16_39);\n    u_xlati36 = int(int(u_xlatu36) << 2);\n    u_xlat4.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 1)].xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati36].xyz * vs_TEXCOORD1.xxx + u_xlat4.xyz;\n    u_xlat4.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat4.xyz;\n    u_xlat4.xyz = u_xlat4.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati36 + 3)].xyz;\n    u_xlat16_39 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_8.x = (-u_xlat16_39) + _Smoothness;\n    u_xlat16_13.xyz = u_xlat16_1.yzw * vec3(u_xlat16_39);\n    u_xlat16_20.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_20.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_20.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_39 = (-_Smoothness) + 1.0;\n    u_xlat16_9 = u_xlat16_39 * u_xlat16_39;\n    u_xlat16_9 = max(u_xlat16_9, 0.0078125);\n    u_xlat16_21 = u_xlat16_9 * u_xlat16_9;\n    u_xlat16_8.x = u_xlat16_8.x + 1.0;\n    u_xlat16_8.x = clamp(u_xlat16_8.x, 0.0, 1.0);\n    u_xlat16_33 = u_xlat16_9 * 4.0 + 2.0;\n    u_xlatb0 = _MainLightShadowParams.y!=0.0;\n    if(u_xlatb0){\n        u_xlat0.xyz = u_xlat4.xyz + _MainLightShadowOffset0.xyz;\n        vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);\n        u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n        u_xlat6.xyz = u_xlat4.xyz + _MainLightShadowOffset1.xyz;\n        vec3 txVec1 = vec3(u_xlat6.xy,u_xlat6.z);\n        u_xlat16_0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n        u_xlat6.xyz = u_xlat4.xyz + _MainLightShadowOffset2.xyz;\n        vec3 txVec2 = vec3(u_xlat6.xy,u_xlat6.z);\n        u_xlat16_0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n        u_xlat6.xyz = u_xlat4.xyz + _MainLightShadowOffset3.xyz;\n        vec3 txVec3 = vec3(u_xlat6.xy,u_xlat6.z);\n        u_xlat16_0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n        u_xlat16_45 = dot(u_xlat16_0, vec4(0.25, 0.25, 0.25, 0.25));\n    } else {\n        vec3 txVec4 = vec3(u_xlat4.xy,u_xlat4.z);\n        u_xlat16_45 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n        u_xlat16_45 = u_xlat16_45;\n    }\n    u_xlat16_10.x = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_45 = u_xlat16_45 * _MainLightShadowParams.x + u_xlat16_10.x;\n    u_xlatb0 = 0.0>=u_xlat4.z;\n    u_xlatb12 = u_xlat4.z>=1.0;\n    u_xlatb0 = u_xlatb12 || u_xlatb0;\n    u_xlat16_45 = (u_xlatb0) ? 1.0 : u_xlat16_45;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_10.x = (-u_xlat16_45) + 1.0;\n    u_xlat16_45 = u_xlat0.x * u_xlat16_10.x + u_xlat16_45;\n    u_xlat16_10.x = dot((-u_xlat16_3.xyz), u_xlat2.xyz);\n    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;\n    u_xlat16_10.xyz = u_xlat2.xyz * (-u_xlat16_10.xxx) + (-u_xlat16_3.xyz);\n    u_xlat16_46 = dot(u_xlat2.xyz, u_xlat16_3.xyz);\n    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);\n    u_xlat16_46 = (-u_xlat16_46) + 1.0;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_11.x = (-u_xlat16_39) * 0.699999988 + 1.70000005;\n    u_xlat16_39 = u_xlat16_39 * u_xlat16_11.x;\n    u_xlat16_39 = u_xlat16_39 * 6.0;\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_10.xyz, u_xlat16_39);\n    u_xlat16_39 = u_xlat16_0.w + -1.0;\n    u_xlat16_39 = unity_SpecCube0_HDR.w * u_xlat16_39 + 1.0;\n    u_xlat16_39 = max(u_xlat16_39, 0.0);\n    u_xlat16_39 = log2(u_xlat16_39);\n    u_xlat16_39 = u_xlat16_39 * unity_SpecCube0_HDR.y;\n    u_xlat16_39 = exp2(u_xlat16_39);\n    u_xlat16_39 = u_xlat16_39 * unity_SpecCube0_HDR.x;\n    u_xlat16_10.xyz = u_xlat16_0.xyz * vec3(u_xlat16_39);\n    u_xlat16_11.xy = vec2(u_xlat16_9) * vec2(u_xlat16_9) + vec2(-1.0, 1.0);\n    u_xlat16_39 = float(1.0) / u_xlat16_11.y;\n    u_xlat16_23.xyz = (-u_xlat16_20.xyz) + u_xlat16_8.xxx;\n    u_xlat16_23.xyz = vec3(u_xlat16_46) * u_xlat16_23.xyz + u_xlat16_20.xyz;\n    u_xlat0.xyz = vec3(u_xlat16_39) * u_xlat16_23.xyz;\n    u_xlat16_10.xyz = u_xlat0.xyz * u_xlat16_10.xyz;\n    u_xlat16_10.xyz = vs_TEXCOORD8.xyz * u_xlat16_13.xyz + u_xlat16_10.xyz;\n    u_xlat0.x = u_xlat16_45 * unity_LightData.z;\n    u_xlat16_39 = dot(u_xlat2.xyz, _MainLightPosition.xyz);\n    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);\n    u_xlat16_39 = u_xlat0.x * u_xlat16_39;\n    u_xlat16_23.xyz = vec3(u_xlat16_39) * _MainLightColor.xyz;\n    u_xlat0.xyz = u_xlat16_3.xyz + _MainLightPosition.xyz;\n    u_xlat36 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat36 = max(u_xlat36, 1.17549435e-38);\n    u_xlat36 = inversesqrt(u_xlat36);\n    u_xlat0.xyz = vec3(u_xlat36) * u_xlat0.xyz;\n    u_xlat36 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);\n    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat12 = u_xlat36 * u_xlat36;\n    u_xlat12 = u_xlat12 * u_xlat16_11.x + 1.00001001;\n    u_xlat16_3.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat12 * u_xlat12;\n    u_xlat12 = max(u_xlat16_3.x, 0.100000001);\n    u_xlat0.x = u_xlat12 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_33 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_21 / u_xlat0.x;\n    u_xlat16_3.x = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_3.x = max(u_xlat16_3.x, 0.0);\n    u_xlat16_3.x = min(u_xlat16_3.x, 100.0);\n    u_xlat16_3.xyz = u_xlat16_20.xyz * u_xlat16_3.xxx + u_xlat16_13.xyz;\n    u_xlat16_3.xyz = u_xlat16_3.xyz * u_xlat16_23.xyz + u_xlat16_10.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_13.xyz + u_xlat16_3.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_1.x : 1.0;\n    return;\n}\n\n","\n#version 300 es\n#ifdef GL_EXT_shader_texture_lod\n#extension GL_EXT_shader_texture_lod : enable\n#endif\n\nprecision highp float;\nprecision highp int;\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 _MainLightPosition;\nuniform \tmediump vec4 _MainLightColor;\nuniform \tvec3 _WorldSpaceCameraPos;\nuniform \tvec2 _GlobalMipBias;\nuniform \tvec4 unity_OrthoParams;\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixV[4];\nuniform \tvec4 hlslcc_mtx4x4_MainLightWorldToShadow[20];\nuniform \tvec4 _CascadeShadowSplitSpheres0;\nuniform \tvec4 _CascadeShadowSplitSpheres1;\nuniform \tvec4 _CascadeShadowSplitSpheres2;\nuniform \tvec4 _CascadeShadowSplitSpheres3;\nuniform \tvec4 _CascadeShadowSplitSphereRadii;\nuniform \tmediump vec4 _MainLightShadowOffset0;\nuniform \tmediump vec4 _MainLightShadowOffset1;\nuniform \tmediump vec4 _MainLightShadowOffset2;\nuniform \tmediump vec4 _MainLightShadowOffset3;\nuniform \tmediump vec4 _MainLightShadowParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nUNITY_LOCATION(0) uniform mediump samplerCube unity_SpecCube0;\nUNITY_LOCATION(1) uniform mediump sampler2D _BaseMap;\nUNITY_LOCATION(2) uniform mediump sampler2D _BumpMap;\nUNITY_LOCATION(3) uniform mediump sampler2D _MainLightShadowmapTexture;\nUNITY_LOCATION(4) uniform mediump sampler2DShadow hlslcc_zcmp_MainLightShadowmapTexture;\nin highp vec2 vs_TEXCOORD0;\nin highp vec3 vs_TEXCOORD1;\nin highp vec3 vs_TEXCOORD2;\nin mediump vec4 vs_TEXCOORD3;\nin mediump vec4 vs_TEXCOORD5;\nin mediump vec3 vs_TEXCOORD8;\nlayout(location = 0) out mediump vec4 SV_Target0;\nvec3 u_xlat0;\nmediump vec4 u_xlat16_0;\nbool u_xlatb0;\nmediump vec4 u_xlat16_1;\nvec4 u_xlat2;\nmediump vec2 u_xlat16_2;\nvec4 u_xlat3;\nmediump vec3 u_xlat16_3;\nbvec4 u_xlatb3;\nmediump vec3 u_xlat16_4;\nvec3 u_xlat5;\nmediump vec4 u_xlat16_5;\nvec3 u_xlat6;\nvec3 u_xlat7;\nbvec3 u_xlatb7;\nvec3 u_xlat8;\nmediump vec3 u_xlat16_9;\nmediump vec3 u_xlat16_10;\nmediump vec3 u_xlat16_11;\nmediump vec3 u_xlat16_12;\nmediump vec2 u_xlat16_13;\nfloat u_xlat14;\nbool u_xlatb14;\nmediump vec3 u_xlat16_15;\nmediump float u_xlat16_25;\nmediump vec3 u_xlat16_27;\nmediump float u_xlat16_39;\nfloat u_xlat42;\nint u_xlati42;\nuint u_xlatu42;\nbool u_xlatb42;\nfloat u_xlat44;\nmediump float u_xlat16_45;\nmediump float u_xlat16_46;\nmediump float u_xlat16_51;\nmediump float u_xlat16_52;\nmediump float u_xlat16_53;\nmediump float u_xlat16_54;\nvoid main()\n{\n    u_xlat16_0 = texture(_BaseMap, vs_TEXCOORD0.xy, _GlobalMipBias.x);\n    u_xlat16_1 = u_xlat16_0.wxyz * _BaseColor.wxyz;\n    u_xlat16_2.xy = texture(_BumpMap, vs_TEXCOORD0.xy, _GlobalMipBias.x).yw;\n    u_xlat16_3.xy = u_xlat16_2.yx * vec2(2.0, 2.0) + vec2(-1.0, -1.0);\n    u_xlat16_45 = dot(u_xlat16_3.xy, u_xlat16_3.xy);\n    u_xlat16_45 = min(u_xlat16_45, 1.0);\n    u_xlat16_45 = (-u_xlat16_45) + 1.0;\n    u_xlat16_45 = sqrt(u_xlat16_45);\n    u_xlat16_3.z = max(u_xlat16_45, 1.00000002e-16);\n    u_xlatb42 = unity_OrthoParams.w==0.0;\n    u_xlat2.xyz = (-vs_TEXCOORD1.xyz) + _WorldSpaceCameraPos.xyz;\n    u_xlat44 = dot(u_xlat2.xyz, u_xlat2.xyz);\n    u_xlat44 = inversesqrt(u_xlat44);\n    u_xlat2.xyz = vec3(u_xlat44) * u_xlat2.xyz;\n    u_xlat16_4.x = (u_xlatb42) ? u_xlat2.x : hlslcc_mtx4x4unity_MatrixV[0].z;\n    u_xlat16_4.y = (u_xlatb42) ? u_xlat2.y : hlslcc_mtx4x4unity_MatrixV[1].z;\n    u_xlat16_4.z = (u_xlatb42) ? u_xlat2.z : hlslcc_mtx4x4unity_MatrixV[2].z;\n    u_xlat2.xyz = vs_TEXCOORD2.zxy * vs_TEXCOORD3.yzx;\n    u_xlat2.xyz = vs_TEXCOORD2.yzx * vs_TEXCOORD3.zxy + (-u_xlat2.xyz);\n    u_xlat2.xyz = u_xlat2.xzy * vs_TEXCOORD3.www;\n    u_xlat5.x = vs_TEXCOORD3.x;\n    u_xlat5.y = u_xlat2.x;\n    u_xlat5.z = vs_TEXCOORD2.x;\n    u_xlat5.x = dot(u_xlat16_3.xyz, u_xlat5.xyz);\n    u_xlat6.x = vs_TEXCOORD3.y;\n    u_xlat6.y = u_xlat2.z;\n    u_xlat6.z = vs_TEXCOORD2.y;\n    u_xlat5.y = dot(u_xlat16_3.xyz, u_xlat6.xyz);\n    u_xlat2.x = vs_TEXCOORD3.z;\n    u_xlat2.z = vs_TEXCOORD2.z;\n    u_xlat5.z = dot(u_xlat16_3.xyz, u_xlat2.xyz);\n    u_xlat42 = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat2.xyz = vec3(u_xlat42) * u_xlat5.xyz;\n    u_xlat5.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres0.xyz);\n    u_xlat6.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres1.xyz);\n    u_xlat7.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres2.xyz);\n    u_xlat8.xyz = vs_TEXCOORD1.xyz + (-_CascadeShadowSplitSpheres3.xyz);\n    u_xlat3.x = dot(u_xlat5.xyz, u_xlat5.xyz);\n    u_xlat3.y = dot(u_xlat6.xyz, u_xlat6.xyz);\n    u_xlat3.z = dot(u_xlat7.xyz, u_xlat7.xyz);\n    u_xlat3.w = dot(u_xlat8.xyz, u_xlat8.xyz);\n    u_xlatb3 = lessThan(u_xlat3, _CascadeShadowSplitSphereRadii);\n    u_xlat16_5.x = (u_xlatb3.x) ? float(1.0) : float(0.0);\n    u_xlat16_5.y = (u_xlatb3.y) ? float(1.0) : float(0.0);\n    u_xlat16_5.z = (u_xlatb3.z) ? float(1.0) : float(0.0);\n    u_xlat16_5.w = (u_xlatb3.w) ? float(1.0) : float(0.0);\n    u_xlat16_9.x = (u_xlatb3.x) ? float(-1.0) : float(-0.0);\n    u_xlat16_9.y = (u_xlatb3.y) ? float(-1.0) : float(-0.0);\n    u_xlat16_9.z = (u_xlatb3.z) ? float(-1.0) : float(-0.0);\n    u_xlat16_9.xyz = u_xlat16_5.yzw + u_xlat16_9.xyz;\n    u_xlat16_5.yzw = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_46 = dot(u_xlat16_5, vec4(4.0, 3.0, 2.0, 1.0));\n    u_xlat16_46 = (-u_xlat16_46) + 4.0;\n    u_xlatu42 = uint(u_xlat16_46);\n    u_xlati42 = int(int(u_xlatu42) << 2);\n    u_xlat6.xyz = vs_TEXCOORD1.yyy * hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati42 + 1)].xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[u_xlati42].xyz * vs_TEXCOORD1.xxx + u_xlat6.xyz;\n    u_xlat6.xyz = hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati42 + 2)].xyz * vs_TEXCOORD1.zzz + u_xlat6.xyz;\n    u_xlat6.xyz = u_xlat6.xyz + hlslcc_mtx4x4_MainLightWorldToShadow[(u_xlati42 + 3)].xyz;\n    u_xlat2.w = 1.0;\n    u_xlat16_9.x = dot(unity_SHAr, u_xlat2);\n    u_xlat16_9.y = dot(unity_SHAg, u_xlat2);\n    u_xlat16_9.z = dot(unity_SHAb, u_xlat2);\n    u_xlat16_9.xyz = u_xlat16_9.xyz + vs_TEXCOORD8.xyz;\n    u_xlat16_10.xyz = u_xlat16_9.xyz * vec3(12.9200001, 12.9200001, 12.9200001);\n    u_xlat16_11.xyz = log2(abs(u_xlat16_9.xyz));\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(0.416666657, 0.416666657, 0.416666657);\n    u_xlat16_11.xyz = exp2(u_xlat16_11.xyz);\n    u_xlat16_11.xyz = u_xlat16_11.xyz * vec3(1.05499995, 1.05499995, 1.05499995) + vec3(-0.0549999997, -0.0549999997, -0.0549999997);\n    u_xlatb7.xyz = greaterThanEqual(vec4(0.00313080009, 0.00313080009, 0.00313080009, 0.0), u_xlat16_9.xyzx).xyz;\n    u_xlat16_9.x = (u_xlatb7.x) ? u_xlat16_10.x : u_xlat16_11.x;\n    u_xlat16_9.y = (u_xlatb7.y) ? u_xlat16_10.y : u_xlat16_11.y;\n    u_xlat16_9.z = (u_xlatb7.z) ? u_xlat16_10.z : u_xlat16_11.z;\n    u_xlat16_9.xyz = max(u_xlat16_9.xyz, vec3(0.0, 0.0, 0.0));\n    u_xlat16_46 = (-_Metallic) * 0.959999979 + 0.959999979;\n    u_xlat16_51 = (-u_xlat16_46) + _Smoothness;\n    u_xlat16_15.xyz = u_xlat16_1.yzw * vec3(u_xlat16_46);\n    u_xlat16_10.xyz = u_xlat16_0.xyz * _BaseColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);\n    u_xlat16_10.xyz = vec3(vec3(_Metallic, _Metallic, _Metallic)) * u_xlat16_10.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);\n    u_xlat16_46 = (-_Smoothness) + 1.0;\n    u_xlat16_52 = u_xlat16_46 * u_xlat16_46;\n    u_xlat16_52 = max(u_xlat16_52, 0.0078125);\n    u_xlat16_11.x = u_xlat16_52 * u_xlat16_52;\n    u_xlat16_51 = u_xlat16_51 + 1.0;\n    u_xlat16_51 = clamp(u_xlat16_51, 0.0, 1.0);\n    u_xlat16_25 = u_xlat16_52 * 4.0 + 2.0;\n    u_xlatb0 = _MainLightShadowParams.y!=0.0;\n    if(u_xlatb0){\n        u_xlat0.xyz = u_xlat6.xyz + _MainLightShadowOffset0.xyz;\n        vec3 txVec0 = vec3(u_xlat0.xy,u_xlat0.z);\n        u_xlat16_0.x = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec0, 0.0);\n        u_xlat7.xyz = u_xlat6.xyz + _MainLightShadowOffset1.xyz;\n        vec3 txVec1 = vec3(u_xlat7.xy,u_xlat7.z);\n        u_xlat16_0.y = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec1, 0.0);\n        u_xlat7.xyz = u_xlat6.xyz + _MainLightShadowOffset2.xyz;\n        vec3 txVec2 = vec3(u_xlat7.xy,u_xlat7.z);\n        u_xlat16_0.z = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec2, 0.0);\n        u_xlat7.xyz = u_xlat6.xyz + _MainLightShadowOffset3.xyz;\n        vec3 txVec3 = vec3(u_xlat7.xy,u_xlat7.z);\n        u_xlat16_0.w = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec3, 0.0);\n        u_xlat16_39 = dot(u_xlat16_0, vec4(0.25, 0.25, 0.25, 0.25));\n    } else {\n        vec3 txVec4 = vec3(u_xlat6.xy,u_xlat6.z);\n        u_xlat16_39 = textureLod(hlslcc_zcmp_MainLightShadowmapTexture, txVec4, 0.0);\n        u_xlat16_39 = u_xlat16_39;\n    }\n    u_xlat16_53 = (-_MainLightShadowParams.x) + 1.0;\n    u_xlat16_39 = u_xlat16_39 * _MainLightShadowParams.x + u_xlat16_53;\n    u_xlatb0 = 0.0>=u_xlat6.z;\n    u_xlatb14 = u_xlat6.z>=1.0;\n    u_xlatb0 = u_xlatb14 || u_xlatb0;\n    u_xlat16_39 = (u_xlatb0) ? 1.0 : u_xlat16_39;\n    u_xlat0.xyz = vs_TEXCOORD1.xyz + (-_WorldSpaceCameraPos.xyz);\n    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat0.x = u_xlat0.x * _MainLightShadowParams.z + _MainLightShadowParams.w;\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat16_53 = (-u_xlat16_39) + 1.0;\n    u_xlat16_39 = u_xlat0.x * u_xlat16_53 + u_xlat16_39;\n    u_xlat16_53 = dot((-u_xlat16_4.xyz), u_xlat2.xyz);\n    u_xlat16_53 = u_xlat16_53 + u_xlat16_53;\n    u_xlat16_12.xyz = u_xlat2.xyz * (-vec3(u_xlat16_53)) + (-u_xlat16_4.xyz);\n    u_xlat16_53 = dot(u_xlat2.xyz, u_xlat16_4.xyz);\n    u_xlat16_53 = clamp(u_xlat16_53, 0.0, 1.0);\n    u_xlat16_53 = (-u_xlat16_53) + 1.0;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_53 = u_xlat16_53 * u_xlat16_53;\n    u_xlat16_54 = (-u_xlat16_46) * 0.699999988 + 1.70000005;\n    u_xlat16_46 = u_xlat16_46 * u_xlat16_54;\n    u_xlat16_46 = u_xlat16_46 * 6.0;\n    u_xlat16_0 = textureLod(unity_SpecCube0, u_xlat16_12.xyz, u_xlat16_46);\n    u_xlat16_46 = u_xlat16_0.w + -1.0;\n    u_xlat16_46 = unity_SpecCube0_HDR.w * u_xlat16_46 + 1.0;\n    u_xlat16_46 = max(u_xlat16_46, 0.0);\n    u_xlat16_46 = log2(u_xlat16_46);\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.y;\n    u_xlat16_46 = exp2(u_xlat16_46);\n    u_xlat16_46 = u_xlat16_46 * unity_SpecCube0_HDR.x;\n    u_xlat16_12.xyz = u_xlat16_0.xyz * vec3(u_xlat16_46);\n    u_xlat16_13.xy = vec2(u_xlat16_52) * vec2(u_xlat16_52) + vec2(-1.0, 1.0);\n    u_xlat16_46 = float(1.0) / u_xlat16_13.y;\n    u_xlat16_27.xyz = (-u_xlat16_10.xyz) + vec3(u_xlat16_51);\n    u_xlat16_27.xyz = vec3(u_xlat16_53) * u_xlat16_27.xyz + u_xlat16_10.xyz;\n    u_xlat0.xyz = vec3(u_xlat16_46) * u_xlat16_27.xyz;\n    u_xlat16_12.xyz = u_xlat0.xyz * u_xlat16_12.xyz;\n    u_xlat16_9.xyz = u_xlat16_9.xyz * u_xlat16_15.xyz + u_xlat16_12.xyz;\n    u_xlat0.x = u_xlat16_39 * unity_LightData.z;\n    u_xlat16_46 = dot(u_xlat2.xyz, _MainLightPosition.xyz);\n    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);\n    u_xlat16_46 = u_xlat0.x * u_xlat16_46;\n    u_xlat16_12.xyz = vec3(u_xlat16_46) * _MainLightColor.xyz;\n    u_xlat0.xyz = u_xlat16_4.xyz + _MainLightPosition.xyz;\n    u_xlat42 = dot(u_xlat0.xyz, u_xlat0.xyz);\n    u_xlat42 = max(u_xlat42, 1.17549435e-38);\n    u_xlat42 = inversesqrt(u_xlat42);\n    u_xlat0.xyz = vec3(u_xlat42) * u_xlat0.xyz;\n    u_xlat42 = dot(u_xlat2.xyz, u_xlat0.xyz);\n    u_xlat42 = clamp(u_xlat42, 0.0, 1.0);\n    u_xlat0.x = dot(_MainLightPosition.xyz, u_xlat0.xyz);\n    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);\n    u_xlat14 = u_xlat42 * u_xlat42;\n    u_xlat14 = u_xlat14 * u_xlat16_13.x + 1.00001001;\n    u_xlat16_4.x = u_xlat0.x * u_xlat0.x;\n    u_xlat0.x = u_xlat14 * u_xlat14;\n    u_xlat14 = max(u_xlat16_4.x, 0.100000001);\n    u_xlat0.x = u_xlat14 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_25 * u_xlat0.x;\n    u_xlat0.x = u_xlat16_11.x / u_xlat0.x;\n    u_xlat16_4.x = u_xlat0.x + -6.10351563e-05;\n    u_xlat16_4.x = max(u_xlat16_4.x, 0.0);\n    u_xlat16_4.x = min(u_xlat16_4.x, 100.0);\n    u_xlat16_4.xyz = u_xlat16_10.xyz * u_xlat16_4.xxx + u_xlat16_15.xyz;\n    u_xlat16_4.xyz = u_xlat16_4.xyz * u_xlat16_12.xyz + u_xlat16_9.xyz;\n    SV_Target0.xyz = vs_TEXCOORD5.yzw * u_xlat16_15.xyz + u_xlat16_4.xyz;\n    u_xlatb0 = _Surface==1.0;\n    SV_Target0.w = (u_xlatb0) ? u_xlat16_1.x : 1.0;\n    return;\n}\n\n","\n#version 100\n\nuniform \tvec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\nuniform \tvec4 hlslcc_mtx4x4unity_WorldToObject[4];\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _BaseMap_ST;\nuniform \tvec4 _ShadowBias;\nuniform \tvec3 _LightDirection;\nattribute highp vec4 in_POSITION0;\nattribute highp vec3 in_NORMAL0;\nattribute highp vec2 in_TEXCOORD0;\nvarying highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = max(u_xlat6, 1.17549435e-38);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat6 = u_xlat6 * _ShadowBias.y;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position.z = max(u_xlat0.z, -1.0);\n    gl_Position.xyw = u_xlat0.xyw;\n    return;\n}\n\n","\n#version 100\n\n#ifdef GL_FRAGMENT_PRECISION_HIGH\n    precision highp float;\n#else\n    precision mediump float;\n#endif\nprecision highp int;\n#define SV_TARGET0 gl_FragData[0]\nvoid main()\n{\n    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n","\n#version 300 es\n\n#define HLSLCC_ENABLE_UNIFORM_BUFFERS 0\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n#define UNITY_UNIFORM\n#else\n#define UNITY_UNIFORM uniform\n#endif\n#define UNITY_SUPPORTS_UNIFORM_LOCATION 0\n#if UNITY_SUPPORTS_UNIFORM_LOCATION\n#define UNITY_LOCATION(x) layout(location = x)\n#define UNITY_BINDING(x) layout(binding = x, std140)\n#else\n#define UNITY_LOCATION(x)\n#define UNITY_BINDING(x) layout(std140)\n#endif\nuniform \tvec4 hlslcc_mtx4x4unity_MatrixVP[4];\nuniform \tvec4 _ShadowBias;\nuniform \tvec3 _LightDirection;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(0) uniform UnityPerDraw {\n#endif\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_WorldToObject[4];\n\tUNITY_UNIFORM vec4 unity_LODFade;\n\tUNITY_UNIFORM mediump vec4 unity_WorldTransformParams;\n\tUNITY_UNIFORM vec4 unity_RenderingLayer;\n\tUNITY_UNIFORM mediump vec4 unity_LightData;\n\tUNITY_UNIFORM mediump vec4 unity_LightIndices[2];\n\tUNITY_UNIFORM vec4 unity_ProbesOcclusion;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube0_HDR;\n\tUNITY_UNIFORM mediump vec4 unity_SpecCube1_HDR;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube0_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMax;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_BoxMin;\n\tUNITY_UNIFORM vec4 unity_SpecCube1_ProbePosition;\n\tUNITY_UNIFORM vec4 unity_LightmapST;\n\tUNITY_UNIFORM vec4 unity_DynamicLightmapST;\n\tUNITY_UNIFORM mediump vec4 unity_SHAr;\n\tUNITY_UNIFORM mediump vec4 unity_SHAg;\n\tUNITY_UNIFORM mediump vec4 unity_SHAb;\n\tUNITY_UNIFORM mediump vec4 unity_SHBr;\n\tUNITY_UNIFORM mediump vec4 unity_SHBg;\n\tUNITY_UNIFORM mediump vec4 unity_SHBb;\n\tUNITY_UNIFORM mediump vec4 unity_SHC;\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousM[4];\n\tUNITY_UNIFORM vec4 hlslcc_mtx4x4unity_MatrixPreviousMI[4];\n\tUNITY_UNIFORM vec4 unity_MotionVectorsParams;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\nUNITY_BINDING(1) uniform UnityPerMaterial {\n#endif\n\tUNITY_UNIFORM vec4 _BaseMap_ST;\n\tUNITY_UNIFORM vec4 _DetailAlbedoMap_ST;\n\tUNITY_UNIFORM mediump vec4 _BaseColor;\n\tUNITY_UNIFORM mediump vec4 _SpecColor;\n\tUNITY_UNIFORM mediump vec4 _EmissionColor;\n\tUNITY_UNIFORM mediump float _Cutoff;\n\tUNITY_UNIFORM mediump float _Smoothness;\n\tUNITY_UNIFORM mediump float _Metallic;\n\tUNITY_UNIFORM mediump float _BumpScale;\n\tUNITY_UNIFORM mediump float _Parallax;\n\tUNITY_UNIFORM mediump float _OcclusionStrength;\n\tUNITY_UNIFORM mediump float _ClearCoatMask;\n\tUNITY_UNIFORM mediump float _ClearCoatSmoothness;\n\tUNITY_UNIFORM mediump float _DetailAlbedoMapScale;\n\tUNITY_UNIFORM mediump float _DetailNormalMapScale;\n\tUNITY_UNIFORM mediump float _Surface;\n#if HLSLCC_ENABLE_UNIFORM_BUFFERS\n};\n#endif\nin highp vec4 in_POSITION0;\nin highp vec3 in_NORMAL0;\nin highp vec2 in_TEXCOORD0;\nout highp vec2 vs_TEXCOORD0;\nvec4 u_xlat0;\nvec4 u_xlat1;\nfloat u_xlat6;\nvoid main()\n{\n    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _BaseMap_ST.xy + _BaseMap_ST.zw;\n    u_xlat0.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat0.xyz;\n    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat0.xyz;\n    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;\n    u_xlat0.xyz = _LightDirection.xyz * _ShadowBias.xxx + u_xlat0.xyz;\n    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);\n    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);\n    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);\n    u_xlat6 = dot(u_xlat1.xyz, u_xlat1.xyz);\n    u_xlat6 = max(u_xlat6, 1.17549435e-38);\n    u_xlat6 = inversesqrt(u_xlat6);\n    u_xlat1.xyz = vec3(u_xlat6) * u_xlat1.xyz;\n    u_xlat6 = dot(_LightDirection.xyz, u_xlat1.xyz);\n    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);\n    u_xlat6 = (-u_xlat6) + 1.0;\n    u_xlat6 = u_xlat6 * _ShadowBias.y;\n    u_xlat0.xyz = u_xlat1.xyz * vec3(u_xlat6) + u_xlat0.xyz;\n    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];\n    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;\n    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;\n    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];\n    gl_Position.z = max(u_xlat0.z, -1.0);\n    gl_Position.xyw = u_xlat0.xyw;\n    return;\n}\n\n","\n#version 300 es\n\nprecision highp float;\nprecision highp int;\nlayout(location = 0) out mediump vec4 SV_TARGET0;\nvoid main()\n{\n    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);\n    return;\n}\n\n"]